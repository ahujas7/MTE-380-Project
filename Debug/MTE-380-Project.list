
MTE-380-Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f68  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080050fc  080050fc  000150fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005114  08005114  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005114  08005114  00015114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800511c  0800511c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800511c  0800511c  0001511c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005120  08005120  00015120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005124  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  20000010  08005130  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08005130  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000104ce  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e06  00000000  00000000  0003050a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec8  00000000  00000000  00032310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e28  00000000  00000000  000331d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001d3c  00000000  00000000  00034000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011336  00000000  00000000  00035d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008be93  00000000  00000000  00047072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d2f05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004060  00000000  00000000  000d2f58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080050e4 	.word	0x080050e4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	080050e4 	.word	0x080050e4

080001d4 <__aeabi_drsub>:
 80001d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d8:	e002      	b.n	80001e0 <__adddf3>
 80001da:	bf00      	nop

080001dc <__aeabi_dsub>:
 80001dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e0 <__adddf3>:
 80001e0:	b530      	push	{r4, r5, lr}
 80001e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ea:	ea94 0f05 	teq	r4, r5
 80001ee:	bf08      	it	eq
 80001f0:	ea90 0f02 	teqeq	r0, r2
 80001f4:	bf1f      	itttt	ne
 80001f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000202:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000206:	f000 80e2 	beq.w	80003ce <__adddf3+0x1ee>
 800020a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000212:	bfb8      	it	lt
 8000214:	426d      	neglt	r5, r5
 8000216:	dd0c      	ble.n	8000232 <__adddf3+0x52>
 8000218:	442c      	add	r4, r5
 800021a:	ea80 0202 	eor.w	r2, r0, r2
 800021e:	ea81 0303 	eor.w	r3, r1, r3
 8000222:	ea82 0000 	eor.w	r0, r2, r0
 8000226:	ea83 0101 	eor.w	r1, r3, r1
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	2d36      	cmp	r5, #54	; 0x36
 8000234:	bf88      	it	hi
 8000236:	bd30      	pophi	{r4, r5, pc}
 8000238:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800023c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000240:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000244:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000248:	d002      	beq.n	8000250 <__adddf3+0x70>
 800024a:	4240      	negs	r0, r0
 800024c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000250:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000254:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000258:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x84>
 800025e:	4252      	negs	r2, r2
 8000260:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000264:	ea94 0f05 	teq	r4, r5
 8000268:	f000 80a7 	beq.w	80003ba <__adddf3+0x1da>
 800026c:	f1a4 0401 	sub.w	r4, r4, #1
 8000270:	f1d5 0e20 	rsbs	lr, r5, #32
 8000274:	db0d      	blt.n	8000292 <__adddf3+0xb2>
 8000276:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027a:	fa22 f205 	lsr.w	r2, r2, r5
 800027e:	1880      	adds	r0, r0, r2
 8000280:	f141 0100 	adc.w	r1, r1, #0
 8000284:	fa03 f20e 	lsl.w	r2, r3, lr
 8000288:	1880      	adds	r0, r0, r2
 800028a:	fa43 f305 	asr.w	r3, r3, r5
 800028e:	4159      	adcs	r1, r3
 8000290:	e00e      	b.n	80002b0 <__adddf3+0xd0>
 8000292:	f1a5 0520 	sub.w	r5, r5, #32
 8000296:	f10e 0e20 	add.w	lr, lr, #32
 800029a:	2a01      	cmp	r2, #1
 800029c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a0:	bf28      	it	cs
 80002a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	18c0      	adds	r0, r0, r3
 80002ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b4:	d507      	bpl.n	80002c6 <__adddf3+0xe6>
 80002b6:	f04f 0e00 	mov.w	lr, #0
 80002ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80002be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ca:	d31b      	bcc.n	8000304 <__adddf3+0x124>
 80002cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d0:	d30c      	bcc.n	80002ec <__adddf3+0x10c>
 80002d2:	0849      	lsrs	r1, r1, #1
 80002d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002dc:	f104 0401 	add.w	r4, r4, #1
 80002e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e8:	f080 809a 	bcs.w	8000420 <__adddf3+0x240>
 80002ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f0:	bf08      	it	eq
 80002f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f6:	f150 0000 	adcs.w	r0, r0, #0
 80002fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fe:	ea41 0105 	orr.w	r1, r1, r5
 8000302:	bd30      	pop	{r4, r5, pc}
 8000304:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000308:	4140      	adcs	r0, r0
 800030a:	eb41 0101 	adc.w	r1, r1, r1
 800030e:	3c01      	subs	r4, #1
 8000310:	bf28      	it	cs
 8000312:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000316:	d2e9      	bcs.n	80002ec <__adddf3+0x10c>
 8000318:	f091 0f00 	teq	r1, #0
 800031c:	bf04      	itt	eq
 800031e:	4601      	moveq	r1, r0
 8000320:	2000      	moveq	r0, #0
 8000322:	fab1 f381 	clz	r3, r1
 8000326:	bf08      	it	eq
 8000328:	3320      	addeq	r3, #32
 800032a:	f1a3 030b 	sub.w	r3, r3, #11
 800032e:	f1b3 0220 	subs.w	r2, r3, #32
 8000332:	da0c      	bge.n	800034e <__adddf3+0x16e>
 8000334:	320c      	adds	r2, #12
 8000336:	dd08      	ble.n	800034a <__adddf3+0x16a>
 8000338:	f102 0c14 	add.w	ip, r2, #20
 800033c:	f1c2 020c 	rsb	r2, r2, #12
 8000340:	fa01 f00c 	lsl.w	r0, r1, ip
 8000344:	fa21 f102 	lsr.w	r1, r1, r2
 8000348:	e00c      	b.n	8000364 <__adddf3+0x184>
 800034a:	f102 0214 	add.w	r2, r2, #20
 800034e:	bfd8      	it	le
 8000350:	f1c2 0c20 	rsble	ip, r2, #32
 8000354:	fa01 f102 	lsl.w	r1, r1, r2
 8000358:	fa20 fc0c 	lsr.w	ip, r0, ip
 800035c:	bfdc      	itt	le
 800035e:	ea41 010c 	orrle.w	r1, r1, ip
 8000362:	4090      	lslle	r0, r2
 8000364:	1ae4      	subs	r4, r4, r3
 8000366:	bfa2      	ittt	ge
 8000368:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800036c:	4329      	orrge	r1, r5
 800036e:	bd30      	popge	{r4, r5, pc}
 8000370:	ea6f 0404 	mvn.w	r4, r4
 8000374:	3c1f      	subs	r4, #31
 8000376:	da1c      	bge.n	80003b2 <__adddf3+0x1d2>
 8000378:	340c      	adds	r4, #12
 800037a:	dc0e      	bgt.n	800039a <__adddf3+0x1ba>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0220 	rsb	r2, r4, #32
 8000384:	fa20 f004 	lsr.w	r0, r0, r4
 8000388:	fa01 f302 	lsl.w	r3, r1, r2
 800038c:	ea40 0003 	orr.w	r0, r0, r3
 8000390:	fa21 f304 	lsr.w	r3, r1, r4
 8000394:	ea45 0103 	orr.w	r1, r5, r3
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	f1c4 040c 	rsb	r4, r4, #12
 800039e:	f1c4 0220 	rsb	r2, r4, #32
 80003a2:	fa20 f002 	lsr.w	r0, r0, r2
 80003a6:	fa01 f304 	lsl.w	r3, r1, r4
 80003aa:	ea40 0003 	orr.w	r0, r0, r3
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	fa21 f004 	lsr.w	r0, r1, r4
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	f094 0f00 	teq	r4, #0
 80003be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c2:	bf06      	itte	eq
 80003c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c8:	3401      	addeq	r4, #1
 80003ca:	3d01      	subne	r5, #1
 80003cc:	e74e      	b.n	800026c <__adddf3+0x8c>
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf18      	it	ne
 80003d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d8:	d029      	beq.n	800042e <__adddf3+0x24e>
 80003da:	ea94 0f05 	teq	r4, r5
 80003de:	bf08      	it	eq
 80003e0:	ea90 0f02 	teqeq	r0, r2
 80003e4:	d005      	beq.n	80003f2 <__adddf3+0x212>
 80003e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ea:	bf04      	itt	eq
 80003ec:	4619      	moveq	r1, r3
 80003ee:	4610      	moveq	r0, r2
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	ea91 0f03 	teq	r1, r3
 80003f6:	bf1e      	ittt	ne
 80003f8:	2100      	movne	r1, #0
 80003fa:	2000      	movne	r0, #0
 80003fc:	bd30      	popne	{r4, r5, pc}
 80003fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000402:	d105      	bne.n	8000410 <__adddf3+0x230>
 8000404:	0040      	lsls	r0, r0, #1
 8000406:	4149      	adcs	r1, r1
 8000408:	bf28      	it	cs
 800040a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000414:	bf3c      	itt	cc
 8000416:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041a:	bd30      	popcc	{r4, r5, pc}
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000424:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf1a      	itte	ne
 8000434:	4619      	movne	r1, r3
 8000436:	4610      	movne	r0, r2
 8000438:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800043c:	bf1c      	itt	ne
 800043e:	460b      	movne	r3, r1
 8000440:	4602      	movne	r2, r0
 8000442:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000446:	bf06      	itte	eq
 8000448:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800044c:	ea91 0f03 	teqeq	r1, r3
 8000450:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	bf00      	nop

08000458 <__aeabi_ui2d>:
 8000458:	f090 0f00 	teq	r0, #0
 800045c:	bf04      	itt	eq
 800045e:	2100      	moveq	r1, #0
 8000460:	4770      	bxeq	lr
 8000462:	b530      	push	{r4, r5, lr}
 8000464:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000468:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800046c:	f04f 0500 	mov.w	r5, #0
 8000470:	f04f 0100 	mov.w	r1, #0
 8000474:	e750      	b.n	8000318 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_i2d>:
 8000478:	f090 0f00 	teq	r0, #0
 800047c:	bf04      	itt	eq
 800047e:	2100      	moveq	r1, #0
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000488:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000490:	bf48      	it	mi
 8000492:	4240      	negmi	r0, r0
 8000494:	f04f 0100 	mov.w	r1, #0
 8000498:	e73e      	b.n	8000318 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_f2d>:
 800049c:	0042      	lsls	r2, r0, #1
 800049e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004aa:	bf1f      	itttt	ne
 80004ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b8:	4770      	bxne	lr
 80004ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004be:	bf08      	it	eq
 80004c0:	4770      	bxeq	lr
 80004c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c6:	bf04      	itt	eq
 80004c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	e71c      	b.n	8000318 <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_ul2d>:
 80004e0:	ea50 0201 	orrs.w	r2, r0, r1
 80004e4:	bf08      	it	eq
 80004e6:	4770      	bxeq	lr
 80004e8:	b530      	push	{r4, r5, lr}
 80004ea:	f04f 0500 	mov.w	r5, #0
 80004ee:	e00a      	b.n	8000506 <__aeabi_l2d+0x16>

080004f0 <__aeabi_l2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fe:	d502      	bpl.n	8000506 <__aeabi_l2d+0x16>
 8000500:	4240      	negs	r0, r0
 8000502:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000506:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000512:	f43f aed8 	beq.w	80002c6 <__adddf3+0xe6>
 8000516:	f04f 0203 	mov.w	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052e:	f1c2 0320 	rsb	r3, r2, #32
 8000532:	fa00 fc03 	lsl.w	ip, r0, r3
 8000536:	fa20 f002 	lsr.w	r0, r0, r2
 800053a:	fa01 fe03 	lsl.w	lr, r1, r3
 800053e:	ea40 000e 	orr.w	r0, r0, lr
 8000542:	fa21 f102 	lsr.w	r1, r1, r2
 8000546:	4414      	add	r4, r2
 8000548:	e6bd      	b.n	80002c6 <__adddf3+0xe6>
 800054a:	bf00      	nop

0800054c <__aeabi_dmul>:
 800054c:	b570      	push	{r4, r5, r6, lr}
 800054e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000552:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000556:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055a:	bf1d      	ittte	ne
 800055c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000560:	ea94 0f0c 	teqne	r4, ip
 8000564:	ea95 0f0c 	teqne	r5, ip
 8000568:	f000 f8de 	bleq	8000728 <__aeabi_dmul+0x1dc>
 800056c:	442c      	add	r4, r5
 800056e:	ea81 0603 	eor.w	r6, r1, r3
 8000572:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000576:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057e:	bf18      	it	ne
 8000580:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000584:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000588:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800058c:	d038      	beq.n	8000600 <__aeabi_dmul+0xb4>
 800058e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000592:	f04f 0500 	mov.w	r5, #0
 8000596:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a2:	f04f 0600 	mov.w	r6, #0
 80005a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005aa:	f09c 0f00 	teq	ip, #0
 80005ae:	bf18      	it	ne
 80005b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c0:	d204      	bcs.n	80005cc <__aeabi_dmul+0x80>
 80005c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c6:	416d      	adcs	r5, r5
 80005c8:	eb46 0606 	adc.w	r6, r6, r6
 80005cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e4:	bf88      	it	hi
 80005e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ea:	d81e      	bhi.n	800062a <__aeabi_dmul+0xde>
 80005ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	bd70      	pop	{r4, r5, r6, pc}
 8000600:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000604:	ea46 0101 	orr.w	r1, r6, r1
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	ea81 0103 	eor.w	r1, r1, r3
 8000610:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000614:	bfc2      	ittt	gt
 8000616:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061e:	bd70      	popgt	{r4, r5, r6, pc}
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f04f 0e00 	mov.w	lr, #0
 8000628:	3c01      	subs	r4, #1
 800062a:	f300 80ab 	bgt.w	8000784 <__aeabi_dmul+0x238>
 800062e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000632:	bfde      	ittt	le
 8000634:	2000      	movle	r0, #0
 8000636:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063a:	bd70      	pople	{r4, r5, r6, pc}
 800063c:	f1c4 0400 	rsb	r4, r4, #0
 8000640:	3c20      	subs	r4, #32
 8000642:	da35      	bge.n	80006b0 <__aeabi_dmul+0x164>
 8000644:	340c      	adds	r4, #12
 8000646:	dc1b      	bgt.n	8000680 <__aeabi_dmul+0x134>
 8000648:	f104 0414 	add.w	r4, r4, #20
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f305 	lsl.w	r3, r0, r5
 8000654:	fa20 f004 	lsr.w	r0, r0, r4
 8000658:	fa01 f205 	lsl.w	r2, r1, r5
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000664:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800066c:	fa21 f604 	lsr.w	r6, r1, r4
 8000670:	eb42 0106 	adc.w	r1, r2, r6
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 040c 	rsb	r4, r4, #12
 8000684:	f1c4 0520 	rsb	r5, r4, #32
 8000688:	fa00 f304 	lsl.w	r3, r0, r4
 800068c:	fa20 f005 	lsr.w	r0, r0, r5
 8000690:	fa01 f204 	lsl.w	r2, r1, r4
 8000694:	ea40 0002 	orr.w	r0, r0, r2
 8000698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	f141 0100 	adc.w	r1, r1, #0
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f205 	lsl.w	r2, r0, r5
 80006b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006bc:	fa20 f304 	lsr.w	r3, r0, r4
 80006c0:	fa01 f205 	lsl.w	r2, r1, r5
 80006c4:	ea43 0302 	orr.w	r3, r3, r2
 80006c8:	fa21 f004 	lsr.w	r0, r1, r4
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	fa21 f204 	lsr.w	r2, r1, r4
 80006d4:	ea20 0002 	bic.w	r0, r0, r2
 80006d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e0:	bf08      	it	eq
 80006e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e6:	bd70      	pop	{r4, r5, r6, pc}
 80006e8:	f094 0f00 	teq	r4, #0
 80006ec:	d10f      	bne.n	800070e <__aeabi_dmul+0x1c2>
 80006ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f2:	0040      	lsls	r0, r0, #1
 80006f4:	eb41 0101 	adc.w	r1, r1, r1
 80006f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006fc:	bf08      	it	eq
 80006fe:	3c01      	subeq	r4, #1
 8000700:	d0f7      	beq.n	80006f2 <__aeabi_dmul+0x1a6>
 8000702:	ea41 0106 	orr.w	r1, r1, r6
 8000706:	f095 0f00 	teq	r5, #0
 800070a:	bf18      	it	ne
 800070c:	4770      	bxne	lr
 800070e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000712:	0052      	lsls	r2, r2, #1
 8000714:	eb43 0303 	adc.w	r3, r3, r3
 8000718:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800071c:	bf08      	it	eq
 800071e:	3d01      	subeq	r5, #1
 8000720:	d0f7      	beq.n	8000712 <__aeabi_dmul+0x1c6>
 8000722:	ea43 0306 	orr.w	r3, r3, r6
 8000726:	4770      	bx	lr
 8000728:	ea94 0f0c 	teq	r4, ip
 800072c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000730:	bf18      	it	ne
 8000732:	ea95 0f0c 	teqne	r5, ip
 8000736:	d00c      	beq.n	8000752 <__aeabi_dmul+0x206>
 8000738:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800073c:	bf18      	it	ne
 800073e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000742:	d1d1      	bne.n	80006e8 <__aeabi_dmul+0x19c>
 8000744:	ea81 0103 	eor.w	r1, r1, r3
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000756:	bf06      	itte	eq
 8000758:	4610      	moveq	r0, r2
 800075a:	4619      	moveq	r1, r3
 800075c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000760:	d019      	beq.n	8000796 <__aeabi_dmul+0x24a>
 8000762:	ea94 0f0c 	teq	r4, ip
 8000766:	d102      	bne.n	800076e <__aeabi_dmul+0x222>
 8000768:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800076c:	d113      	bne.n	8000796 <__aeabi_dmul+0x24a>
 800076e:	ea95 0f0c 	teq	r5, ip
 8000772:	d105      	bne.n	8000780 <__aeabi_dmul+0x234>
 8000774:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000778:	bf1c      	itt	ne
 800077a:	4610      	movne	r0, r2
 800077c:	4619      	movne	r1, r3
 800077e:	d10a      	bne.n	8000796 <__aeabi_dmul+0x24a>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079e:	bd70      	pop	{r4, r5, r6, pc}

080007a0 <__aeabi_ddiv>:
 80007a0:	b570      	push	{r4, r5, r6, lr}
 80007a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ae:	bf1d      	ittte	ne
 80007b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b4:	ea94 0f0c 	teqne	r4, ip
 80007b8:	ea95 0f0c 	teqne	r5, ip
 80007bc:	f000 f8a7 	bleq	800090e <__aeabi_ddiv+0x16e>
 80007c0:	eba4 0405 	sub.w	r4, r4, r5
 80007c4:	ea81 0e03 	eor.w	lr, r1, r3
 80007c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d0:	f000 8088 	beq.w	80008e4 <__aeabi_ddiv+0x144>
 80007d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f8:	429d      	cmp	r5, r3
 80007fa:	bf08      	it	eq
 80007fc:	4296      	cmpeq	r6, r2
 80007fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000802:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000806:	d202      	bcs.n	800080e <__aeabi_ddiv+0x6e>
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	1ab6      	subs	r6, r6, r2
 8000810:	eb65 0503 	sbc.w	r5, r5, r3
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 000c 	orrcs.w	r0, r0, ip
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800087c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000880:	d018      	beq.n	80008b4 <__aeabi_ddiv+0x114>
 8000882:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000886:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000892:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000896:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089e:	d1c0      	bne.n	8000822 <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	d10b      	bne.n	80008be <__aeabi_ddiv+0x11e>
 80008a6:	ea41 0100 	orr.w	r1, r1, r0
 80008aa:	f04f 0000 	mov.w	r0, #0
 80008ae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b2:	e7b6      	b.n	8000822 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	bf04      	itt	eq
 80008ba:	4301      	orreq	r1, r0
 80008bc:	2000      	moveq	r0, #0
 80008be:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c2:	bf88      	it	hi
 80008c4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c8:	f63f aeaf 	bhi.w	800062a <__aeabi_dmul+0xde>
 80008cc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d0:	bf04      	itt	eq
 80008d2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008da:	f150 0000 	adcs.w	r0, r0, #0
 80008de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e2:	bd70      	pop	{r4, r5, r6, pc}
 80008e4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f0:	bfc2      	ittt	gt
 80008f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	popgt	{r4, r5, r6, pc}
 80008fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000900:	f04f 0e00 	mov.w	lr, #0
 8000904:	3c01      	subs	r4, #1
 8000906:	e690      	b.n	800062a <__aeabi_dmul+0xde>
 8000908:	ea45 0e06 	orr.w	lr, r5, r6
 800090c:	e68d      	b.n	800062a <__aeabi_dmul+0xde>
 800090e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000912:	ea94 0f0c 	teq	r4, ip
 8000916:	bf08      	it	eq
 8000918:	ea95 0f0c 	teqeq	r5, ip
 800091c:	f43f af3b 	beq.w	8000796 <__aeabi_dmul+0x24a>
 8000920:	ea94 0f0c 	teq	r4, ip
 8000924:	d10a      	bne.n	800093c <__aeabi_ddiv+0x19c>
 8000926:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092a:	f47f af34 	bne.w	8000796 <__aeabi_dmul+0x24a>
 800092e:	ea95 0f0c 	teq	r5, ip
 8000932:	f47f af25 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e72c      	b.n	8000796 <__aeabi_dmul+0x24a>
 800093c:	ea95 0f0c 	teq	r5, ip
 8000940:	d106      	bne.n	8000950 <__aeabi_ddiv+0x1b0>
 8000942:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000946:	f43f aefd 	beq.w	8000744 <__aeabi_dmul+0x1f8>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e722      	b.n	8000796 <__aeabi_dmul+0x24a>
 8000950:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095a:	f47f aec5 	bne.w	80006e8 <__aeabi_dmul+0x19c>
 800095e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000962:	f47f af0d 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000966:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096a:	f47f aeeb 	bne.w	8000744 <__aeabi_dmul+0x1f8>
 800096e:	e712      	b.n	8000796 <__aeabi_dmul+0x24a>

08000970 <__aeabi_uldivmod>:
 8000970:	b953      	cbnz	r3, 8000988 <__aeabi_uldivmod+0x18>
 8000972:	b94a      	cbnz	r2, 8000988 <__aeabi_uldivmod+0x18>
 8000974:	2900      	cmp	r1, #0
 8000976:	bf08      	it	eq
 8000978:	2800      	cmpeq	r0, #0
 800097a:	bf1c      	itt	ne
 800097c:	f04f 31ff 	movne.w	r1, #4294967295
 8000980:	f04f 30ff 	movne.w	r0, #4294967295
 8000984:	f000 b974 	b.w	8000c70 <__aeabi_idiv0>
 8000988:	f1ad 0c08 	sub.w	ip, sp, #8
 800098c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000990:	f000 f806 	bl	80009a0 <__udivmoddi4>
 8000994:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000998:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800099c:	b004      	add	sp, #16
 800099e:	4770      	bx	lr

080009a0 <__udivmoddi4>:
 80009a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009a4:	9d08      	ldr	r5, [sp, #32]
 80009a6:	4604      	mov	r4, r0
 80009a8:	468e      	mov	lr, r1
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d14d      	bne.n	8000a4a <__udivmoddi4+0xaa>
 80009ae:	428a      	cmp	r2, r1
 80009b0:	4694      	mov	ip, r2
 80009b2:	d969      	bls.n	8000a88 <__udivmoddi4+0xe8>
 80009b4:	fab2 f282 	clz	r2, r2
 80009b8:	b152      	cbz	r2, 80009d0 <__udivmoddi4+0x30>
 80009ba:	fa01 f302 	lsl.w	r3, r1, r2
 80009be:	f1c2 0120 	rsb	r1, r2, #32
 80009c2:	fa20 f101 	lsr.w	r1, r0, r1
 80009c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80009ca:	ea41 0e03 	orr.w	lr, r1, r3
 80009ce:	4094      	lsls	r4, r2
 80009d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009d4:	0c21      	lsrs	r1, r4, #16
 80009d6:	fbbe f6f8 	udiv	r6, lr, r8
 80009da:	fa1f f78c 	uxth.w	r7, ip
 80009de:	fb08 e316 	mls	r3, r8, r6, lr
 80009e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009e6:	fb06 f107 	mul.w	r1, r6, r7
 80009ea:	4299      	cmp	r1, r3
 80009ec:	d90a      	bls.n	8000a04 <__udivmoddi4+0x64>
 80009ee:	eb1c 0303 	adds.w	r3, ip, r3
 80009f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80009f6:	f080 811f 	bcs.w	8000c38 <__udivmoddi4+0x298>
 80009fa:	4299      	cmp	r1, r3
 80009fc:	f240 811c 	bls.w	8000c38 <__udivmoddi4+0x298>
 8000a00:	3e02      	subs	r6, #2
 8000a02:	4463      	add	r3, ip
 8000a04:	1a5b      	subs	r3, r3, r1
 8000a06:	b2a4      	uxth	r4, r4
 8000a08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a0c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a14:	fb00 f707 	mul.w	r7, r0, r7
 8000a18:	42a7      	cmp	r7, r4
 8000a1a:	d90a      	bls.n	8000a32 <__udivmoddi4+0x92>
 8000a1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a20:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a24:	f080 810a 	bcs.w	8000c3c <__udivmoddi4+0x29c>
 8000a28:	42a7      	cmp	r7, r4
 8000a2a:	f240 8107 	bls.w	8000c3c <__udivmoddi4+0x29c>
 8000a2e:	4464      	add	r4, ip
 8000a30:	3802      	subs	r0, #2
 8000a32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a36:	1be4      	subs	r4, r4, r7
 8000a38:	2600      	movs	r6, #0
 8000a3a:	b11d      	cbz	r5, 8000a44 <__udivmoddi4+0xa4>
 8000a3c:	40d4      	lsrs	r4, r2
 8000a3e:	2300      	movs	r3, #0
 8000a40:	e9c5 4300 	strd	r4, r3, [r5]
 8000a44:	4631      	mov	r1, r6
 8000a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a4a:	428b      	cmp	r3, r1
 8000a4c:	d909      	bls.n	8000a62 <__udivmoddi4+0xc2>
 8000a4e:	2d00      	cmp	r5, #0
 8000a50:	f000 80ef 	beq.w	8000c32 <__udivmoddi4+0x292>
 8000a54:	2600      	movs	r6, #0
 8000a56:	e9c5 0100 	strd	r0, r1, [r5]
 8000a5a:	4630      	mov	r0, r6
 8000a5c:	4631      	mov	r1, r6
 8000a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a62:	fab3 f683 	clz	r6, r3
 8000a66:	2e00      	cmp	r6, #0
 8000a68:	d14a      	bne.n	8000b00 <__udivmoddi4+0x160>
 8000a6a:	428b      	cmp	r3, r1
 8000a6c:	d302      	bcc.n	8000a74 <__udivmoddi4+0xd4>
 8000a6e:	4282      	cmp	r2, r0
 8000a70:	f200 80f9 	bhi.w	8000c66 <__udivmoddi4+0x2c6>
 8000a74:	1a84      	subs	r4, r0, r2
 8000a76:	eb61 0303 	sbc.w	r3, r1, r3
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	469e      	mov	lr, r3
 8000a7e:	2d00      	cmp	r5, #0
 8000a80:	d0e0      	beq.n	8000a44 <__udivmoddi4+0xa4>
 8000a82:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a86:	e7dd      	b.n	8000a44 <__udivmoddi4+0xa4>
 8000a88:	b902      	cbnz	r2, 8000a8c <__udivmoddi4+0xec>
 8000a8a:	deff      	udf	#255	; 0xff
 8000a8c:	fab2 f282 	clz	r2, r2
 8000a90:	2a00      	cmp	r2, #0
 8000a92:	f040 8092 	bne.w	8000bba <__udivmoddi4+0x21a>
 8000a96:	eba1 010c 	sub.w	r1, r1, ip
 8000a9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a9e:	fa1f fe8c 	uxth.w	lr, ip
 8000aa2:	2601      	movs	r6, #1
 8000aa4:	0c20      	lsrs	r0, r4, #16
 8000aa6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000aaa:	fb07 1113 	mls	r1, r7, r3, r1
 8000aae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ab2:	fb0e f003 	mul.w	r0, lr, r3
 8000ab6:	4288      	cmp	r0, r1
 8000ab8:	d908      	bls.n	8000acc <__udivmoddi4+0x12c>
 8000aba:	eb1c 0101 	adds.w	r1, ip, r1
 8000abe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ac2:	d202      	bcs.n	8000aca <__udivmoddi4+0x12a>
 8000ac4:	4288      	cmp	r0, r1
 8000ac6:	f200 80cb 	bhi.w	8000c60 <__udivmoddi4+0x2c0>
 8000aca:	4643      	mov	r3, r8
 8000acc:	1a09      	subs	r1, r1, r0
 8000ace:	b2a4      	uxth	r4, r4
 8000ad0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ad4:	fb07 1110 	mls	r1, r7, r0, r1
 8000ad8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000adc:	fb0e fe00 	mul.w	lr, lr, r0
 8000ae0:	45a6      	cmp	lr, r4
 8000ae2:	d908      	bls.n	8000af6 <__udivmoddi4+0x156>
 8000ae4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ae8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aec:	d202      	bcs.n	8000af4 <__udivmoddi4+0x154>
 8000aee:	45a6      	cmp	lr, r4
 8000af0:	f200 80bb 	bhi.w	8000c6a <__udivmoddi4+0x2ca>
 8000af4:	4608      	mov	r0, r1
 8000af6:	eba4 040e 	sub.w	r4, r4, lr
 8000afa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000afe:	e79c      	b.n	8000a3a <__udivmoddi4+0x9a>
 8000b00:	f1c6 0720 	rsb	r7, r6, #32
 8000b04:	40b3      	lsls	r3, r6
 8000b06:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b0a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b0e:	fa20 f407 	lsr.w	r4, r0, r7
 8000b12:	fa01 f306 	lsl.w	r3, r1, r6
 8000b16:	431c      	orrs	r4, r3
 8000b18:	40f9      	lsrs	r1, r7
 8000b1a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b1e:	fa00 f306 	lsl.w	r3, r0, r6
 8000b22:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b26:	0c20      	lsrs	r0, r4, #16
 8000b28:	fa1f fe8c 	uxth.w	lr, ip
 8000b2c:	fb09 1118 	mls	r1, r9, r8, r1
 8000b30:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b34:	fb08 f00e 	mul.w	r0, r8, lr
 8000b38:	4288      	cmp	r0, r1
 8000b3a:	fa02 f206 	lsl.w	r2, r2, r6
 8000b3e:	d90b      	bls.n	8000b58 <__udivmoddi4+0x1b8>
 8000b40:	eb1c 0101 	adds.w	r1, ip, r1
 8000b44:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b48:	f080 8088 	bcs.w	8000c5c <__udivmoddi4+0x2bc>
 8000b4c:	4288      	cmp	r0, r1
 8000b4e:	f240 8085 	bls.w	8000c5c <__udivmoddi4+0x2bc>
 8000b52:	f1a8 0802 	sub.w	r8, r8, #2
 8000b56:	4461      	add	r1, ip
 8000b58:	1a09      	subs	r1, r1, r0
 8000b5a:	b2a4      	uxth	r4, r4
 8000b5c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b60:	fb09 1110 	mls	r1, r9, r0, r1
 8000b64:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b6c:	458e      	cmp	lr, r1
 8000b6e:	d908      	bls.n	8000b82 <__udivmoddi4+0x1e2>
 8000b70:	eb1c 0101 	adds.w	r1, ip, r1
 8000b74:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b78:	d26c      	bcs.n	8000c54 <__udivmoddi4+0x2b4>
 8000b7a:	458e      	cmp	lr, r1
 8000b7c:	d96a      	bls.n	8000c54 <__udivmoddi4+0x2b4>
 8000b7e:	3802      	subs	r0, #2
 8000b80:	4461      	add	r1, ip
 8000b82:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b86:	fba0 9402 	umull	r9, r4, r0, r2
 8000b8a:	eba1 010e 	sub.w	r1, r1, lr
 8000b8e:	42a1      	cmp	r1, r4
 8000b90:	46c8      	mov	r8, r9
 8000b92:	46a6      	mov	lr, r4
 8000b94:	d356      	bcc.n	8000c44 <__udivmoddi4+0x2a4>
 8000b96:	d053      	beq.n	8000c40 <__udivmoddi4+0x2a0>
 8000b98:	b15d      	cbz	r5, 8000bb2 <__udivmoddi4+0x212>
 8000b9a:	ebb3 0208 	subs.w	r2, r3, r8
 8000b9e:	eb61 010e 	sbc.w	r1, r1, lr
 8000ba2:	fa01 f707 	lsl.w	r7, r1, r7
 8000ba6:	fa22 f306 	lsr.w	r3, r2, r6
 8000baa:	40f1      	lsrs	r1, r6
 8000bac:	431f      	orrs	r7, r3
 8000bae:	e9c5 7100 	strd	r7, r1, [r5]
 8000bb2:	2600      	movs	r6, #0
 8000bb4:	4631      	mov	r1, r6
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	f1c2 0320 	rsb	r3, r2, #32
 8000bbe:	40d8      	lsrs	r0, r3
 8000bc0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bc4:	fa21 f303 	lsr.w	r3, r1, r3
 8000bc8:	4091      	lsls	r1, r2
 8000bca:	4301      	orrs	r1, r0
 8000bcc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bd0:	fa1f fe8c 	uxth.w	lr, ip
 8000bd4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000bd8:	fb07 3610 	mls	r6, r7, r0, r3
 8000bdc:	0c0b      	lsrs	r3, r1, #16
 8000bde:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000be2:	fb00 f60e 	mul.w	r6, r0, lr
 8000be6:	429e      	cmp	r6, r3
 8000be8:	fa04 f402 	lsl.w	r4, r4, r2
 8000bec:	d908      	bls.n	8000c00 <__udivmoddi4+0x260>
 8000bee:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000bf6:	d22f      	bcs.n	8000c58 <__udivmoddi4+0x2b8>
 8000bf8:	429e      	cmp	r6, r3
 8000bfa:	d92d      	bls.n	8000c58 <__udivmoddi4+0x2b8>
 8000bfc:	3802      	subs	r0, #2
 8000bfe:	4463      	add	r3, ip
 8000c00:	1b9b      	subs	r3, r3, r6
 8000c02:	b289      	uxth	r1, r1
 8000c04:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c08:	fb07 3316 	mls	r3, r7, r6, r3
 8000c0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c10:	fb06 f30e 	mul.w	r3, r6, lr
 8000c14:	428b      	cmp	r3, r1
 8000c16:	d908      	bls.n	8000c2a <__udivmoddi4+0x28a>
 8000c18:	eb1c 0101 	adds.w	r1, ip, r1
 8000c1c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c20:	d216      	bcs.n	8000c50 <__udivmoddi4+0x2b0>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d914      	bls.n	8000c50 <__udivmoddi4+0x2b0>
 8000c26:	3e02      	subs	r6, #2
 8000c28:	4461      	add	r1, ip
 8000c2a:	1ac9      	subs	r1, r1, r3
 8000c2c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c30:	e738      	b.n	8000aa4 <__udivmoddi4+0x104>
 8000c32:	462e      	mov	r6, r5
 8000c34:	4628      	mov	r0, r5
 8000c36:	e705      	b.n	8000a44 <__udivmoddi4+0xa4>
 8000c38:	4606      	mov	r6, r0
 8000c3a:	e6e3      	b.n	8000a04 <__udivmoddi4+0x64>
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	e6f8      	b.n	8000a32 <__udivmoddi4+0x92>
 8000c40:	454b      	cmp	r3, r9
 8000c42:	d2a9      	bcs.n	8000b98 <__udivmoddi4+0x1f8>
 8000c44:	ebb9 0802 	subs.w	r8, r9, r2
 8000c48:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c4c:	3801      	subs	r0, #1
 8000c4e:	e7a3      	b.n	8000b98 <__udivmoddi4+0x1f8>
 8000c50:	4646      	mov	r6, r8
 8000c52:	e7ea      	b.n	8000c2a <__udivmoddi4+0x28a>
 8000c54:	4620      	mov	r0, r4
 8000c56:	e794      	b.n	8000b82 <__udivmoddi4+0x1e2>
 8000c58:	4640      	mov	r0, r8
 8000c5a:	e7d1      	b.n	8000c00 <__udivmoddi4+0x260>
 8000c5c:	46d0      	mov	r8, sl
 8000c5e:	e77b      	b.n	8000b58 <__udivmoddi4+0x1b8>
 8000c60:	3b02      	subs	r3, #2
 8000c62:	4461      	add	r1, ip
 8000c64:	e732      	b.n	8000acc <__udivmoddi4+0x12c>
 8000c66:	4630      	mov	r0, r6
 8000c68:	e709      	b.n	8000a7e <__udivmoddi4+0xde>
 8000c6a:	4464      	add	r4, ip
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	e742      	b.n	8000af6 <__udivmoddi4+0x156>

08000c70 <__aeabi_idiv0>:
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop

08000c74 <l298n_init>:
 *      Author: ahuja
 */

#include "L298N.h"

HAL_StatusTypeDef l298n_init(TIM_HandleTypeDef *timer) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef ret = HAL_TIM_PWM_Start(timer, LEFT_MOTOR_CHANNEL);
 8000c7c:	2104      	movs	r1, #4
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f002 fee6 	bl	8003a50 <HAL_TIM_PWM_Start>
 8000c84:	4603      	mov	r3, r0
 8000c86:	73fb      	strb	r3, [r7, #15]

	ret = HAL_TIM_PWM_Start(timer, RIGHT_MOTOR_CHANNEL);
 8000c88:	2108      	movs	r1, #8
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f002 fee0 	bl	8003a50 <HAL_TIM_PWM_Start>
 8000c90:	4603      	mov	r3, r0
 8000c92:	73fb      	strb	r3, [r7, #15]

	return ret;
 8000c94:	7bfb      	ldrb	r3, [r7, #15]

}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <tcs34725_get_data>:

// Include files

#include "tcs34725.h"

HAL_StatusTypeDef tcs34725_get_data(TCS34725_HandleTypeDef *dev, I2C_HandleTypeDef *hi2c_device) {
 8000c9e:	b5b0      	push	{r4, r5, r7, lr}
 8000ca0:	b08a      	sub	sp, #40	; 0x28
 8000ca2:	af02      	add	r7, sp, #8
 8000ca4:	6078      	str	r0, [r7, #4]
 8000ca6:	6039      	str	r1, [r7, #0]

    // TODO: Check status to see if data is valid and RGBC cycle has completed

	uint8_t val[8] = {0};
 8000ca8:	2300      	movs	r3, #0
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
	uint8_t command = TCS34725_ITER_COMM | TCS34725_RGBC_REG;
 8000cb0:	23b4      	movs	r3, #180	; 0xb4
 8000cb2:	73fb      	strb	r3, [r7, #15]

	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c_device, TCS34725_DEV_ADDR << 1, (uint8_t*)&command, 1, 1000);
 8000cb4:	f107 020f 	add.w	r2, r7, #15
 8000cb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cbc:	9300      	str	r3, [sp, #0]
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	2152      	movs	r1, #82	; 0x52
 8000cc2:	6838      	ldr	r0, [r7, #0]
 8000cc4:	f001 fb3c 	bl	8002340 <HAL_I2C_Master_Transmit>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	77fb      	strb	r3, [r7, #31]

	ret = HAL_I2C_Master_Receive(hi2c_device, TCS34725_DEV_ADDR << 1, (uint8_t*)&val, 8, 1000);
 8000ccc:	f107 0210 	add.w	r2, r7, #16
 8000cd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd4:	9300      	str	r3, [sp, #0]
 8000cd6:	2308      	movs	r3, #8
 8000cd8:	2152      	movs	r1, #82	; 0x52
 8000cda:	6838      	ldr	r0, [r7, #0]
 8000cdc:	f001 fc2e 	bl	800253c <HAL_I2C_Master_Receive>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	77fb      	strb	r3, [r7, #31]

	dev->clear = TO_16_BIT(val[1], val[0]);
 8000ce4:	7c7b      	ldrb	r3, [r7, #17]
 8000ce6:	021b      	lsls	r3, r3, #8
 8000ce8:	b21a      	sxth	r2, r3
 8000cea:	7c3b      	ldrb	r3, [r7, #16]
 8000cec:	b21b      	sxth	r3, r3
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	b21b      	sxth	r3, r3
 8000cf2:	b29a      	uxth	r2, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	809a      	strh	r2, [r3, #4]
	dev->red = TO_16_BIT(val[3], val[2]);
 8000cf8:	7cfb      	ldrb	r3, [r7, #19]
 8000cfa:	021b      	lsls	r3, r3, #8
 8000cfc:	b21a      	sxth	r2, r3
 8000cfe:	7cbb      	ldrb	r3, [r7, #18]
 8000d00:	b21b      	sxth	r3, r3
 8000d02:	4313      	orrs	r3, r2
 8000d04:	b21b      	sxth	r3, r3
 8000d06:	b29a      	uxth	r2, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	80da      	strh	r2, [r3, #6]
	dev->green = TO_16_BIT(val[5], val[4]);
 8000d0c:	7d7b      	ldrb	r3, [r7, #21]
 8000d0e:	021b      	lsls	r3, r3, #8
 8000d10:	b21a      	sxth	r2, r3
 8000d12:	7d3b      	ldrb	r3, [r7, #20]
 8000d14:	b21b      	sxth	r3, r3
 8000d16:	4313      	orrs	r3, r2
 8000d18:	b21b      	sxth	r3, r3
 8000d1a:	b29a      	uxth	r2, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	811a      	strh	r2, [r3, #8]
	dev->blue = TO_16_BIT(val[7], val[6]);
 8000d20:	7dfb      	ldrb	r3, [r7, #23]
 8000d22:	021b      	lsls	r3, r3, #8
 8000d24:	b21a      	sxth	r2, r3
 8000d26:	7dbb      	ldrb	r3, [r7, #22]
 8000d28:	b21b      	sxth	r3, r3
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	b21b      	sxth	r3, r3
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	815a      	strh	r2, [r3, #10]

	uint32_t sum = dev->red + dev->green + dev->blue;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	88db      	ldrh	r3, [r3, #6]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	891b      	ldrh	r3, [r3, #8]
 8000d3e:	4413      	add	r3, r2
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	8952      	ldrh	r2, [r2, #10]
 8000d44:	4413      	add	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]

	dev->r_ratio = (double)dev->red / sum;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	88db      	ldrh	r3, [r3, #6]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fb83 	bl	8000458 <__aeabi_ui2d>
 8000d52:	4604      	mov	r4, r0
 8000d54:	460d      	mov	r5, r1
 8000d56:	69b8      	ldr	r0, [r7, #24]
 8000d58:	f7ff fb7e 	bl	8000458 <__aeabi_ui2d>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	460b      	mov	r3, r1
 8000d60:	4620      	mov	r0, r4
 8000d62:	4629      	mov	r1, r5
 8000d64:	f7ff fd1c 	bl	80007a0 <__aeabi_ddiv>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	6879      	ldr	r1, [r7, #4]
 8000d6e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dev->g_ratio = (double)dev->green / sum;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	891b      	ldrh	r3, [r3, #8]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fb6e 	bl	8000458 <__aeabi_ui2d>
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	460d      	mov	r5, r1
 8000d80:	69b8      	ldr	r0, [r7, #24]
 8000d82:	f7ff fb69 	bl	8000458 <__aeabi_ui2d>
 8000d86:	4602      	mov	r2, r0
 8000d88:	460b      	mov	r3, r1
 8000d8a:	4620      	mov	r0, r4
 8000d8c:	4629      	mov	r1, r5
 8000d8e:	f7ff fd07 	bl	80007a0 <__aeabi_ddiv>
 8000d92:	4602      	mov	r2, r0
 8000d94:	460b      	mov	r3, r1
 8000d96:	6879      	ldr	r1, [r7, #4]
 8000d98:	e9c1 2306 	strd	r2, r3, [r1, #24]
	dev->b_ratio = (double)dev->blue / sum;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	895b      	ldrh	r3, [r3, #10]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fb59 	bl	8000458 <__aeabi_ui2d>
 8000da6:	4604      	mov	r4, r0
 8000da8:	460d      	mov	r5, r1
 8000daa:	69b8      	ldr	r0, [r7, #24]
 8000dac:	f7ff fb54 	bl	8000458 <__aeabi_ui2d>
 8000db0:	4602      	mov	r2, r0
 8000db2:	460b      	mov	r3, r1
 8000db4:	4620      	mov	r0, r4
 8000db6:	4629      	mov	r1, r5
 8000db8:	f7ff fcf2 	bl	80007a0 <__aeabi_ddiv>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	6879      	ldr	r1, [r7, #4]
 8000dc2:	e9c1 2308 	strd	r2, r3, [r1, #32]

    return ret;
 8000dc6:	7ffb      	ldrb	r3, [r7, #31]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3720      	adds	r7, #32
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bdb0      	pop	{r4, r5, r7, pc}

08000dd0 <tcs34725_get_device_id>:

HAL_StatusTypeDef tcs34725_get_device_id(TCS34725_HandleTypeDef *dev, I2C_HandleTypeDef *hi2c_device) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af02      	add	r7, sp, #8
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]

	uint8_t val = 0x00;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	73bb      	strb	r3, [r7, #14]
	uint8_t command = TCS34725_COMM_BIT | TCS34725_DEVICE_ID_REG;
 8000dde:	2392      	movs	r3, #146	; 0x92
 8000de0:	737b      	strb	r3, [r7, #13]

	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c_device, TCS34725_DEV_ADDR << 1, (uint8_t*)&command, 1, 1000);
 8000de2:	f107 020d 	add.w	r2, r7, #13
 8000de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	2301      	movs	r3, #1
 8000dee:	2152      	movs	r1, #82	; 0x52
 8000df0:	6838      	ldr	r0, [r7, #0]
 8000df2:	f001 faa5 	bl	8002340 <HAL_I2C_Master_Transmit>
 8000df6:	4603      	mov	r3, r0
 8000df8:	73fb      	strb	r3, [r7, #15]

	ret = HAL_I2C_Master_Receive(hi2c_device, TCS34725_DEV_ADDR << 1, (uint8_t*)&val, 1, 1000);
 8000dfa:	f107 020e 	add.w	r2, r7, #14
 8000dfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	2301      	movs	r3, #1
 8000e06:	2152      	movs	r1, #82	; 0x52
 8000e08:	6838      	ldr	r0, [r7, #0]
 8000e0a:	f001 fb97 	bl	800253c <HAL_I2C_Master_Receive>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	73fb      	strb	r3, [r7, #15]


	dev->device_id = val;
 8000e12:	7bba      	ldrb	r2, [r7, #14]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	731a      	strb	r2, [r3, #12]

	return ret;
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <tcs34725_set_enable_reg>:

HAL_StatusTypeDef tcs34725_set_enable_reg(TCS34725_HandleTypeDef *dev, I2C_HandleTypeDef *hi2c_device) {
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b086      	sub	sp, #24
 8000e26:	af02      	add	r7, sp, #8
 8000e28:	6078      	str	r0, [r7, #4]
 8000e2a:	6039      	str	r1, [r7, #0]

	uint8_t val = 0x00;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	73bb      	strb	r3, [r7, #14]
	uint8_t command[2] = {TCS34725_COMM_BIT | TCS34725_ENABLE_REG, 0x01};
 8000e30:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e34:	81bb      	strh	r3, [r7, #12]


	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c_device, TCS34725_DEV_ADDR << 1, (uint8_t*)&command, 2, 1000);
 8000e36:	f107 020c 	add.w	r2, r7, #12
 8000e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3e:	9300      	str	r3, [sp, #0]
 8000e40:	2302      	movs	r3, #2
 8000e42:	2152      	movs	r1, #82	; 0x52
 8000e44:	6838      	ldr	r0, [r7, #0]
 8000e46:	f001 fa7b 	bl	8002340 <HAL_I2C_Master_Transmit>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	73fb      	strb	r3, [r7, #15]

	command[1] = 0x03;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	737b      	strb	r3, [r7, #13]

	ret = HAL_I2C_Master_Transmit(hi2c_device, TCS34725_DEV_ADDR << 1, (uint8_t*)&command, 2, 1000);
 8000e52:	f107 020c 	add.w	r2, r7, #12
 8000e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	2152      	movs	r1, #82	; 0x52
 8000e60:	6838      	ldr	r0, [r7, #0]
 8000e62:	f001 fa6d 	bl	8002340 <HAL_I2C_Master_Transmit>
 8000e66:	4603      	mov	r3, r0
 8000e68:	73fb      	strb	r3, [r7, #15]

	ret = HAL_I2C_Master_Receive(hi2c_device, TCS34725_DEV_ADDR << 1, (uint8_t*)&val, 1, 1000);
 8000e6a:	f107 020e 	add.w	r2, r7, #14
 8000e6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e72:	9300      	str	r3, [sp, #0]
 8000e74:	2301      	movs	r3, #1
 8000e76:	2152      	movs	r1, #82	; 0x52
 8000e78:	6838      	ldr	r0, [r7, #0]
 8000e7a:	f001 fb5f 	bl	800253c <HAL_I2C_Master_Receive>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	73fb      	strb	r3, [r7, #15]

	dev->enable_reg = val;
 8000e82:	7bba      	ldrb	r2, [r7, #14]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	735a      	strb	r2, [r3, #13]

	return ret;
 8000e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e98:	f000 fdf4 	bl	8001a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e9c:	f000 f83a 	bl	8000f14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea0:	f000 faac 	bl	80013fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ea4:	f000 fa80 	bl	80013a8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000ea8:	f000 f8fc 	bl	80010a4 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000eac:	f000 f89e 	bl	8000fec <MX_I2C1_Init>
  MX_I2C3_Init();
 8000eb0:	f000 f8ca 	bl	8001048 <MX_I2C3_Init>
  MX_TIM2_Init();
 8000eb4:	f000 f96c 	bl	8001190 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000eb8:	f000 f9ce 	bl	8001258 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ebc:	f000 fa26 	bl	800130c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  tcs34725_get_device_id(&rgb_sensor_left, &hi2c1);
 8000ec0:	490f      	ldr	r1, [pc, #60]	; (8000f00 <main+0x6c>)
 8000ec2:	4810      	ldr	r0, [pc, #64]	; (8000f04 <main+0x70>)
 8000ec4:	f7ff ff84 	bl	8000dd0 <tcs34725_get_device_id>
  tcs34725_get_device_id(&rgb_sensor_right, &hi2c3);
 8000ec8:	490f      	ldr	r1, [pc, #60]	; (8000f08 <main+0x74>)
 8000eca:	4810      	ldr	r0, [pc, #64]	; (8000f0c <main+0x78>)
 8000ecc:	f7ff ff80 	bl	8000dd0 <tcs34725_get_device_id>

  tcs34725_set_enable_reg(&rgb_sensor_left, &hi2c1);
 8000ed0:	490b      	ldr	r1, [pc, #44]	; (8000f00 <main+0x6c>)
 8000ed2:	480c      	ldr	r0, [pc, #48]	; (8000f04 <main+0x70>)
 8000ed4:	f7ff ffa5 	bl	8000e22 <tcs34725_set_enable_reg>
  tcs34725_set_enable_reg(&rgb_sensor_right, &hi2c3);
 8000ed8:	490b      	ldr	r1, [pc, #44]	; (8000f08 <main+0x74>)
 8000eda:	480c      	ldr	r0, [pc, #48]	; (8000f0c <main+0x78>)
 8000edc:	f7ff ffa1 	bl	8000e22 <tcs34725_set_enable_reg>

  l298n_init(&htim2);
 8000ee0:	480b      	ldr	r0, [pc, #44]	; (8000f10 <main+0x7c>)
 8000ee2:	f7ff fec7 	bl	8000c74 <l298n_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  tcs34725_get_data(&rgb_sensor_left, &hi2c1);
 8000ee6:	4906      	ldr	r1, [pc, #24]	; (8000f00 <main+0x6c>)
 8000ee8:	4806      	ldr	r0, [pc, #24]	; (8000f04 <main+0x70>)
 8000eea:	f7ff fed8 	bl	8000c9e <tcs34725_get_data>
	  tcs34725_get_data(&rgb_sensor_right, &hi2c3);
 8000eee:	4906      	ldr	r1, [pc, #24]	; (8000f08 <main+0x74>)
 8000ef0:	4806      	ldr	r0, [pc, #24]	; (8000f0c <main+0x78>)
 8000ef2:	f7ff fed4 	bl	8000c9e <tcs34725_get_data>
	  HAL_Delay(100);
 8000ef6:	2064      	movs	r0, #100	; 0x64
 8000ef8:	f000 fe36 	bl	8001b68 <HAL_Delay>
	  tcs34725_get_data(&rgb_sensor_left, &hi2c1);
 8000efc:	e7f3      	b.n	8000ee6 <main+0x52>
 8000efe:	bf00      	nop
 8000f00:	2000002c 	.word	0x2000002c
 8000f04:	20000238 	.word	0x20000238
 8000f08:	20000080 	.word	0x20000080
 8000f0c:	20000260 	.word	0x20000260
 8000f10:	2000011c 	.word	0x2000011c

08000f14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b094      	sub	sp, #80	; 0x50
 8000f18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1a:	f107 0320 	add.w	r3, r7, #32
 8000f1e:	2230      	movs	r2, #48	; 0x30
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f004 f8d6 	bl	80050d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f28:	f107 030c 	add.w	r3, r7, #12
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	4b29      	ldr	r3, [pc, #164]	; (8000fe4 <SystemClock_Config+0xd0>)
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f40:	4a28      	ldr	r2, [pc, #160]	; (8000fe4 <SystemClock_Config+0xd0>)
 8000f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f46:	6413      	str	r3, [r2, #64]	; 0x40
 8000f48:	4b26      	ldr	r3, [pc, #152]	; (8000fe4 <SystemClock_Config+0xd0>)
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f54:	2300      	movs	r3, #0
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	4b23      	ldr	r3, [pc, #140]	; (8000fe8 <SystemClock_Config+0xd4>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f60:	4a21      	ldr	r2, [pc, #132]	; (8000fe8 <SystemClock_Config+0xd4>)
 8000f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f66:	6013      	str	r3, [r2, #0]
 8000f68:	4b1f      	ldr	r3, [pc, #124]	; (8000fe8 <SystemClock_Config+0xd4>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f74:	2302      	movs	r3, #2
 8000f76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f7c:	2310      	movs	r3, #16
 8000f7e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f80:	2302      	movs	r3, #2
 8000f82:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f84:	2300      	movs	r3, #0
 8000f86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f88:	2310      	movs	r3, #16
 8000f8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f8c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f90:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f92:	2304      	movs	r3, #4
 8000f94:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f96:	2307      	movs	r3, #7
 8000f98:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f9a:	f107 0320 	add.w	r3, r7, #32
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f002 f820 	bl	8002fe4 <HAL_RCC_OscConfig>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000faa:	f000 fadb 	bl	8001564 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fae:	230f      	movs	r3, #15
 8000fb0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fbe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	2102      	movs	r1, #2
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f002 fa82 	bl	80034d4 <HAL_RCC_ClockConfig>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000fd6:	f000 fac5 	bl	8001564 <Error_Handler>
  }
}
 8000fda:	bf00      	nop
 8000fdc:	3750      	adds	r7, #80	; 0x50
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40007000 	.word	0x40007000

08000fec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <MX_I2C1_Init+0x50>)
 8000ff2:	4a13      	ldr	r2, [pc, #76]	; (8001040 <MX_I2C1_Init+0x54>)
 8000ff4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ff6:	4b11      	ldr	r3, [pc, #68]	; (800103c <MX_I2C1_Init+0x50>)
 8000ff8:	4a12      	ldr	r2, [pc, #72]	; (8001044 <MX_I2C1_Init+0x58>)
 8000ffa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	; (800103c <MX_I2C1_Init+0x50>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <MX_I2C1_Init+0x50>)
 8001004:	2200      	movs	r2, #0
 8001006:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <MX_I2C1_Init+0x50>)
 800100a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800100e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001010:	4b0a      	ldr	r3, [pc, #40]	; (800103c <MX_I2C1_Init+0x50>)
 8001012:	2200      	movs	r2, #0
 8001014:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <MX_I2C1_Init+0x50>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800101c:	4b07      	ldr	r3, [pc, #28]	; (800103c <MX_I2C1_Init+0x50>)
 800101e:	2200      	movs	r2, #0
 8001020:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001022:	4b06      	ldr	r3, [pc, #24]	; (800103c <MX_I2C1_Init+0x50>)
 8001024:	2200      	movs	r2, #0
 8001026:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001028:	4804      	ldr	r0, [pc, #16]	; (800103c <MX_I2C1_Init+0x50>)
 800102a:	f001 f845 	bl	80020b8 <HAL_I2C_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001034:	f000 fa96 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}
 800103c:	2000002c 	.word	0x2000002c
 8001040:	40005400 	.word	0x40005400
 8001044:	000186a0 	.word	0x000186a0

08001048 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800104c:	4b12      	ldr	r3, [pc, #72]	; (8001098 <MX_I2C3_Init+0x50>)
 800104e:	4a13      	ldr	r2, [pc, #76]	; (800109c <MX_I2C3_Init+0x54>)
 8001050:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001052:	4b11      	ldr	r3, [pc, #68]	; (8001098 <MX_I2C3_Init+0x50>)
 8001054:	4a12      	ldr	r2, [pc, #72]	; (80010a0 <MX_I2C3_Init+0x58>)
 8001056:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001058:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <MX_I2C3_Init+0x50>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800105e:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <MX_I2C3_Init+0x50>)
 8001060:	2200      	movs	r2, #0
 8001062:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <MX_I2C3_Init+0x50>)
 8001066:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800106a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800106c:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <MX_I2C3_Init+0x50>)
 800106e:	2200      	movs	r2, #0
 8001070:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001072:	4b09      	ldr	r3, [pc, #36]	; (8001098 <MX_I2C3_Init+0x50>)
 8001074:	2200      	movs	r2, #0
 8001076:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001078:	4b07      	ldr	r3, [pc, #28]	; (8001098 <MX_I2C3_Init+0x50>)
 800107a:	2200      	movs	r2, #0
 800107c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <MX_I2C3_Init+0x50>)
 8001080:	2200      	movs	r2, #0
 8001082:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001084:	4804      	ldr	r0, [pc, #16]	; (8001098 <MX_I2C3_Init+0x50>)
 8001086:	f001 f817 	bl	80020b8 <HAL_I2C_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001090:	f000 fa68 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000080 	.word	0x20000080
 800109c:	40005c00 	.word	0x40005c00
 80010a0:	000186a0 	.word	0x000186a0

080010a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08c      	sub	sp, #48	; 0x30
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80010aa:	f107 031c 	add.w	r3, r7, #28
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	60da      	str	r2, [r3, #12]
 80010b8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010d0:	4b2d      	ldr	r3, [pc, #180]	; (8001188 <MX_TIM1_Init+0xe4>)
 80010d2:	4a2e      	ldr	r2, [pc, #184]	; (800118c <MX_TIM1_Init+0xe8>)
 80010d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80010d6:	4b2c      	ldr	r3, [pc, #176]	; (8001188 <MX_TIM1_Init+0xe4>)
 80010d8:	2200      	movs	r2, #0
 80010da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010dc:	4b2a      	ldr	r3, [pc, #168]	; (8001188 <MX_TIM1_Init+0xe4>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80010e2:	4b29      	ldr	r3, [pc, #164]	; (8001188 <MX_TIM1_Init+0xe4>)
 80010e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ea:	4b27      	ldr	r3, [pc, #156]	; (8001188 <MX_TIM1_Init+0xe4>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010f0:	4b25      	ldr	r3, [pc, #148]	; (8001188 <MX_TIM1_Init+0xe4>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f6:	4b24      	ldr	r3, [pc, #144]	; (8001188 <MX_TIM1_Init+0xe4>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010fc:	4822      	ldr	r0, [pc, #136]	; (8001188 <MX_TIM1_Init+0xe4>)
 80010fe:	f002 fc09 	bl	8003914 <HAL_TIM_Base_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8001108:	f000 fa2c 	bl	8001564 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800110c:	481e      	ldr	r0, [pc, #120]	; (8001188 <MX_TIM1_Init+0xe4>)
 800110e:	f002 fd4f 	bl	8003bb0 <HAL_TIM_IC_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001118:	f000 fa24 	bl	8001564 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 800111c:	2307      	movs	r3, #7
 800111e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8001120:	2310      	movs	r3, #16
 8001122:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001124:	f107 031c 	add.w	r3, r7, #28
 8001128:	4619      	mov	r1, r3
 800112a:	4817      	ldr	r0, [pc, #92]	; (8001188 <MX_TIM1_Init+0xe4>)
 800112c:	f002 ffbf 	bl	80040ae <HAL_TIM_SlaveConfigSynchro>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001136:	f000 fa15 	bl	8001564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	4619      	mov	r1, r3
 8001148:	480f      	ldr	r0, [pc, #60]	; (8001188 <MX_TIM1_Init+0xe4>)
 800114a:	f003 fc6f 	bl	8004a2c <HAL_TIMEx_MasterConfigSynchronization>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8001154:	f000 fa06 	bl	8001564 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001158:	2300      	movs	r3, #0
 800115a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800115c:	2301      	movs	r3, #1
 800115e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	2208      	movs	r2, #8
 800116c:	4619      	mov	r1, r3
 800116e:	4806      	ldr	r0, [pc, #24]	; (8001188 <MX_TIM1_Init+0xe4>)
 8001170:	f002 fd77 	bl	8003c62 <HAL_TIM_IC_ConfigChannel>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 800117a:	f000 f9f3 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800117e:	bf00      	nop
 8001180:	3730      	adds	r7, #48	; 0x30
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	200000d4 	.word	0x200000d4
 800118c:	40010000 	.word	0x40010000

08001190 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	; 0x28
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001196:	f107 0320 	add.w	r3, r7, #32
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
 80011ac:	611a      	str	r2, [r3, #16]
 80011ae:	615a      	str	r2, [r3, #20]
 80011b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011b2:	4b28      	ldr	r3, [pc, #160]	; (8001254 <MX_TIM2_Init+0xc4>)
 80011b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 127;
 80011ba:	4b26      	ldr	r3, [pc, #152]	; (8001254 <MX_TIM2_Init+0xc4>)
 80011bc:	227f      	movs	r2, #127	; 0x7f
 80011be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c0:	4b24      	ldr	r3, [pc, #144]	; (8001254 <MX_TIM2_Init+0xc4>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 625;
 80011c6:	4b23      	ldr	r3, [pc, #140]	; (8001254 <MX_TIM2_Init+0xc4>)
 80011c8:	f240 2271 	movw	r2, #625	; 0x271
 80011cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ce:	4b21      	ldr	r3, [pc, #132]	; (8001254 <MX_TIM2_Init+0xc4>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d4:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <MX_TIM2_Init+0xc4>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011da:	481e      	ldr	r0, [pc, #120]	; (8001254 <MX_TIM2_Init+0xc4>)
 80011dc:	f002 fbe9 	bl	80039b2 <HAL_TIM_PWM_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80011e6:	f000 f9bd 	bl	8001564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ea:	2300      	movs	r3, #0
 80011ec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ee:	2300      	movs	r3, #0
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011f2:	f107 0320 	add.w	r3, r7, #32
 80011f6:	4619      	mov	r1, r3
 80011f8:	4816      	ldr	r0, [pc, #88]	; (8001254 <MX_TIM2_Init+0xc4>)
 80011fa:	f003 fc17 	bl	8004a2c <HAL_TIMEx_MasterConfigSynchronization>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001204:	f000 f9ae 	bl	8001564 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001208:	2360      	movs	r3, #96	; 0x60
 800120a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001218:	1d3b      	adds	r3, r7, #4
 800121a:	2204      	movs	r2, #4
 800121c:	4619      	mov	r1, r3
 800121e:	480d      	ldr	r0, [pc, #52]	; (8001254 <MX_TIM2_Init+0xc4>)
 8001220:	f002 fdbc 	bl	8003d9c <HAL_TIM_PWM_ConfigChannel>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800122a:	f000 f99b 	bl	8001564 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	2208      	movs	r2, #8
 8001232:	4619      	mov	r1, r3
 8001234:	4807      	ldr	r0, [pc, #28]	; (8001254 <MX_TIM2_Init+0xc4>)
 8001236:	f002 fdb1 	bl	8003d9c <HAL_TIM_PWM_ConfigChannel>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001240:	f000 f990 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001244:	4803      	ldr	r0, [pc, #12]	; (8001254 <MX_TIM2_Init+0xc4>)
 8001246:	f000 faef 	bl	8001828 <HAL_TIM_MspPostInit>

}
 800124a:	bf00      	nop
 800124c:	3728      	adds	r7, #40	; 0x28
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	2000011c 	.word	0x2000011c

08001258 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	; 0x28
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800125e:	f107 0320 	add.w	r3, r7, #32
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
 8001274:	611a      	str	r2, [r3, #16]
 8001276:	615a      	str	r2, [r3, #20]
 8001278:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800127a:	4b22      	ldr	r3, [pc, #136]	; (8001304 <MX_TIM3_Init+0xac>)
 800127c:	4a22      	ldr	r2, [pc, #136]	; (8001308 <MX_TIM3_Init+0xb0>)
 800127e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8001280:	4b20      	ldr	r3, [pc, #128]	; (8001304 <MX_TIM3_Init+0xac>)
 8001282:	2253      	movs	r2, #83	; 0x53
 8001284:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001286:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <MX_TIM3_Init+0xac>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 800128c:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <MX_TIM3_Init+0xac>)
 800128e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001292:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001294:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <MX_TIM3_Init+0xac>)
 8001296:	2200      	movs	r2, #0
 8001298:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129a:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <MX_TIM3_Init+0xac>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012a0:	4818      	ldr	r0, [pc, #96]	; (8001304 <MX_TIM3_Init+0xac>)
 80012a2:	f002 fb86 	bl	80039b2 <HAL_TIM_PWM_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80012ac:	f000 f95a 	bl	8001564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b0:	2300      	movs	r3, #0
 80012b2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012b8:	f107 0320 	add.w	r3, r7, #32
 80012bc:	4619      	mov	r1, r3
 80012be:	4811      	ldr	r0, [pc, #68]	; (8001304 <MX_TIM3_Init+0xac>)
 80012c0:	f003 fbb4 	bl	8004a2c <HAL_TIMEx_MasterConfigSynchronization>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80012ca:	f000 f94b 	bl	8001564 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012ce:	2360      	movs	r3, #96	; 0x60
 80012d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	2204      	movs	r2, #4
 80012e2:	4619      	mov	r1, r3
 80012e4:	4807      	ldr	r0, [pc, #28]	; (8001304 <MX_TIM3_Init+0xac>)
 80012e6:	f002 fd59 	bl	8003d9c <HAL_TIM_PWM_ConfigChannel>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80012f0:	f000 f938 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012f4:	4803      	ldr	r0, [pc, #12]	; (8001304 <MX_TIM3_Init+0xac>)
 80012f6:	f000 fa97 	bl	8001828 <HAL_TIM_MspPostInit>

}
 80012fa:	bf00      	nop
 80012fc:	3728      	adds	r7, #40	; 0x28
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000164 	.word	0x20000164
 8001308:	40000400 	.word	0x40000400

0800130c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001312:	f107 0308 	add.w	r3, r7, #8
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001320:	463b      	mov	r3, r7
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001328:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <MX_TIM4_Init+0x94>)
 800132a:	4a1e      	ldr	r2, [pc, #120]	; (80013a4 <MX_TIM4_Init+0x98>)
 800132c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 800132e:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <MX_TIM4_Init+0x94>)
 8001330:	2247      	movs	r2, #71	; 0x47
 8001332:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001334:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <MX_TIM4_Init+0x94>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800133a:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <MX_TIM4_Init+0x94>)
 800133c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001340:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001342:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <MX_TIM4_Init+0x94>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001348:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <MX_TIM4_Init+0x94>)
 800134a:	2200      	movs	r2, #0
 800134c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800134e:	4814      	ldr	r0, [pc, #80]	; (80013a0 <MX_TIM4_Init+0x94>)
 8001350:	f002 fae0 	bl	8003914 <HAL_TIM_Base_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800135a:	f000 f903 	bl	8001564 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800135e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001362:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001364:	f107 0308 	add.w	r3, r7, #8
 8001368:	4619      	mov	r1, r3
 800136a:	480d      	ldr	r0, [pc, #52]	; (80013a0 <MX_TIM4_Init+0x94>)
 800136c:	f002 fdd8 	bl	8003f20 <HAL_TIM_ConfigClockSource>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001376:	f000 f8f5 	bl	8001564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800137a:	2300      	movs	r3, #0
 800137c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001382:	463b      	mov	r3, r7
 8001384:	4619      	mov	r1, r3
 8001386:	4806      	ldr	r0, [pc, #24]	; (80013a0 <MX_TIM4_Init+0x94>)
 8001388:	f003 fb50 	bl	8004a2c <HAL_TIMEx_MasterConfigSynchronization>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001392:	f000 f8e7 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	200001ac 	.word	0x200001ac
 80013a4:	40000800 	.word	0x40000800

080013a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013ae:	4a12      	ldr	r2, [pc, #72]	; (80013f8 <MX_USART2_UART_Init+0x50>)
 80013b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013cc:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013ce:	220c      	movs	r2, #12
 80013d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d2:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013de:	4805      	ldr	r0, [pc, #20]	; (80013f4 <MX_USART2_UART_Init+0x4c>)
 80013e0:	f003 fb92 	bl	8004b08 <HAL_UART_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013ea:	f000 f8bb 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	200001f4 	.word	0x200001f4
 80013f8:	40004400 	.word	0x40004400

080013fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	; 0x28
 8001400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001402:	f107 0314 	add.w	r3, r7, #20
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
 8001410:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
 8001416:	4b4f      	ldr	r3, [pc, #316]	; (8001554 <MX_GPIO_Init+0x158>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	4a4e      	ldr	r2, [pc, #312]	; (8001554 <MX_GPIO_Init+0x158>)
 800141c:	f043 0304 	orr.w	r3, r3, #4
 8001420:	6313      	str	r3, [r2, #48]	; 0x30
 8001422:	4b4c      	ldr	r3, [pc, #304]	; (8001554 <MX_GPIO_Init+0x158>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	f003 0304 	and.w	r3, r3, #4
 800142a:	613b      	str	r3, [r7, #16]
 800142c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	4b48      	ldr	r3, [pc, #288]	; (8001554 <MX_GPIO_Init+0x158>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a47      	ldr	r2, [pc, #284]	; (8001554 <MX_GPIO_Init+0x158>)
 8001438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b45      	ldr	r3, [pc, #276]	; (8001554 <MX_GPIO_Init+0x158>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	4b41      	ldr	r3, [pc, #260]	; (8001554 <MX_GPIO_Init+0x158>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a40      	ldr	r2, [pc, #256]	; (8001554 <MX_GPIO_Init+0x158>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b3e      	ldr	r3, [pc, #248]	; (8001554 <MX_GPIO_Init+0x158>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	607b      	str	r3, [r7, #4]
 800146a:	4b3a      	ldr	r3, [pc, #232]	; (8001554 <MX_GPIO_Init+0x158>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a39      	ldr	r2, [pc, #228]	; (8001554 <MX_GPIO_Init+0x158>)
 8001470:	f043 0302 	orr.w	r3, r3, #2
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b37      	ldr	r3, [pc, #220]	; (8001554 <MX_GPIO_Init+0x158>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 8001482:	2200      	movs	r2, #0
 8001484:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 8001488:	4833      	ldr	r0, [pc, #204]	; (8001558 <MX_GPIO_Init+0x15c>)
 800148a:	f000 fdfb 	bl	8002084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 800148e:	2200      	movs	r2, #0
 8001490:	2120      	movs	r1, #32
 8001492:	4832      	ldr	r0, [pc, #200]	; (800155c <MX_GPIO_Init+0x160>)
 8001494:	f000 fdf6 	bl	8002084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|S0_Pin|S1_Pin
 8001498:	2200      	movs	r2, #0
 800149a:	f24f 0106 	movw	r1, #61446	; 0xf006
 800149e:	4830      	ldr	r0, [pc, #192]	; (8001560 <MX_GPIO_Init+0x164>)
 80014a0:	f000 fdf0 	bl	8002084 <HAL_GPIO_WritePin>
                          |S2_Pin|S3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014aa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	4619      	mov	r1, r3
 80014ba:	4828      	ldr	r0, [pc, #160]	; (800155c <MX_GPIO_Init+0x160>)
 80014bc:	f000 fc5e 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7|GPIO_PIN_9;
 80014c0:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 80014c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c6:	2301      	movs	r3, #1
 80014c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ce:	2300      	movs	r3, #0
 80014d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	4619      	mov	r1, r3
 80014d8:	481f      	ldr	r0, [pc, #124]	; (8001558 <MX_GPIO_Init+0x15c>)
 80014da:	f000 fc4f 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80014de:	2320      	movs	r3, #32
 80014e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e2:	2301      	movs	r3, #1
 80014e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ea:	2300      	movs	r3, #0
 80014ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	4619      	mov	r1, r3
 80014f4:	4819      	ldr	r0, [pc, #100]	; (800155c <MX_GPIO_Init+0x160>)
 80014f6:	f000 fc41 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 S0_Pin S1_Pin
                           S2_Pin S3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|S0_Pin|S1_Pin
 80014fa:	f24f 0306 	movw	r3, #61446	; 0xf006
 80014fe:	617b      	str	r3, [r7, #20]
                          |S2_Pin|S3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001500:	2301      	movs	r3, #1
 8001502:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001508:	2300      	movs	r3, #0
 800150a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	4619      	mov	r1, r3
 8001512:	4813      	ldr	r0, [pc, #76]	; (8001560 <MX_GPIO_Init+0x164>)
 8001514:	f000 fc32 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001518:	f44f 7380 	mov.w	r3, #256	; 0x100
 800151c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800151e:	2300      	movs	r3, #0
 8001520:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001526:	f107 0314 	add.w	r3, r7, #20
 800152a:	4619      	mov	r1, r3
 800152c:	480b      	ldr	r0, [pc, #44]	; (800155c <MX_GPIO_Init+0x160>)
 800152e:	f000 fc25 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001532:	2310      	movs	r3, #16
 8001534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001536:	2300      	movs	r3, #0
 8001538:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	4619      	mov	r1, r3
 8001544:	4806      	ldr	r0, [pc, #24]	; (8001560 <MX_GPIO_Init+0x164>)
 8001546:	f000 fc19 	bl	8001d7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800154a:	bf00      	nop
 800154c:	3728      	adds	r7, #40	; 0x28
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800
 8001558:	40020000 	.word	0x40020000
 800155c:	40020800 	.word	0x40020800
 8001560:	40020400 	.word	0x40020400

08001564 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001568:	b672      	cpsid	i
}
 800156a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800156c:	e7fe      	b.n	800156c <Error_Handler+0x8>
	...

08001570 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	607b      	str	r3, [r7, #4]
 800157a:	4b10      	ldr	r3, [pc, #64]	; (80015bc <HAL_MspInit+0x4c>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	4a0f      	ldr	r2, [pc, #60]	; (80015bc <HAL_MspInit+0x4c>)
 8001580:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001584:	6453      	str	r3, [r2, #68]	; 0x44
 8001586:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <HAL_MspInit+0x4c>)
 8001588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	603b      	str	r3, [r7, #0]
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <HAL_MspInit+0x4c>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	4a08      	ldr	r2, [pc, #32]	; (80015bc <HAL_MspInit+0x4c>)
 800159c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a0:	6413      	str	r3, [r2, #64]	; 0x40
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <HAL_MspInit+0x4c>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015aa:	603b      	str	r3, [r7, #0]
 80015ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015ae:	2007      	movs	r0, #7
 80015b0:	f000 fbb0 	bl	8001d14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40023800 	.word	0x40023800

080015c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08c      	sub	sp, #48	; 0x30
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 031c 	add.w	r3, r7, #28
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a42      	ldr	r2, [pc, #264]	; (80016e8 <HAL_I2C_MspInit+0x128>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d12c      	bne.n	800163c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	61bb      	str	r3, [r7, #24]
 80015e6:	4b41      	ldr	r3, [pc, #260]	; (80016ec <HAL_I2C_MspInit+0x12c>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a40      	ldr	r2, [pc, #256]	; (80016ec <HAL_I2C_MspInit+0x12c>)
 80015ec:	f043 0302 	orr.w	r3, r3, #2
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b3e      	ldr	r3, [pc, #248]	; (80016ec <HAL_I2C_MspInit+0x12c>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	61bb      	str	r3, [r7, #24]
 80015fc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015fe:	23c0      	movs	r3, #192	; 0xc0
 8001600:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001602:	2312      	movs	r3, #18
 8001604:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160a:	2303      	movs	r3, #3
 800160c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800160e:	2304      	movs	r3, #4
 8001610:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001612:	f107 031c 	add.w	r3, r7, #28
 8001616:	4619      	mov	r1, r3
 8001618:	4835      	ldr	r0, [pc, #212]	; (80016f0 <HAL_I2C_MspInit+0x130>)
 800161a:	f000 fbaf 	bl	8001d7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]
 8001622:	4b32      	ldr	r3, [pc, #200]	; (80016ec <HAL_I2C_MspInit+0x12c>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	4a31      	ldr	r2, [pc, #196]	; (80016ec <HAL_I2C_MspInit+0x12c>)
 8001628:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800162c:	6413      	str	r3, [r2, #64]	; 0x40
 800162e:	4b2f      	ldr	r3, [pc, #188]	; (80016ec <HAL_I2C_MspInit+0x12c>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800163a:	e050      	b.n	80016de <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a2c      	ldr	r2, [pc, #176]	; (80016f4 <HAL_I2C_MspInit+0x134>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d14b      	bne.n	80016de <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	4b28      	ldr	r3, [pc, #160]	; (80016ec <HAL_I2C_MspInit+0x12c>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4a27      	ldr	r2, [pc, #156]	; (80016ec <HAL_I2C_MspInit+0x12c>)
 8001650:	f043 0304 	orr.w	r3, r3, #4
 8001654:	6313      	str	r3, [r2, #48]	; 0x30
 8001656:	4b25      	ldr	r3, [pc, #148]	; (80016ec <HAL_I2C_MspInit+0x12c>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	f003 0304 	and.w	r3, r3, #4
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	4b21      	ldr	r3, [pc, #132]	; (80016ec <HAL_I2C_MspInit+0x12c>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a20      	ldr	r2, [pc, #128]	; (80016ec <HAL_I2C_MspInit+0x12c>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b1e      	ldr	r3, [pc, #120]	; (80016ec <HAL_I2C_MspInit+0x12c>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800167e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001684:	2312      	movs	r3, #18
 8001686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168c:	2303      	movs	r3, #3
 800168e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001690:	2304      	movs	r3, #4
 8001692:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001694:	f107 031c 	add.w	r3, r7, #28
 8001698:	4619      	mov	r1, r3
 800169a:	4817      	ldr	r0, [pc, #92]	; (80016f8 <HAL_I2C_MspInit+0x138>)
 800169c:	f000 fb6e 	bl	8001d7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016a6:	2312      	movs	r3, #18
 80016a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ae:	2303      	movs	r3, #3
 80016b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80016b2:	2304      	movs	r3, #4
 80016b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b6:	f107 031c 	add.w	r3, r7, #28
 80016ba:	4619      	mov	r1, r3
 80016bc:	480f      	ldr	r0, [pc, #60]	; (80016fc <HAL_I2C_MspInit+0x13c>)
 80016be:	f000 fb5d 	bl	8001d7c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <HAL_I2C_MspInit+0x12c>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	4a08      	ldr	r2, [pc, #32]	; (80016ec <HAL_I2C_MspInit+0x12c>)
 80016cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016d0:	6413      	str	r3, [r2, #64]	; 0x40
 80016d2:	4b06      	ldr	r3, [pc, #24]	; (80016ec <HAL_I2C_MspInit+0x12c>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80016da:	60bb      	str	r3, [r7, #8]
 80016dc:	68bb      	ldr	r3, [r7, #8]
}
 80016de:	bf00      	nop
 80016e0:	3730      	adds	r7, #48	; 0x30
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40005400 	.word	0x40005400
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40020400 	.word	0x40020400
 80016f4:	40005c00 	.word	0x40005c00
 80016f8:	40020800 	.word	0x40020800
 80016fc:	40020000 	.word	0x40020000

08001700 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08a      	sub	sp, #40	; 0x28
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a23      	ldr	r2, [pc, #140]	; (80017ac <HAL_TIM_Base_MspInit+0xac>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d12d      	bne.n	800177e <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	4b22      	ldr	r3, [pc, #136]	; (80017b0 <HAL_TIM_Base_MspInit+0xb0>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172a:	4a21      	ldr	r2, [pc, #132]	; (80017b0 <HAL_TIM_Base_MspInit+0xb0>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6453      	str	r3, [r2, #68]	; 0x44
 8001732:	4b1f      	ldr	r3, [pc, #124]	; (80017b0 <HAL_TIM_Base_MspInit+0xb0>)
 8001734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	4b1b      	ldr	r3, [pc, #108]	; (80017b0 <HAL_TIM_Base_MspInit+0xb0>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a1a      	ldr	r2, [pc, #104]	; (80017b0 <HAL_TIM_Base_MspInit+0xb0>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <HAL_TIM_Base_MspInit+0xb0>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800175a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800175e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001760:	2302      	movs	r3, #2
 8001762:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001768:	2300      	movs	r3, #0
 800176a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800176c:	2301      	movs	r3, #1
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	4619      	mov	r1, r3
 8001776:	480f      	ldr	r0, [pc, #60]	; (80017b4 <HAL_TIM_Base_MspInit+0xb4>)
 8001778:	f000 fb00 	bl	8001d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800177c:	e012      	b.n	80017a4 <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM4)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a0d      	ldr	r2, [pc, #52]	; (80017b8 <HAL_TIM_Base_MspInit+0xb8>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d10d      	bne.n	80017a4 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001788:	2300      	movs	r3, #0
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <HAL_TIM_Base_MspInit+0xb0>)
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	4a07      	ldr	r2, [pc, #28]	; (80017b0 <HAL_TIM_Base_MspInit+0xb0>)
 8001792:	f043 0304 	orr.w	r3, r3, #4
 8001796:	6413      	str	r3, [r2, #64]	; 0x40
 8001798:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <HAL_TIM_Base_MspInit+0xb0>)
 800179a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	68bb      	ldr	r3, [r7, #8]
}
 80017a4:	bf00      	nop
 80017a6:	3728      	adds	r7, #40	; 0x28
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40010000 	.word	0x40010000
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40020000 	.word	0x40020000
 80017b8:	40000800 	.word	0x40000800

080017bc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017cc:	d10e      	bne.n	80017ec <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	4b13      	ldr	r3, [pc, #76]	; (8001820 <HAL_TIM_PWM_MspInit+0x64>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	4a12      	ldr	r2, [pc, #72]	; (8001820 <HAL_TIM_PWM_MspInit+0x64>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6413      	str	r3, [r2, #64]	; 0x40
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <HAL_TIM_PWM_MspInit+0x64>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80017ea:	e012      	b.n	8001812 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a0c      	ldr	r2, [pc, #48]	; (8001824 <HAL_TIM_PWM_MspInit+0x68>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d10d      	bne.n	8001812 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	4b09      	ldr	r3, [pc, #36]	; (8001820 <HAL_TIM_PWM_MspInit+0x64>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	4a08      	ldr	r2, [pc, #32]	; (8001820 <HAL_TIM_PWM_MspInit+0x64>)
 8001800:	f043 0302 	orr.w	r3, r3, #2
 8001804:	6413      	str	r3, [r2, #64]	; 0x40
 8001806:	4b06      	ldr	r3, [pc, #24]	; (8001820 <HAL_TIM_PWM_MspInit+0x64>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	68bb      	ldr	r3, [r7, #8]
}
 8001812:	bf00      	nop
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	40023800 	.word	0x40023800
 8001824:	40000400 	.word	0x40000400

08001828 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	; 0x28
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001848:	d13d      	bne.n	80018c6 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	613b      	str	r3, [r7, #16]
 800184e:	4b31      	ldr	r3, [pc, #196]	; (8001914 <HAL_TIM_MspPostInit+0xec>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a30      	ldr	r2, [pc, #192]	; (8001914 <HAL_TIM_MspPostInit+0xec>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b2e      	ldr	r3, [pc, #184]	; (8001914 <HAL_TIM_MspPostInit+0xec>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	4b2a      	ldr	r3, [pc, #168]	; (8001914 <HAL_TIM_MspPostInit+0xec>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a29      	ldr	r2, [pc, #164]	; (8001914 <HAL_TIM_MspPostInit+0xec>)
 8001870:	f043 0302 	orr.w	r3, r3, #2
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b27      	ldr	r3, [pc, #156]	; (8001914 <HAL_TIM_MspPostInit+0xec>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001882:	2302      	movs	r3, #2
 8001884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001886:	2302      	movs	r3, #2
 8001888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188e:	2300      	movs	r3, #0
 8001890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001892:	2301      	movs	r3, #1
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001896:	f107 0314 	add.w	r3, r7, #20
 800189a:	4619      	mov	r1, r3
 800189c:	481e      	ldr	r0, [pc, #120]	; (8001918 <HAL_TIM_MspPostInit+0xf0>)
 800189e:	f000 fa6d 	bl	8001d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a8:	2302      	movs	r3, #2
 80018aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b0:	2300      	movs	r3, #0
 80018b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018b4:	2301      	movs	r3, #1
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	4619      	mov	r1, r3
 80018be:	4817      	ldr	r0, [pc, #92]	; (800191c <HAL_TIM_MspPostInit+0xf4>)
 80018c0:	f000 fa5c 	bl	8001d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80018c4:	e022      	b.n	800190c <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a15      	ldr	r2, [pc, #84]	; (8001920 <HAL_TIM_MspPostInit+0xf8>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d11d      	bne.n	800190c <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d0:	2300      	movs	r3, #0
 80018d2:	60bb      	str	r3, [r7, #8]
 80018d4:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <HAL_TIM_MspPostInit+0xec>)
 80018d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d8:	4a0e      	ldr	r2, [pc, #56]	; (8001914 <HAL_TIM_MspPostInit+0xec>)
 80018da:	f043 0304 	orr.w	r3, r3, #4
 80018de:	6313      	str	r3, [r2, #48]	; 0x30
 80018e0:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <HAL_TIM_MspPostInit+0xec>)
 80018e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80018ec:	2380      	movs	r3, #128	; 0x80
 80018ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f0:	2302      	movs	r3, #2
 80018f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f8:	2300      	movs	r3, #0
 80018fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018fc:	2302      	movs	r3, #2
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	4619      	mov	r1, r3
 8001906:	4807      	ldr	r0, [pc, #28]	; (8001924 <HAL_TIM_MspPostInit+0xfc>)
 8001908:	f000 fa38 	bl	8001d7c <HAL_GPIO_Init>
}
 800190c:	bf00      	nop
 800190e:	3728      	adds	r7, #40	; 0x28
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40023800 	.word	0x40023800
 8001918:	40020000 	.word	0x40020000
 800191c:	40020400 	.word	0x40020400
 8001920:	40000400 	.word	0x40000400
 8001924:	40020800 	.word	0x40020800

08001928 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08a      	sub	sp, #40	; 0x28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a19      	ldr	r2, [pc, #100]	; (80019ac <HAL_UART_MspInit+0x84>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d12b      	bne.n	80019a2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <HAL_UART_MspInit+0x88>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	4a17      	ldr	r2, [pc, #92]	; (80019b0 <HAL_UART_MspInit+0x88>)
 8001954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001958:	6413      	str	r3, [r2, #64]	; 0x40
 800195a:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <HAL_UART_MspInit+0x88>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <HAL_UART_MspInit+0x88>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	4a10      	ldr	r2, [pc, #64]	; (80019b0 <HAL_UART_MspInit+0x88>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	6313      	str	r3, [r2, #48]	; 0x30
 8001976:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <HAL_UART_MspInit+0x88>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001982:	230c      	movs	r3, #12
 8001984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001986:	2302      	movs	r3, #2
 8001988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198e:	2300      	movs	r3, #0
 8001990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001992:	2307      	movs	r3, #7
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001996:	f107 0314 	add.w	r3, r7, #20
 800199a:	4619      	mov	r1, r3
 800199c:	4805      	ldr	r0, [pc, #20]	; (80019b4 <HAL_UART_MspInit+0x8c>)
 800199e:	f000 f9ed 	bl	8001d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019a2:	bf00      	nop
 80019a4:	3728      	adds	r7, #40	; 0x28
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40004400 	.word	0x40004400
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40020000 	.word	0x40020000

080019b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019bc:	e7fe      	b.n	80019bc <NMI_Handler+0x4>

080019be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019c2:	e7fe      	b.n	80019c2 <HardFault_Handler+0x4>

080019c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c8:	e7fe      	b.n	80019c8 <MemManage_Handler+0x4>

080019ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ce:	e7fe      	b.n	80019ce <BusFault_Handler+0x4>

080019d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019d4:	e7fe      	b.n	80019d4 <UsageFault_Handler+0x4>

080019d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a04:	f000 f890 	bl	8001b28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <SystemInit+0x20>)
 8001a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a16:	4a05      	ldr	r2, [pc, #20]	; (8001a2c <SystemInit+0x20>)
 8001a18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a34:	480d      	ldr	r0, [pc, #52]	; (8001a6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a36:	490e      	ldr	r1, [pc, #56]	; (8001a70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a38:	4a0e      	ldr	r2, [pc, #56]	; (8001a74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a3c:	e002      	b.n	8001a44 <LoopCopyDataInit>

08001a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a42:	3304      	adds	r3, #4

08001a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a48:	d3f9      	bcc.n	8001a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a4a:	4a0b      	ldr	r2, [pc, #44]	; (8001a78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a4c:	4c0b      	ldr	r4, [pc, #44]	; (8001a7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a50:	e001      	b.n	8001a56 <LoopFillZerobss>

08001a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a54:	3204      	adds	r2, #4

08001a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a58:	d3fb      	bcc.n	8001a52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a5a:	f7ff ffd7 	bl	8001a0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a5e:	f003 fb15 	bl	800508c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a62:	f7ff fa17 	bl	8000e94 <main>
  bx  lr    
 8001a66:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a68:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a70:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001a74:	08005124 	.word	0x08005124
  ldr r2, =_sbss
 8001a78:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001a7c:	2000028c 	.word	0x2000028c

08001a80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a80:	e7fe      	b.n	8001a80 <ADC_IRQHandler>
	...

08001a84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a88:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <HAL_Init+0x40>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a0d      	ldr	r2, [pc, #52]	; (8001ac4 <HAL_Init+0x40>)
 8001a8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a94:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <HAL_Init+0x40>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a0a      	ldr	r2, [pc, #40]	; (8001ac4 <HAL_Init+0x40>)
 8001a9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aa0:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <HAL_Init+0x40>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a07      	ldr	r2, [pc, #28]	; (8001ac4 <HAL_Init+0x40>)
 8001aa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aac:	2003      	movs	r0, #3
 8001aae:	f000 f931 	bl	8001d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	f000 f808 	bl	8001ac8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ab8:	f7ff fd5a 	bl	8001570 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40023c00 	.word	0x40023c00

08001ac8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ad0:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <HAL_InitTick+0x54>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <HAL_InitTick+0x58>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	4619      	mov	r1, r3
 8001ada:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ade:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f000 f93b 	bl	8001d62 <HAL_SYSTICK_Config>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e00e      	b.n	8001b14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2b0f      	cmp	r3, #15
 8001afa:	d80a      	bhi.n	8001b12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001afc:	2200      	movs	r2, #0
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	f04f 30ff 	mov.w	r0, #4294967295
 8001b04:	f000 f911 	bl	8001d2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b08:	4a06      	ldr	r2, [pc, #24]	; (8001b24 <HAL_InitTick+0x5c>)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	e000      	b.n	8001b14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20000000 	.word	0x20000000
 8001b20:	20000008 	.word	0x20000008
 8001b24:	20000004 	.word	0x20000004

08001b28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b2c:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <HAL_IncTick+0x20>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	461a      	mov	r2, r3
 8001b32:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <HAL_IncTick+0x24>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4413      	add	r3, r2
 8001b38:	4a04      	ldr	r2, [pc, #16]	; (8001b4c <HAL_IncTick+0x24>)
 8001b3a:	6013      	str	r3, [r2, #0]
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	20000008 	.word	0x20000008
 8001b4c:	20000288 	.word	0x20000288

08001b50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return uwTick;
 8001b54:	4b03      	ldr	r3, [pc, #12]	; (8001b64 <HAL_GetTick+0x14>)
 8001b56:	681b      	ldr	r3, [r3, #0]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	20000288 	.word	0x20000288

08001b68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b70:	f7ff ffee 	bl	8001b50 <HAL_GetTick>
 8001b74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b80:	d005      	beq.n	8001b8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b82:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <HAL_Delay+0x44>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	461a      	mov	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b8e:	bf00      	nop
 8001b90:	f7ff ffde 	bl	8001b50 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d8f7      	bhi.n	8001b90 <HAL_Delay+0x28>
  {
  }
}
 8001ba0:	bf00      	nop
 8001ba2:	bf00      	nop
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000008 	.word	0x20000008

08001bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bcc:	4013      	ands	r3, r2
 8001bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001be2:	4a04      	ldr	r2, [pc, #16]	; (8001bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	60d3      	str	r3, [r2, #12]
}
 8001be8:	bf00      	nop
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bfc:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <__NVIC_GetPriorityGrouping+0x18>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	0a1b      	lsrs	r3, r3, #8
 8001c02:	f003 0307 	and.w	r3, r3, #7
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	6039      	str	r1, [r7, #0]
 8001c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	db0a      	blt.n	8001c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	490c      	ldr	r1, [pc, #48]	; (8001c60 <__NVIC_SetPriority+0x4c>)
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	0112      	lsls	r2, r2, #4
 8001c34:	b2d2      	uxtb	r2, r2
 8001c36:	440b      	add	r3, r1
 8001c38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c3c:	e00a      	b.n	8001c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	4908      	ldr	r1, [pc, #32]	; (8001c64 <__NVIC_SetPriority+0x50>)
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	3b04      	subs	r3, #4
 8001c4c:	0112      	lsls	r2, r2, #4
 8001c4e:	b2d2      	uxtb	r2, r2
 8001c50:	440b      	add	r3, r1
 8001c52:	761a      	strb	r2, [r3, #24]
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	e000e100 	.word	0xe000e100
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b089      	sub	sp, #36	; 0x24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	f1c3 0307 	rsb	r3, r3, #7
 8001c82:	2b04      	cmp	r3, #4
 8001c84:	bf28      	it	cs
 8001c86:	2304      	movcs	r3, #4
 8001c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	2b06      	cmp	r3, #6
 8001c90:	d902      	bls.n	8001c98 <NVIC_EncodePriority+0x30>
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3b03      	subs	r3, #3
 8001c96:	e000      	b.n	8001c9a <NVIC_EncodePriority+0x32>
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43da      	mvns	r2, r3
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	401a      	ands	r2, r3
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cba:	43d9      	mvns	r1, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc0:	4313      	orrs	r3, r2
         );
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3724      	adds	r7, #36	; 0x24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ce0:	d301      	bcc.n	8001ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e00f      	b.n	8001d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ce6:	4a0a      	ldr	r2, [pc, #40]	; (8001d10 <SysTick_Config+0x40>)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cee:	210f      	movs	r1, #15
 8001cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf4:	f7ff ff8e 	bl	8001c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf8:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <SysTick_Config+0x40>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cfe:	4b04      	ldr	r3, [pc, #16]	; (8001d10 <SysTick_Config+0x40>)
 8001d00:	2207      	movs	r2, #7
 8001d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	e000e010 	.word	0xe000e010

08001d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7ff ff47 	bl	8001bb0 <__NVIC_SetPriorityGrouping>
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b086      	sub	sp, #24
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	4603      	mov	r3, r0
 8001d32:	60b9      	str	r1, [r7, #8]
 8001d34:	607a      	str	r2, [r7, #4]
 8001d36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d3c:	f7ff ff5c 	bl	8001bf8 <__NVIC_GetPriorityGrouping>
 8001d40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	68b9      	ldr	r1, [r7, #8]
 8001d46:	6978      	ldr	r0, [r7, #20]
 8001d48:	f7ff ff8e 	bl	8001c68 <NVIC_EncodePriority>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d52:	4611      	mov	r1, r2
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff ff5d 	bl	8001c14 <__NVIC_SetPriority>
}
 8001d5a:	bf00      	nop
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7ff ffb0 	bl	8001cd0 <SysTick_Config>
 8001d70:	4603      	mov	r3, r0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b089      	sub	sp, #36	; 0x24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]
 8001d96:	e159      	b.n	800204c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d98:	2201      	movs	r2, #1
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	4013      	ands	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	f040 8148 	bne.w	8002046 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f003 0303 	and.w	r3, r3, #3
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d005      	beq.n	8001dce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d130      	bne.n	8001e30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	2203      	movs	r2, #3
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43db      	mvns	r3, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4013      	ands	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	68da      	ldr	r2, [r3, #12]
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e04:	2201      	movs	r2, #1
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	091b      	lsrs	r3, r3, #4
 8001e1a:	f003 0201 	and.w	r2, r3, #1
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 0303 	and.w	r3, r3, #3
 8001e38:	2b03      	cmp	r3, #3
 8001e3a:	d017      	beq.n	8001e6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	2203      	movs	r2, #3
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4013      	ands	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 0303 	and.w	r3, r3, #3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d123      	bne.n	8001ec0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	08da      	lsrs	r2, r3, #3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3208      	adds	r2, #8
 8001e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	220f      	movs	r2, #15
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	691a      	ldr	r2, [r3, #16]
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	08da      	lsrs	r2, r3, #3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3208      	adds	r2, #8
 8001eba:	69b9      	ldr	r1, [r7, #24]
 8001ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	2203      	movs	r2, #3
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 0203 	and.w	r2, r3, #3
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f000 80a2 	beq.w	8002046 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	4b57      	ldr	r3, [pc, #348]	; (8002064 <HAL_GPIO_Init+0x2e8>)
 8001f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0a:	4a56      	ldr	r2, [pc, #344]	; (8002064 <HAL_GPIO_Init+0x2e8>)
 8001f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f10:	6453      	str	r3, [r2, #68]	; 0x44
 8001f12:	4b54      	ldr	r3, [pc, #336]	; (8002064 <HAL_GPIO_Init+0x2e8>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f1e:	4a52      	ldr	r2, [pc, #328]	; (8002068 <HAL_GPIO_Init+0x2ec>)
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	089b      	lsrs	r3, r3, #2
 8001f24:	3302      	adds	r3, #2
 8001f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	220f      	movs	r2, #15
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a49      	ldr	r2, [pc, #292]	; (800206c <HAL_GPIO_Init+0x2f0>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d019      	beq.n	8001f7e <HAL_GPIO_Init+0x202>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a48      	ldr	r2, [pc, #288]	; (8002070 <HAL_GPIO_Init+0x2f4>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d013      	beq.n	8001f7a <HAL_GPIO_Init+0x1fe>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a47      	ldr	r2, [pc, #284]	; (8002074 <HAL_GPIO_Init+0x2f8>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d00d      	beq.n	8001f76 <HAL_GPIO_Init+0x1fa>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a46      	ldr	r2, [pc, #280]	; (8002078 <HAL_GPIO_Init+0x2fc>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d007      	beq.n	8001f72 <HAL_GPIO_Init+0x1f6>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a45      	ldr	r2, [pc, #276]	; (800207c <HAL_GPIO_Init+0x300>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d101      	bne.n	8001f6e <HAL_GPIO_Init+0x1f2>
 8001f6a:	2304      	movs	r3, #4
 8001f6c:	e008      	b.n	8001f80 <HAL_GPIO_Init+0x204>
 8001f6e:	2307      	movs	r3, #7
 8001f70:	e006      	b.n	8001f80 <HAL_GPIO_Init+0x204>
 8001f72:	2303      	movs	r3, #3
 8001f74:	e004      	b.n	8001f80 <HAL_GPIO_Init+0x204>
 8001f76:	2302      	movs	r3, #2
 8001f78:	e002      	b.n	8001f80 <HAL_GPIO_Init+0x204>
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e000      	b.n	8001f80 <HAL_GPIO_Init+0x204>
 8001f7e:	2300      	movs	r3, #0
 8001f80:	69fa      	ldr	r2, [r7, #28]
 8001f82:	f002 0203 	and.w	r2, r2, #3
 8001f86:	0092      	lsls	r2, r2, #2
 8001f88:	4093      	lsls	r3, r2
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f90:	4935      	ldr	r1, [pc, #212]	; (8002068 <HAL_GPIO_Init+0x2ec>)
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	089b      	lsrs	r3, r3, #2
 8001f96:	3302      	adds	r3, #2
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f9e:	4b38      	ldr	r3, [pc, #224]	; (8002080 <HAL_GPIO_Init+0x304>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4013      	ands	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fc2:	4a2f      	ldr	r2, [pc, #188]	; (8002080 <HAL_GPIO_Init+0x304>)
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fc8:	4b2d      	ldr	r3, [pc, #180]	; (8002080 <HAL_GPIO_Init+0x304>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fec:	4a24      	ldr	r2, [pc, #144]	; (8002080 <HAL_GPIO_Init+0x304>)
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ff2:	4b23      	ldr	r3, [pc, #140]	; (8002080 <HAL_GPIO_Init+0x304>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4013      	ands	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	4313      	orrs	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002016:	4a1a      	ldr	r2, [pc, #104]	; (8002080 <HAL_GPIO_Init+0x304>)
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800201c:	4b18      	ldr	r3, [pc, #96]	; (8002080 <HAL_GPIO_Init+0x304>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	43db      	mvns	r3, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4013      	ands	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d003      	beq.n	8002040 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	4313      	orrs	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002040:	4a0f      	ldr	r2, [pc, #60]	; (8002080 <HAL_GPIO_Init+0x304>)
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	3301      	adds	r3, #1
 800204a:	61fb      	str	r3, [r7, #28]
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	2b0f      	cmp	r3, #15
 8002050:	f67f aea2 	bls.w	8001d98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002054:	bf00      	nop
 8002056:	bf00      	nop
 8002058:	3724      	adds	r7, #36	; 0x24
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	40023800 	.word	0x40023800
 8002068:	40013800 	.word	0x40013800
 800206c:	40020000 	.word	0x40020000
 8002070:	40020400 	.word	0x40020400
 8002074:	40020800 	.word	0x40020800
 8002078:	40020c00 	.word	0x40020c00
 800207c:	40021000 	.word	0x40021000
 8002080:	40013c00 	.word	0x40013c00

08002084 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	807b      	strh	r3, [r7, #2]
 8002090:	4613      	mov	r3, r2
 8002092:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002094:	787b      	ldrb	r3, [r7, #1]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800209a:	887a      	ldrh	r2, [r7, #2]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020a0:	e003      	b.n	80020aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020a2:	887b      	ldrh	r3, [r7, #2]
 80020a4:	041a      	lsls	r2, r3, #16
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	619a      	str	r2, [r3, #24]
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
	...

080020b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e12b      	b.n	8002322 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d106      	bne.n	80020e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7ff fa6e 	bl	80015c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2224      	movs	r2, #36	; 0x24
 80020e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 0201 	bic.w	r2, r2, #1
 80020fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800210a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800211a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800211c:	f001 fbd2 	bl	80038c4 <HAL_RCC_GetPCLK1Freq>
 8002120:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	4a81      	ldr	r2, [pc, #516]	; (800232c <HAL_I2C_Init+0x274>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d807      	bhi.n	800213c <HAL_I2C_Init+0x84>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4a80      	ldr	r2, [pc, #512]	; (8002330 <HAL_I2C_Init+0x278>)
 8002130:	4293      	cmp	r3, r2
 8002132:	bf94      	ite	ls
 8002134:	2301      	movls	r3, #1
 8002136:	2300      	movhi	r3, #0
 8002138:	b2db      	uxtb	r3, r3
 800213a:	e006      	b.n	800214a <HAL_I2C_Init+0x92>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	4a7d      	ldr	r2, [pc, #500]	; (8002334 <HAL_I2C_Init+0x27c>)
 8002140:	4293      	cmp	r3, r2
 8002142:	bf94      	ite	ls
 8002144:	2301      	movls	r3, #1
 8002146:	2300      	movhi	r3, #0
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e0e7      	b.n	8002322 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	4a78      	ldr	r2, [pc, #480]	; (8002338 <HAL_I2C_Init+0x280>)
 8002156:	fba2 2303 	umull	r2, r3, r2, r3
 800215a:	0c9b      	lsrs	r3, r3, #18
 800215c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68ba      	ldr	r2, [r7, #8]
 800216e:	430a      	orrs	r2, r1
 8002170:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	4a6a      	ldr	r2, [pc, #424]	; (800232c <HAL_I2C_Init+0x274>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d802      	bhi.n	800218c <HAL_I2C_Init+0xd4>
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	3301      	adds	r3, #1
 800218a:	e009      	b.n	80021a0 <HAL_I2C_Init+0xe8>
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002192:	fb02 f303 	mul.w	r3, r2, r3
 8002196:	4a69      	ldr	r2, [pc, #420]	; (800233c <HAL_I2C_Init+0x284>)
 8002198:	fba2 2303 	umull	r2, r3, r2, r3
 800219c:	099b      	lsrs	r3, r3, #6
 800219e:	3301      	adds	r3, #1
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	6812      	ldr	r2, [r2, #0]
 80021a4:	430b      	orrs	r3, r1
 80021a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80021b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	495c      	ldr	r1, [pc, #368]	; (800232c <HAL_I2C_Init+0x274>)
 80021bc:	428b      	cmp	r3, r1
 80021be:	d819      	bhi.n	80021f4 <HAL_I2C_Init+0x13c>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	1e59      	subs	r1, r3, #1
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80021ce:	1c59      	adds	r1, r3, #1
 80021d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80021d4:	400b      	ands	r3, r1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00a      	beq.n	80021f0 <HAL_I2C_Init+0x138>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	1e59      	subs	r1, r3, #1
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80021e8:	3301      	adds	r3, #1
 80021ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ee:	e051      	b.n	8002294 <HAL_I2C_Init+0x1dc>
 80021f0:	2304      	movs	r3, #4
 80021f2:	e04f      	b.n	8002294 <HAL_I2C_Init+0x1dc>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d111      	bne.n	8002220 <HAL_I2C_Init+0x168>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	1e58      	subs	r0, r3, #1
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6859      	ldr	r1, [r3, #4]
 8002204:	460b      	mov	r3, r1
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	440b      	add	r3, r1
 800220a:	fbb0 f3f3 	udiv	r3, r0, r3
 800220e:	3301      	adds	r3, #1
 8002210:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002214:	2b00      	cmp	r3, #0
 8002216:	bf0c      	ite	eq
 8002218:	2301      	moveq	r3, #1
 800221a:	2300      	movne	r3, #0
 800221c:	b2db      	uxtb	r3, r3
 800221e:	e012      	b.n	8002246 <HAL_I2C_Init+0x18e>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	1e58      	subs	r0, r3, #1
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6859      	ldr	r1, [r3, #4]
 8002228:	460b      	mov	r3, r1
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	440b      	add	r3, r1
 800222e:	0099      	lsls	r1, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	fbb0 f3f3 	udiv	r3, r0, r3
 8002236:	3301      	adds	r3, #1
 8002238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800223c:	2b00      	cmp	r3, #0
 800223e:	bf0c      	ite	eq
 8002240:	2301      	moveq	r3, #1
 8002242:	2300      	movne	r3, #0
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <HAL_I2C_Init+0x196>
 800224a:	2301      	movs	r3, #1
 800224c:	e022      	b.n	8002294 <HAL_I2C_Init+0x1dc>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10e      	bne.n	8002274 <HAL_I2C_Init+0x1bc>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	1e58      	subs	r0, r3, #1
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6859      	ldr	r1, [r3, #4]
 800225e:	460b      	mov	r3, r1
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	440b      	add	r3, r1
 8002264:	fbb0 f3f3 	udiv	r3, r0, r3
 8002268:	3301      	adds	r3, #1
 800226a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800226e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002272:	e00f      	b.n	8002294 <HAL_I2C_Init+0x1dc>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	1e58      	subs	r0, r3, #1
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6859      	ldr	r1, [r3, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	440b      	add	r3, r1
 8002282:	0099      	lsls	r1, r3, #2
 8002284:	440b      	add	r3, r1
 8002286:	fbb0 f3f3 	udiv	r3, r0, r3
 800228a:	3301      	adds	r3, #1
 800228c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002290:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	6809      	ldr	r1, [r1, #0]
 8002298:	4313      	orrs	r3, r2
 800229a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69da      	ldr	r2, [r3, #28]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	431a      	orrs	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	430a      	orrs	r2, r1
 80022b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80022c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	6911      	ldr	r1, [r2, #16]
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	68d2      	ldr	r2, [r2, #12]
 80022ce:	4311      	orrs	r1, r2
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	6812      	ldr	r2, [r2, #0]
 80022d4:	430b      	orrs	r3, r1
 80022d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	695a      	ldr	r2, [r3, #20]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	431a      	orrs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f042 0201 	orr.w	r2, r2, #1
 8002302:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2220      	movs	r2, #32
 800230e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	000186a0 	.word	0x000186a0
 8002330:	001e847f 	.word	0x001e847f
 8002334:	003d08ff 	.word	0x003d08ff
 8002338:	431bde83 	.word	0x431bde83
 800233c:	10624dd3 	.word	0x10624dd3

08002340 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b088      	sub	sp, #32
 8002344:	af02      	add	r7, sp, #8
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	607a      	str	r2, [r7, #4]
 800234a:	461a      	mov	r2, r3
 800234c:	460b      	mov	r3, r1
 800234e:	817b      	strh	r3, [r7, #10]
 8002350:	4613      	mov	r3, r2
 8002352:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002354:	f7ff fbfc 	bl	8001b50 <HAL_GetTick>
 8002358:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b20      	cmp	r3, #32
 8002364:	f040 80e0 	bne.w	8002528 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	2319      	movs	r3, #25
 800236e:	2201      	movs	r2, #1
 8002370:	4970      	ldr	r1, [pc, #448]	; (8002534 <HAL_I2C_Master_Transmit+0x1f4>)
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f000 fc58 	bl	8002c28 <I2C_WaitOnFlagUntilTimeout>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800237e:	2302      	movs	r3, #2
 8002380:	e0d3      	b.n	800252a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002388:	2b01      	cmp	r3, #1
 800238a:	d101      	bne.n	8002390 <HAL_I2C_Master_Transmit+0x50>
 800238c:	2302      	movs	r3, #2
 800238e:	e0cc      	b.n	800252a <HAL_I2C_Master_Transmit+0x1ea>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d007      	beq.n	80023b6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f042 0201 	orr.w	r2, r2, #1
 80023b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2221      	movs	r2, #33	; 0x21
 80023ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2210      	movs	r2, #16
 80023d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	893a      	ldrh	r2, [r7, #8]
 80023e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	4a50      	ldr	r2, [pc, #320]	; (8002538 <HAL_I2C_Master_Transmit+0x1f8>)
 80023f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80023f8:	8979      	ldrh	r1, [r7, #10]
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	6a3a      	ldr	r2, [r7, #32]
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f000 fac2 	bl	8002988 <I2C_MasterRequestWrite>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e08d      	b.n	800252a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800240e:	2300      	movs	r3, #0
 8002410:	613b      	str	r3, [r7, #16]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	613b      	str	r3, [r7, #16]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	613b      	str	r3, [r7, #16]
 8002422:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002424:	e066      	b.n	80024f4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	6a39      	ldr	r1, [r7, #32]
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f000 fcd2 	bl	8002dd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00d      	beq.n	8002452 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	2b04      	cmp	r3, #4
 800243c:	d107      	bne.n	800244e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800244c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e06b      	b.n	800252a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002456:	781a      	ldrb	r2, [r3, #0]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	1c5a      	adds	r2, r3, #1
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800246c:	b29b      	uxth	r3, r3
 800246e:	3b01      	subs	r3, #1
 8002470:	b29a      	uxth	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800247a:	3b01      	subs	r3, #1
 800247c:	b29a      	uxth	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	f003 0304 	and.w	r3, r3, #4
 800248c:	2b04      	cmp	r3, #4
 800248e:	d11b      	bne.n	80024c8 <HAL_I2C_Master_Transmit+0x188>
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002494:	2b00      	cmp	r3, #0
 8002496:	d017      	beq.n	80024c8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249c:	781a      	ldrb	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a8:	1c5a      	adds	r2, r3, #1
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	3b01      	subs	r3, #1
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c0:	3b01      	subs	r3, #1
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	6a39      	ldr	r1, [r7, #32]
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f000 fcc2 	bl	8002e56 <I2C_WaitOnBTFFlagUntilTimeout>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00d      	beq.n	80024f4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	2b04      	cmp	r3, #4
 80024de:	d107      	bne.n	80024f0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e01a      	b.n	800252a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d194      	bne.n	8002426 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800250a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2220      	movs	r2, #32
 8002510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002524:	2300      	movs	r3, #0
 8002526:	e000      	b.n	800252a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002528:	2302      	movs	r3, #2
  }
}
 800252a:	4618      	mov	r0, r3
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	00100002 	.word	0x00100002
 8002538:	ffff0000 	.word	0xffff0000

0800253c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b08c      	sub	sp, #48	; 0x30
 8002540:	af02      	add	r7, sp, #8
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	607a      	str	r2, [r7, #4]
 8002546:	461a      	mov	r2, r3
 8002548:	460b      	mov	r3, r1
 800254a:	817b      	strh	r3, [r7, #10]
 800254c:	4613      	mov	r3, r2
 800254e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002550:	f7ff fafe 	bl	8001b50 <HAL_GetTick>
 8002554:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b20      	cmp	r3, #32
 8002560:	f040 820b 	bne.w	800297a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	2319      	movs	r3, #25
 800256a:	2201      	movs	r2, #1
 800256c:	497c      	ldr	r1, [pc, #496]	; (8002760 <HAL_I2C_Master_Receive+0x224>)
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f000 fb5a 	bl	8002c28 <I2C_WaitOnFlagUntilTimeout>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800257a:	2302      	movs	r3, #2
 800257c:	e1fe      	b.n	800297c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002584:	2b01      	cmp	r3, #1
 8002586:	d101      	bne.n	800258c <HAL_I2C_Master_Receive+0x50>
 8002588:	2302      	movs	r3, #2
 800258a:	e1f7      	b.n	800297c <HAL_I2C_Master_Receive+0x440>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d007      	beq.n	80025b2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f042 0201 	orr.w	r2, r2, #1
 80025b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2222      	movs	r2, #34	; 0x22
 80025c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2210      	movs	r2, #16
 80025ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	893a      	ldrh	r2, [r7, #8]
 80025e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	4a5c      	ldr	r2, [pc, #368]	; (8002764 <HAL_I2C_Master_Receive+0x228>)
 80025f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80025f4:	8979      	ldrh	r1, [r7, #10]
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 fa46 	bl	8002a8c <I2C_MasterRequestRead>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e1b8      	b.n	800297c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260e:	2b00      	cmp	r3, #0
 8002610:	d113      	bne.n	800263a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002612:	2300      	movs	r3, #0
 8002614:	623b      	str	r3, [r7, #32]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	695b      	ldr	r3, [r3, #20]
 800261c:	623b      	str	r3, [r7, #32]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	623b      	str	r3, [r7, #32]
 8002626:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	e18c      	b.n	8002954 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263e:	2b01      	cmp	r3, #1
 8002640:	d11b      	bne.n	800267a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002650:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002652:	2300      	movs	r3, #0
 8002654:	61fb      	str	r3, [r7, #28]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	61fb      	str	r3, [r7, #28]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	61fb      	str	r3, [r7, #28]
 8002666:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	e16c      	b.n	8002954 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800267e:	2b02      	cmp	r3, #2
 8002680:	d11b      	bne.n	80026ba <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002690:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026a2:	2300      	movs	r3, #0
 80026a4:	61bb      	str	r3, [r7, #24]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	61bb      	str	r3, [r7, #24]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	61bb      	str	r3, [r7, #24]
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	e14c      	b.n	8002954 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ca:	2300      	movs	r3, #0
 80026cc:	617b      	str	r3, [r7, #20]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	617b      	str	r3, [r7, #20]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	617b      	str	r3, [r7, #20]
 80026de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80026e0:	e138      	b.n	8002954 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e6:	2b03      	cmp	r3, #3
 80026e8:	f200 80f1 	bhi.w	80028ce <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d123      	bne.n	800273c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f000 fbed 	bl	8002ed8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e139      	b.n	800297c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	691a      	ldr	r2, [r3, #16]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271a:	1c5a      	adds	r2, r3, #1
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002724:	3b01      	subs	r3, #1
 8002726:	b29a      	uxth	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002730:	b29b      	uxth	r3, r3
 8002732:	3b01      	subs	r3, #1
 8002734:	b29a      	uxth	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	855a      	strh	r2, [r3, #42]	; 0x2a
 800273a:	e10b      	b.n	8002954 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002740:	2b02      	cmp	r3, #2
 8002742:	d14e      	bne.n	80027e2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800274a:	2200      	movs	r2, #0
 800274c:	4906      	ldr	r1, [pc, #24]	; (8002768 <HAL_I2C_Master_Receive+0x22c>)
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 fa6a 	bl	8002c28 <I2C_WaitOnFlagUntilTimeout>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d008      	beq.n	800276c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e10e      	b.n	800297c <HAL_I2C_Master_Receive+0x440>
 800275e:	bf00      	nop
 8002760:	00100002 	.word	0x00100002
 8002764:	ffff0000 	.word	0xffff0000
 8002768:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800277a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	691a      	ldr	r2, [r3, #16]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278e:	1c5a      	adds	r2, r3, #1
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002798:	3b01      	subs	r3, #1
 800279a:	b29a      	uxth	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	3b01      	subs	r3, #1
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	691a      	ldr	r2, [r3, #16]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	b2d2      	uxtb	r2, r2
 80027ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c0:	1c5a      	adds	r2, r3, #1
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ca:	3b01      	subs	r3, #1
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	3b01      	subs	r3, #1
 80027da:	b29a      	uxth	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027e0:	e0b8      	b.n	8002954 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e8:	2200      	movs	r2, #0
 80027ea:	4966      	ldr	r1, [pc, #408]	; (8002984 <HAL_I2C_Master_Receive+0x448>)
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f000 fa1b 	bl	8002c28 <I2C_WaitOnFlagUntilTimeout>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e0bf      	b.n	800297c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800280a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	691a      	ldr	r2, [r3, #16]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	1c5a      	adds	r2, r3, #1
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002828:	3b01      	subs	r3, #1
 800282a:	b29a      	uxth	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002834:	b29b      	uxth	r3, r3
 8002836:	3b01      	subs	r3, #1
 8002838:	b29a      	uxth	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002844:	2200      	movs	r2, #0
 8002846:	494f      	ldr	r1, [pc, #316]	; (8002984 <HAL_I2C_Master_Receive+0x448>)
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f000 f9ed 	bl	8002c28 <I2C_WaitOnFlagUntilTimeout>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e091      	b.n	800297c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002866:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	691a      	ldr	r2, [r3, #16]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287a:	1c5a      	adds	r2, r3, #1
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002884:	3b01      	subs	r3, #1
 8002886:	b29a      	uxth	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002890:	b29b      	uxth	r3, r3
 8002892:	3b01      	subs	r3, #1
 8002894:	b29a      	uxth	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	691a      	ldr	r2, [r3, #16]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ac:	1c5a      	adds	r2, r3, #1
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b6:	3b01      	subs	r3, #1
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	3b01      	subs	r3, #1
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028cc:	e042      	b.n	8002954 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f000 fb00 	bl	8002ed8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e04c      	b.n	800297c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	691a      	ldr	r2, [r3, #16]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f4:	1c5a      	adds	r2, r3, #1
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fe:	3b01      	subs	r3, #1
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800290a:	b29b      	uxth	r3, r3
 800290c:	3b01      	subs	r3, #1
 800290e:	b29a      	uxth	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	f003 0304 	and.w	r3, r3, #4
 800291e:	2b04      	cmp	r3, #4
 8002920:	d118      	bne.n	8002954 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	691a      	ldr	r2, [r3, #16]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	1c5a      	adds	r2, r3, #1
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800293e:	3b01      	subs	r3, #1
 8002940:	b29a      	uxth	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294a:	b29b      	uxth	r3, r3
 800294c:	3b01      	subs	r3, #1
 800294e:	b29a      	uxth	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002958:	2b00      	cmp	r3, #0
 800295a:	f47f aec2 	bne.w	80026e2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2220      	movs	r2, #32
 8002962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	e000      	b.n	800297c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800297a:	2302      	movs	r3, #2
  }
}
 800297c:	4618      	mov	r0, r3
 800297e:	3728      	adds	r7, #40	; 0x28
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	00010004 	.word	0x00010004

08002988 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b088      	sub	sp, #32
 800298c:	af02      	add	r7, sp, #8
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	607a      	str	r2, [r7, #4]
 8002992:	603b      	str	r3, [r7, #0]
 8002994:	460b      	mov	r3, r1
 8002996:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	d006      	beq.n	80029b2 <I2C_MasterRequestWrite+0x2a>
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d003      	beq.n	80029b2 <I2C_MasterRequestWrite+0x2a>
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80029b0:	d108      	bne.n	80029c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	e00b      	b.n	80029dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c8:	2b12      	cmp	r3, #18
 80029ca:	d107      	bne.n	80029dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029e8:	68f8      	ldr	r0, [r7, #12]
 80029ea:	f000 f91d 	bl	8002c28 <I2C_WaitOnFlagUntilTimeout>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00d      	beq.n	8002a10 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a02:	d103      	bne.n	8002a0c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e035      	b.n	8002a7c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a18:	d108      	bne.n	8002a2c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a1a:	897b      	ldrh	r3, [r7, #10]
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	461a      	mov	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a28:	611a      	str	r2, [r3, #16]
 8002a2a:	e01b      	b.n	8002a64 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a2c:	897b      	ldrh	r3, [r7, #10]
 8002a2e:	11db      	asrs	r3, r3, #7
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	f003 0306 	and.w	r3, r3, #6
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	f063 030f 	orn	r3, r3, #15
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	490e      	ldr	r1, [pc, #56]	; (8002a84 <I2C_MasterRequestWrite+0xfc>)
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f000 f943 	bl	8002cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e010      	b.n	8002a7c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a5a:	897b      	ldrh	r3, [r7, #10]
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	4907      	ldr	r1, [pc, #28]	; (8002a88 <I2C_MasterRequestWrite+0x100>)
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 f933 	bl	8002cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e000      	b.n	8002a7c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3718      	adds	r7, #24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	00010008 	.word	0x00010008
 8002a88:	00010002 	.word	0x00010002

08002a8c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b088      	sub	sp, #32
 8002a90:	af02      	add	r7, sp, #8
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	607a      	str	r2, [r7, #4]
 8002a96:	603b      	str	r3, [r7, #0]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ab0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d006      	beq.n	8002ac6 <I2C_MasterRequestRead+0x3a>
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d003      	beq.n	8002ac6 <I2C_MasterRequestRead+0x3a>
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ac4:	d108      	bne.n	8002ad8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	e00b      	b.n	8002af0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002adc:	2b11      	cmp	r3, #17
 8002ade:	d107      	bne.n	8002af0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f000 f893 	bl	8002c28 <I2C_WaitOnFlagUntilTimeout>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00d      	beq.n	8002b24 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b16:	d103      	bne.n	8002b20 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e079      	b.n	8002c18 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b2c:	d108      	bne.n	8002b40 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002b2e:	897b      	ldrh	r3, [r7, #10]
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	f043 0301 	orr.w	r3, r3, #1
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	611a      	str	r2, [r3, #16]
 8002b3e:	e05f      	b.n	8002c00 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b40:	897b      	ldrh	r3, [r7, #10]
 8002b42:	11db      	asrs	r3, r3, #7
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	f003 0306 	and.w	r3, r3, #6
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	f063 030f 	orn	r3, r3, #15
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	4930      	ldr	r1, [pc, #192]	; (8002c20 <I2C_MasterRequestRead+0x194>)
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f000 f8b9 	bl	8002cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e054      	b.n	8002c18 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b6e:	897b      	ldrh	r3, [r7, #10]
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	4929      	ldr	r1, [pc, #164]	; (8002c24 <I2C_MasterRequestRead+0x198>)
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 f8a9 	bl	8002cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e044      	b.n	8002c18 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b8e:	2300      	movs	r3, #0
 8002b90:	613b      	str	r3, [r7, #16]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	613b      	str	r3, [r7, #16]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	613b      	str	r3, [r7, #16]
 8002ba2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bb2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f000 f831 	bl	8002c28 <I2C_WaitOnFlagUntilTimeout>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00d      	beq.n	8002be8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bda:	d103      	bne.n	8002be4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002be2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e017      	b.n	8002c18 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002be8:	897b      	ldrh	r3, [r7, #10]
 8002bea:	11db      	asrs	r3, r3, #7
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	f003 0306 	and.w	r3, r3, #6
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	f063 030e 	orn	r3, r3, #14
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	4907      	ldr	r1, [pc, #28]	; (8002c24 <I2C_MasterRequestRead+0x198>)
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f000 f865 	bl	8002cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e000      	b.n	8002c18 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3718      	adds	r7, #24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	00010008 	.word	0x00010008
 8002c24:	00010002 	.word	0x00010002

08002c28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	603b      	str	r3, [r7, #0]
 8002c34:	4613      	mov	r3, r2
 8002c36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c38:	e025      	b.n	8002c86 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c40:	d021      	beq.n	8002c86 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c42:	f7fe ff85 	bl	8001b50 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d302      	bcc.n	8002c58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d116      	bne.n	8002c86 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2220      	movs	r2, #32
 8002c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f043 0220 	orr.w	r2, r3, #32
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e023      	b.n	8002cce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	0c1b      	lsrs	r3, r3, #16
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d10d      	bne.n	8002cac <I2C_WaitOnFlagUntilTimeout+0x84>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	43da      	mvns	r2, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	bf0c      	ite	eq
 8002ca2:	2301      	moveq	r3, #1
 8002ca4:	2300      	movne	r3, #0
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	461a      	mov	r2, r3
 8002caa:	e00c      	b.n	8002cc6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	43da      	mvns	r2, r3
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	bf0c      	ite	eq
 8002cbe:	2301      	moveq	r3, #1
 8002cc0:	2300      	movne	r3, #0
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	79fb      	ldrb	r3, [r7, #7]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d0b6      	beq.n	8002c3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b084      	sub	sp, #16
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	60f8      	str	r0, [r7, #12]
 8002cde:	60b9      	str	r1, [r7, #8]
 8002ce0:	607a      	str	r2, [r7, #4]
 8002ce2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ce4:	e051      	b.n	8002d8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cf4:	d123      	bne.n	8002d3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d04:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d0e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2220      	movs	r2, #32
 8002d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	f043 0204 	orr.w	r2, r3, #4
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e046      	b.n	8002dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d44:	d021      	beq.n	8002d8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d46:	f7fe ff03 	bl	8001b50 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d302      	bcc.n	8002d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d116      	bne.n	8002d8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2220      	movs	r2, #32
 8002d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	f043 0220 	orr.w	r2, r3, #32
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e020      	b.n	8002dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	0c1b      	lsrs	r3, r3, #16
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d10c      	bne.n	8002dae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	43da      	mvns	r2, r3
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	bf14      	ite	ne
 8002da6:	2301      	movne	r3, #1
 8002da8:	2300      	moveq	r3, #0
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	e00b      	b.n	8002dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	43da      	mvns	r2, r3
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	4013      	ands	r3, r2
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	bf14      	ite	ne
 8002dc0:	2301      	movne	r3, #1
 8002dc2:	2300      	moveq	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d18d      	bne.n	8002ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002de0:	e02d      	b.n	8002e3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 f8ce 	bl	8002f84 <I2C_IsAcknowledgeFailed>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e02d      	b.n	8002e4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df8:	d021      	beq.n	8002e3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dfa:	f7fe fea9 	bl	8001b50 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	68ba      	ldr	r2, [r7, #8]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d302      	bcc.n	8002e10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d116      	bne.n	8002e3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2220      	movs	r2, #32
 8002e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	f043 0220 	orr.w	r2, r3, #32
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e007      	b.n	8002e4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e48:	2b80      	cmp	r3, #128	; 0x80
 8002e4a:	d1ca      	bne.n	8002de2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b084      	sub	sp, #16
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	60f8      	str	r0, [r7, #12]
 8002e5e:	60b9      	str	r1, [r7, #8]
 8002e60:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e62:	e02d      	b.n	8002ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 f88d 	bl	8002f84 <I2C_IsAcknowledgeFailed>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e02d      	b.n	8002ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7a:	d021      	beq.n	8002ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e7c:	f7fe fe68 	bl	8001b50 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d302      	bcc.n	8002e92 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d116      	bne.n	8002ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eac:	f043 0220 	orr.w	r2, r3, #32
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e007      	b.n	8002ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	f003 0304 	and.w	r3, r3, #4
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	d1ca      	bne.n	8002e64 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ee4:	e042      	b.n	8002f6c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	f003 0310 	and.w	r3, r3, #16
 8002ef0:	2b10      	cmp	r3, #16
 8002ef2:	d119      	bne.n	8002f28 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f06f 0210 	mvn.w	r2, #16
 8002efc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2220      	movs	r2, #32
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e029      	b.n	8002f7c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f28:	f7fe fe12 	bl	8001b50 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d302      	bcc.n	8002f3e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d116      	bne.n	8002f6c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2220      	movs	r2, #32
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f58:	f043 0220 	orr.w	r2, r3, #32
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e007      	b.n	8002f7c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f76:	2b40      	cmp	r3, #64	; 0x40
 8002f78:	d1b5      	bne.n	8002ee6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f9a:	d11b      	bne.n	8002fd4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fa4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc0:	f043 0204 	orr.w	r2, r3, #4
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e000      	b.n	8002fd6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
	...

08002fe4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e267      	b.n	80034c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d075      	beq.n	80030ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003002:	4b88      	ldr	r3, [pc, #544]	; (8003224 <HAL_RCC_OscConfig+0x240>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 030c 	and.w	r3, r3, #12
 800300a:	2b04      	cmp	r3, #4
 800300c:	d00c      	beq.n	8003028 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800300e:	4b85      	ldr	r3, [pc, #532]	; (8003224 <HAL_RCC_OscConfig+0x240>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003016:	2b08      	cmp	r3, #8
 8003018:	d112      	bne.n	8003040 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800301a:	4b82      	ldr	r3, [pc, #520]	; (8003224 <HAL_RCC_OscConfig+0x240>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003022:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003026:	d10b      	bne.n	8003040 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003028:	4b7e      	ldr	r3, [pc, #504]	; (8003224 <HAL_RCC_OscConfig+0x240>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d05b      	beq.n	80030ec <HAL_RCC_OscConfig+0x108>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d157      	bne.n	80030ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e242      	b.n	80034c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003048:	d106      	bne.n	8003058 <HAL_RCC_OscConfig+0x74>
 800304a:	4b76      	ldr	r3, [pc, #472]	; (8003224 <HAL_RCC_OscConfig+0x240>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a75      	ldr	r2, [pc, #468]	; (8003224 <HAL_RCC_OscConfig+0x240>)
 8003050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003054:	6013      	str	r3, [r2, #0]
 8003056:	e01d      	b.n	8003094 <HAL_RCC_OscConfig+0xb0>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003060:	d10c      	bne.n	800307c <HAL_RCC_OscConfig+0x98>
 8003062:	4b70      	ldr	r3, [pc, #448]	; (8003224 <HAL_RCC_OscConfig+0x240>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a6f      	ldr	r2, [pc, #444]	; (8003224 <HAL_RCC_OscConfig+0x240>)
 8003068:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800306c:	6013      	str	r3, [r2, #0]
 800306e:	4b6d      	ldr	r3, [pc, #436]	; (8003224 <HAL_RCC_OscConfig+0x240>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a6c      	ldr	r2, [pc, #432]	; (8003224 <HAL_RCC_OscConfig+0x240>)
 8003074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003078:	6013      	str	r3, [r2, #0]
 800307a:	e00b      	b.n	8003094 <HAL_RCC_OscConfig+0xb0>
 800307c:	4b69      	ldr	r3, [pc, #420]	; (8003224 <HAL_RCC_OscConfig+0x240>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a68      	ldr	r2, [pc, #416]	; (8003224 <HAL_RCC_OscConfig+0x240>)
 8003082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003086:	6013      	str	r3, [r2, #0]
 8003088:	4b66      	ldr	r3, [pc, #408]	; (8003224 <HAL_RCC_OscConfig+0x240>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a65      	ldr	r2, [pc, #404]	; (8003224 <HAL_RCC_OscConfig+0x240>)
 800308e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003092:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d013      	beq.n	80030c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309c:	f7fe fd58 	bl	8001b50 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030a4:	f7fe fd54 	bl	8001b50 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b64      	cmp	r3, #100	; 0x64
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e207      	b.n	80034c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b6:	4b5b      	ldr	r3, [pc, #364]	; (8003224 <HAL_RCC_OscConfig+0x240>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0f0      	beq.n	80030a4 <HAL_RCC_OscConfig+0xc0>
 80030c2:	e014      	b.n	80030ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c4:	f7fe fd44 	bl	8001b50 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030cc:	f7fe fd40 	bl	8001b50 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b64      	cmp	r3, #100	; 0x64
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e1f3      	b.n	80034c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030de:	4b51      	ldr	r3, [pc, #324]	; (8003224 <HAL_RCC_OscConfig+0x240>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1f0      	bne.n	80030cc <HAL_RCC_OscConfig+0xe8>
 80030ea:	e000      	b.n	80030ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d063      	beq.n	80031c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030fa:	4b4a      	ldr	r3, [pc, #296]	; (8003224 <HAL_RCC_OscConfig+0x240>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 030c 	and.w	r3, r3, #12
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00b      	beq.n	800311e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003106:	4b47      	ldr	r3, [pc, #284]	; (8003224 <HAL_RCC_OscConfig+0x240>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800310e:	2b08      	cmp	r3, #8
 8003110:	d11c      	bne.n	800314c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003112:	4b44      	ldr	r3, [pc, #272]	; (8003224 <HAL_RCC_OscConfig+0x240>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d116      	bne.n	800314c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800311e:	4b41      	ldr	r3, [pc, #260]	; (8003224 <HAL_RCC_OscConfig+0x240>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d005      	beq.n	8003136 <HAL_RCC_OscConfig+0x152>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d001      	beq.n	8003136 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e1c7      	b.n	80034c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003136:	4b3b      	ldr	r3, [pc, #236]	; (8003224 <HAL_RCC_OscConfig+0x240>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	4937      	ldr	r1, [pc, #220]	; (8003224 <HAL_RCC_OscConfig+0x240>)
 8003146:	4313      	orrs	r3, r2
 8003148:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800314a:	e03a      	b.n	80031c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d020      	beq.n	8003196 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003154:	4b34      	ldr	r3, [pc, #208]	; (8003228 <HAL_RCC_OscConfig+0x244>)
 8003156:	2201      	movs	r2, #1
 8003158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315a:	f7fe fcf9 	bl	8001b50 <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003160:	e008      	b.n	8003174 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003162:	f7fe fcf5 	bl	8001b50 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d901      	bls.n	8003174 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e1a8      	b.n	80034c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003174:	4b2b      	ldr	r3, [pc, #172]	; (8003224 <HAL_RCC_OscConfig+0x240>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0f0      	beq.n	8003162 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003180:	4b28      	ldr	r3, [pc, #160]	; (8003224 <HAL_RCC_OscConfig+0x240>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	4925      	ldr	r1, [pc, #148]	; (8003224 <HAL_RCC_OscConfig+0x240>)
 8003190:	4313      	orrs	r3, r2
 8003192:	600b      	str	r3, [r1, #0]
 8003194:	e015      	b.n	80031c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003196:	4b24      	ldr	r3, [pc, #144]	; (8003228 <HAL_RCC_OscConfig+0x244>)
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319c:	f7fe fcd8 	bl	8001b50 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031a4:	f7fe fcd4 	bl	8001b50 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e187      	b.n	80034c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031b6:	4b1b      	ldr	r3, [pc, #108]	; (8003224 <HAL_RCC_OscConfig+0x240>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1f0      	bne.n	80031a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0308 	and.w	r3, r3, #8
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d036      	beq.n	800323c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d016      	beq.n	8003204 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031d6:	4b15      	ldr	r3, [pc, #84]	; (800322c <HAL_RCC_OscConfig+0x248>)
 80031d8:	2201      	movs	r2, #1
 80031da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031dc:	f7fe fcb8 	bl	8001b50 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031e4:	f7fe fcb4 	bl	8001b50 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e167      	b.n	80034c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031f6:	4b0b      	ldr	r3, [pc, #44]	; (8003224 <HAL_RCC_OscConfig+0x240>)
 80031f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d0f0      	beq.n	80031e4 <HAL_RCC_OscConfig+0x200>
 8003202:	e01b      	b.n	800323c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003204:	4b09      	ldr	r3, [pc, #36]	; (800322c <HAL_RCC_OscConfig+0x248>)
 8003206:	2200      	movs	r2, #0
 8003208:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800320a:	f7fe fca1 	bl	8001b50 <HAL_GetTick>
 800320e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003210:	e00e      	b.n	8003230 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003212:	f7fe fc9d 	bl	8001b50 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d907      	bls.n	8003230 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e150      	b.n	80034c6 <HAL_RCC_OscConfig+0x4e2>
 8003224:	40023800 	.word	0x40023800
 8003228:	42470000 	.word	0x42470000
 800322c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003230:	4b88      	ldr	r3, [pc, #544]	; (8003454 <HAL_RCC_OscConfig+0x470>)
 8003232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1ea      	bne.n	8003212 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	2b00      	cmp	r3, #0
 8003246:	f000 8097 	beq.w	8003378 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800324a:	2300      	movs	r3, #0
 800324c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800324e:	4b81      	ldr	r3, [pc, #516]	; (8003454 <HAL_RCC_OscConfig+0x470>)
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10f      	bne.n	800327a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800325a:	2300      	movs	r3, #0
 800325c:	60bb      	str	r3, [r7, #8]
 800325e:	4b7d      	ldr	r3, [pc, #500]	; (8003454 <HAL_RCC_OscConfig+0x470>)
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	4a7c      	ldr	r2, [pc, #496]	; (8003454 <HAL_RCC_OscConfig+0x470>)
 8003264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003268:	6413      	str	r3, [r2, #64]	; 0x40
 800326a:	4b7a      	ldr	r3, [pc, #488]	; (8003454 <HAL_RCC_OscConfig+0x470>)
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003272:	60bb      	str	r3, [r7, #8]
 8003274:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003276:	2301      	movs	r3, #1
 8003278:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327a:	4b77      	ldr	r3, [pc, #476]	; (8003458 <HAL_RCC_OscConfig+0x474>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003282:	2b00      	cmp	r3, #0
 8003284:	d118      	bne.n	80032b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003286:	4b74      	ldr	r3, [pc, #464]	; (8003458 <HAL_RCC_OscConfig+0x474>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a73      	ldr	r2, [pc, #460]	; (8003458 <HAL_RCC_OscConfig+0x474>)
 800328c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003290:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003292:	f7fe fc5d 	bl	8001b50 <HAL_GetTick>
 8003296:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003298:	e008      	b.n	80032ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800329a:	f7fe fc59 	bl	8001b50 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e10c      	b.n	80034c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ac:	4b6a      	ldr	r3, [pc, #424]	; (8003458 <HAL_RCC_OscConfig+0x474>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0f0      	beq.n	800329a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d106      	bne.n	80032ce <HAL_RCC_OscConfig+0x2ea>
 80032c0:	4b64      	ldr	r3, [pc, #400]	; (8003454 <HAL_RCC_OscConfig+0x470>)
 80032c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c4:	4a63      	ldr	r2, [pc, #396]	; (8003454 <HAL_RCC_OscConfig+0x470>)
 80032c6:	f043 0301 	orr.w	r3, r3, #1
 80032ca:	6713      	str	r3, [r2, #112]	; 0x70
 80032cc:	e01c      	b.n	8003308 <HAL_RCC_OscConfig+0x324>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	2b05      	cmp	r3, #5
 80032d4:	d10c      	bne.n	80032f0 <HAL_RCC_OscConfig+0x30c>
 80032d6:	4b5f      	ldr	r3, [pc, #380]	; (8003454 <HAL_RCC_OscConfig+0x470>)
 80032d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032da:	4a5e      	ldr	r2, [pc, #376]	; (8003454 <HAL_RCC_OscConfig+0x470>)
 80032dc:	f043 0304 	orr.w	r3, r3, #4
 80032e0:	6713      	str	r3, [r2, #112]	; 0x70
 80032e2:	4b5c      	ldr	r3, [pc, #368]	; (8003454 <HAL_RCC_OscConfig+0x470>)
 80032e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e6:	4a5b      	ldr	r2, [pc, #364]	; (8003454 <HAL_RCC_OscConfig+0x470>)
 80032e8:	f043 0301 	orr.w	r3, r3, #1
 80032ec:	6713      	str	r3, [r2, #112]	; 0x70
 80032ee:	e00b      	b.n	8003308 <HAL_RCC_OscConfig+0x324>
 80032f0:	4b58      	ldr	r3, [pc, #352]	; (8003454 <HAL_RCC_OscConfig+0x470>)
 80032f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f4:	4a57      	ldr	r2, [pc, #348]	; (8003454 <HAL_RCC_OscConfig+0x470>)
 80032f6:	f023 0301 	bic.w	r3, r3, #1
 80032fa:	6713      	str	r3, [r2, #112]	; 0x70
 80032fc:	4b55      	ldr	r3, [pc, #340]	; (8003454 <HAL_RCC_OscConfig+0x470>)
 80032fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003300:	4a54      	ldr	r2, [pc, #336]	; (8003454 <HAL_RCC_OscConfig+0x470>)
 8003302:	f023 0304 	bic.w	r3, r3, #4
 8003306:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d015      	beq.n	800333c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003310:	f7fe fc1e 	bl	8001b50 <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003316:	e00a      	b.n	800332e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003318:	f7fe fc1a 	bl	8001b50 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	f241 3288 	movw	r2, #5000	; 0x1388
 8003326:	4293      	cmp	r3, r2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e0cb      	b.n	80034c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800332e:	4b49      	ldr	r3, [pc, #292]	; (8003454 <HAL_RCC_OscConfig+0x470>)
 8003330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d0ee      	beq.n	8003318 <HAL_RCC_OscConfig+0x334>
 800333a:	e014      	b.n	8003366 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800333c:	f7fe fc08 	bl	8001b50 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003342:	e00a      	b.n	800335a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003344:	f7fe fc04 	bl	8001b50 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003352:	4293      	cmp	r3, r2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e0b5      	b.n	80034c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800335a:	4b3e      	ldr	r3, [pc, #248]	; (8003454 <HAL_RCC_OscConfig+0x470>)
 800335c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1ee      	bne.n	8003344 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003366:	7dfb      	ldrb	r3, [r7, #23]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d105      	bne.n	8003378 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800336c:	4b39      	ldr	r3, [pc, #228]	; (8003454 <HAL_RCC_OscConfig+0x470>)
 800336e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003370:	4a38      	ldr	r2, [pc, #224]	; (8003454 <HAL_RCC_OscConfig+0x470>)
 8003372:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003376:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 80a1 	beq.w	80034c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003382:	4b34      	ldr	r3, [pc, #208]	; (8003454 <HAL_RCC_OscConfig+0x470>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f003 030c 	and.w	r3, r3, #12
 800338a:	2b08      	cmp	r3, #8
 800338c:	d05c      	beq.n	8003448 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	2b02      	cmp	r3, #2
 8003394:	d141      	bne.n	800341a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003396:	4b31      	ldr	r3, [pc, #196]	; (800345c <HAL_RCC_OscConfig+0x478>)
 8003398:	2200      	movs	r2, #0
 800339a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339c:	f7fe fbd8 	bl	8001b50 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033a4:	f7fe fbd4 	bl	8001b50 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e087      	b.n	80034c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b6:	4b27      	ldr	r3, [pc, #156]	; (8003454 <HAL_RCC_OscConfig+0x470>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1f0      	bne.n	80033a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	69da      	ldr	r2, [r3, #28]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	431a      	orrs	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	019b      	lsls	r3, r3, #6
 80033d2:	431a      	orrs	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d8:	085b      	lsrs	r3, r3, #1
 80033da:	3b01      	subs	r3, #1
 80033dc:	041b      	lsls	r3, r3, #16
 80033de:	431a      	orrs	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e4:	061b      	lsls	r3, r3, #24
 80033e6:	491b      	ldr	r1, [pc, #108]	; (8003454 <HAL_RCC_OscConfig+0x470>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033ec:	4b1b      	ldr	r3, [pc, #108]	; (800345c <HAL_RCC_OscConfig+0x478>)
 80033ee:	2201      	movs	r2, #1
 80033f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f2:	f7fe fbad 	bl	8001b50 <HAL_GetTick>
 80033f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033f8:	e008      	b.n	800340c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033fa:	f7fe fba9 	bl	8001b50 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d901      	bls.n	800340c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e05c      	b.n	80034c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800340c:	4b11      	ldr	r3, [pc, #68]	; (8003454 <HAL_RCC_OscConfig+0x470>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d0f0      	beq.n	80033fa <HAL_RCC_OscConfig+0x416>
 8003418:	e054      	b.n	80034c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800341a:	4b10      	ldr	r3, [pc, #64]	; (800345c <HAL_RCC_OscConfig+0x478>)
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003420:	f7fe fb96 	bl	8001b50 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003428:	f7fe fb92 	bl	8001b50 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e045      	b.n	80034c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800343a:	4b06      	ldr	r3, [pc, #24]	; (8003454 <HAL_RCC_OscConfig+0x470>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1f0      	bne.n	8003428 <HAL_RCC_OscConfig+0x444>
 8003446:	e03d      	b.n	80034c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d107      	bne.n	8003460 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e038      	b.n	80034c6 <HAL_RCC_OscConfig+0x4e2>
 8003454:	40023800 	.word	0x40023800
 8003458:	40007000 	.word	0x40007000
 800345c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003460:	4b1b      	ldr	r3, [pc, #108]	; (80034d0 <HAL_RCC_OscConfig+0x4ec>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d028      	beq.n	80034c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003478:	429a      	cmp	r2, r3
 800347a:	d121      	bne.n	80034c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003486:	429a      	cmp	r2, r3
 8003488:	d11a      	bne.n	80034c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003490:	4013      	ands	r3, r2
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003496:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003498:	4293      	cmp	r3, r2
 800349a:	d111      	bne.n	80034c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a6:	085b      	lsrs	r3, r3, #1
 80034a8:	3b01      	subs	r3, #1
 80034aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d107      	bne.n	80034c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034bc:	429a      	cmp	r2, r3
 80034be:	d001      	beq.n	80034c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e000      	b.n	80034c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3718      	adds	r7, #24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	40023800 	.word	0x40023800

080034d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e0cc      	b.n	8003682 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034e8:	4b68      	ldr	r3, [pc, #416]	; (800368c <HAL_RCC_ClockConfig+0x1b8>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0307 	and.w	r3, r3, #7
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d90c      	bls.n	8003510 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f6:	4b65      	ldr	r3, [pc, #404]	; (800368c <HAL_RCC_ClockConfig+0x1b8>)
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	b2d2      	uxtb	r2, r2
 80034fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034fe:	4b63      	ldr	r3, [pc, #396]	; (800368c <HAL_RCC_ClockConfig+0x1b8>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0307 	and.w	r3, r3, #7
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	429a      	cmp	r2, r3
 800350a:	d001      	beq.n	8003510 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e0b8      	b.n	8003682 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d020      	beq.n	800355e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	2b00      	cmp	r3, #0
 8003526:	d005      	beq.n	8003534 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003528:	4b59      	ldr	r3, [pc, #356]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	4a58      	ldr	r2, [pc, #352]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 800352e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003532:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0308 	and.w	r3, r3, #8
 800353c:	2b00      	cmp	r3, #0
 800353e:	d005      	beq.n	800354c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003540:	4b53      	ldr	r3, [pc, #332]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	4a52      	ldr	r2, [pc, #328]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 8003546:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800354a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800354c:	4b50      	ldr	r3, [pc, #320]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	494d      	ldr	r1, [pc, #308]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 800355a:	4313      	orrs	r3, r2
 800355c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d044      	beq.n	80035f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d107      	bne.n	8003582 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003572:	4b47      	ldr	r3, [pc, #284]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d119      	bne.n	80035b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e07f      	b.n	8003682 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2b02      	cmp	r3, #2
 8003588:	d003      	beq.n	8003592 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800358e:	2b03      	cmp	r3, #3
 8003590:	d107      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003592:	4b3f      	ldr	r3, [pc, #252]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d109      	bne.n	80035b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e06f      	b.n	8003682 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a2:	4b3b      	ldr	r3, [pc, #236]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e067      	b.n	8003682 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035b2:	4b37      	ldr	r3, [pc, #220]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f023 0203 	bic.w	r2, r3, #3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	4934      	ldr	r1, [pc, #208]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035c4:	f7fe fac4 	bl	8001b50 <HAL_GetTick>
 80035c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ca:	e00a      	b.n	80035e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035cc:	f7fe fac0 	bl	8001b50 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035da:	4293      	cmp	r3, r2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e04f      	b.n	8003682 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035e2:	4b2b      	ldr	r3, [pc, #172]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 020c 	and.w	r2, r3, #12
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d1eb      	bne.n	80035cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035f4:	4b25      	ldr	r3, [pc, #148]	; (800368c <HAL_RCC_ClockConfig+0x1b8>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d20c      	bcs.n	800361c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003602:	4b22      	ldr	r3, [pc, #136]	; (800368c <HAL_RCC_ClockConfig+0x1b8>)
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	b2d2      	uxtb	r2, r2
 8003608:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800360a:	4b20      	ldr	r3, [pc, #128]	; (800368c <HAL_RCC_ClockConfig+0x1b8>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	429a      	cmp	r2, r3
 8003616:	d001      	beq.n	800361c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e032      	b.n	8003682 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	d008      	beq.n	800363a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003628:	4b19      	ldr	r3, [pc, #100]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	4916      	ldr	r1, [pc, #88]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 8003636:	4313      	orrs	r3, r2
 8003638:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0308 	and.w	r3, r3, #8
 8003642:	2b00      	cmp	r3, #0
 8003644:	d009      	beq.n	800365a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003646:	4b12      	ldr	r3, [pc, #72]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	490e      	ldr	r1, [pc, #56]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 8003656:	4313      	orrs	r3, r2
 8003658:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800365a:	f000 f821 	bl	80036a0 <HAL_RCC_GetSysClockFreq>
 800365e:	4602      	mov	r2, r0
 8003660:	4b0b      	ldr	r3, [pc, #44]	; (8003690 <HAL_RCC_ClockConfig+0x1bc>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	091b      	lsrs	r3, r3, #4
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	490a      	ldr	r1, [pc, #40]	; (8003694 <HAL_RCC_ClockConfig+0x1c0>)
 800366c:	5ccb      	ldrb	r3, [r1, r3]
 800366e:	fa22 f303 	lsr.w	r3, r2, r3
 8003672:	4a09      	ldr	r2, [pc, #36]	; (8003698 <HAL_RCC_ClockConfig+0x1c4>)
 8003674:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003676:	4b09      	ldr	r3, [pc, #36]	; (800369c <HAL_RCC_ClockConfig+0x1c8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	f7fe fa24 	bl	8001ac8 <HAL_InitTick>

  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	40023c00 	.word	0x40023c00
 8003690:	40023800 	.word	0x40023800
 8003694:	080050fc 	.word	0x080050fc
 8003698:	20000000 	.word	0x20000000
 800369c:	20000004 	.word	0x20000004

080036a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036a4:	b094      	sub	sp, #80	; 0x50
 80036a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036a8:	2300      	movs	r3, #0
 80036aa:	647b      	str	r3, [r7, #68]	; 0x44
 80036ac:	2300      	movs	r3, #0
 80036ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036b0:	2300      	movs	r3, #0
 80036b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036b8:	4b79      	ldr	r3, [pc, #484]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f003 030c 	and.w	r3, r3, #12
 80036c0:	2b08      	cmp	r3, #8
 80036c2:	d00d      	beq.n	80036e0 <HAL_RCC_GetSysClockFreq+0x40>
 80036c4:	2b08      	cmp	r3, #8
 80036c6:	f200 80e1 	bhi.w	800388c <HAL_RCC_GetSysClockFreq+0x1ec>
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d002      	beq.n	80036d4 <HAL_RCC_GetSysClockFreq+0x34>
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	d003      	beq.n	80036da <HAL_RCC_GetSysClockFreq+0x3a>
 80036d2:	e0db      	b.n	800388c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036d4:	4b73      	ldr	r3, [pc, #460]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80036d6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80036d8:	e0db      	b.n	8003892 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036da:	4b73      	ldr	r3, [pc, #460]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80036dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036de:	e0d8      	b.n	8003892 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036e0:	4b6f      	ldr	r3, [pc, #444]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036e8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036ea:	4b6d      	ldr	r3, [pc, #436]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d063      	beq.n	80037be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036f6:	4b6a      	ldr	r3, [pc, #424]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	099b      	lsrs	r3, r3, #6
 80036fc:	2200      	movs	r2, #0
 80036fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003700:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003708:	633b      	str	r3, [r7, #48]	; 0x30
 800370a:	2300      	movs	r3, #0
 800370c:	637b      	str	r3, [r7, #52]	; 0x34
 800370e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003712:	4622      	mov	r2, r4
 8003714:	462b      	mov	r3, r5
 8003716:	f04f 0000 	mov.w	r0, #0
 800371a:	f04f 0100 	mov.w	r1, #0
 800371e:	0159      	lsls	r1, r3, #5
 8003720:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003724:	0150      	lsls	r0, r2, #5
 8003726:	4602      	mov	r2, r0
 8003728:	460b      	mov	r3, r1
 800372a:	4621      	mov	r1, r4
 800372c:	1a51      	subs	r1, r2, r1
 800372e:	6139      	str	r1, [r7, #16]
 8003730:	4629      	mov	r1, r5
 8003732:	eb63 0301 	sbc.w	r3, r3, r1
 8003736:	617b      	str	r3, [r7, #20]
 8003738:	f04f 0200 	mov.w	r2, #0
 800373c:	f04f 0300 	mov.w	r3, #0
 8003740:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003744:	4659      	mov	r1, fp
 8003746:	018b      	lsls	r3, r1, #6
 8003748:	4651      	mov	r1, sl
 800374a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800374e:	4651      	mov	r1, sl
 8003750:	018a      	lsls	r2, r1, #6
 8003752:	4651      	mov	r1, sl
 8003754:	ebb2 0801 	subs.w	r8, r2, r1
 8003758:	4659      	mov	r1, fp
 800375a:	eb63 0901 	sbc.w	r9, r3, r1
 800375e:	f04f 0200 	mov.w	r2, #0
 8003762:	f04f 0300 	mov.w	r3, #0
 8003766:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800376a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800376e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003772:	4690      	mov	r8, r2
 8003774:	4699      	mov	r9, r3
 8003776:	4623      	mov	r3, r4
 8003778:	eb18 0303 	adds.w	r3, r8, r3
 800377c:	60bb      	str	r3, [r7, #8]
 800377e:	462b      	mov	r3, r5
 8003780:	eb49 0303 	adc.w	r3, r9, r3
 8003784:	60fb      	str	r3, [r7, #12]
 8003786:	f04f 0200 	mov.w	r2, #0
 800378a:	f04f 0300 	mov.w	r3, #0
 800378e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003792:	4629      	mov	r1, r5
 8003794:	024b      	lsls	r3, r1, #9
 8003796:	4621      	mov	r1, r4
 8003798:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800379c:	4621      	mov	r1, r4
 800379e:	024a      	lsls	r2, r1, #9
 80037a0:	4610      	mov	r0, r2
 80037a2:	4619      	mov	r1, r3
 80037a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037a6:	2200      	movs	r2, #0
 80037a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80037aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037b0:	f7fd f8de 	bl	8000970 <__aeabi_uldivmod>
 80037b4:	4602      	mov	r2, r0
 80037b6:	460b      	mov	r3, r1
 80037b8:	4613      	mov	r3, r2
 80037ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037bc:	e058      	b.n	8003870 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037be:	4b38      	ldr	r3, [pc, #224]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	099b      	lsrs	r3, r3, #6
 80037c4:	2200      	movs	r2, #0
 80037c6:	4618      	mov	r0, r3
 80037c8:	4611      	mov	r1, r2
 80037ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037ce:	623b      	str	r3, [r7, #32]
 80037d0:	2300      	movs	r3, #0
 80037d2:	627b      	str	r3, [r7, #36]	; 0x24
 80037d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80037d8:	4642      	mov	r2, r8
 80037da:	464b      	mov	r3, r9
 80037dc:	f04f 0000 	mov.w	r0, #0
 80037e0:	f04f 0100 	mov.w	r1, #0
 80037e4:	0159      	lsls	r1, r3, #5
 80037e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037ea:	0150      	lsls	r0, r2, #5
 80037ec:	4602      	mov	r2, r0
 80037ee:	460b      	mov	r3, r1
 80037f0:	4641      	mov	r1, r8
 80037f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80037f6:	4649      	mov	r1, r9
 80037f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80037fc:	f04f 0200 	mov.w	r2, #0
 8003800:	f04f 0300 	mov.w	r3, #0
 8003804:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003808:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800380c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003810:	ebb2 040a 	subs.w	r4, r2, sl
 8003814:	eb63 050b 	sbc.w	r5, r3, fp
 8003818:	f04f 0200 	mov.w	r2, #0
 800381c:	f04f 0300 	mov.w	r3, #0
 8003820:	00eb      	lsls	r3, r5, #3
 8003822:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003826:	00e2      	lsls	r2, r4, #3
 8003828:	4614      	mov	r4, r2
 800382a:	461d      	mov	r5, r3
 800382c:	4643      	mov	r3, r8
 800382e:	18e3      	adds	r3, r4, r3
 8003830:	603b      	str	r3, [r7, #0]
 8003832:	464b      	mov	r3, r9
 8003834:	eb45 0303 	adc.w	r3, r5, r3
 8003838:	607b      	str	r3, [r7, #4]
 800383a:	f04f 0200 	mov.w	r2, #0
 800383e:	f04f 0300 	mov.w	r3, #0
 8003842:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003846:	4629      	mov	r1, r5
 8003848:	028b      	lsls	r3, r1, #10
 800384a:	4621      	mov	r1, r4
 800384c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003850:	4621      	mov	r1, r4
 8003852:	028a      	lsls	r2, r1, #10
 8003854:	4610      	mov	r0, r2
 8003856:	4619      	mov	r1, r3
 8003858:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800385a:	2200      	movs	r2, #0
 800385c:	61bb      	str	r3, [r7, #24]
 800385e:	61fa      	str	r2, [r7, #28]
 8003860:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003864:	f7fd f884 	bl	8000970 <__aeabi_uldivmod>
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	4613      	mov	r3, r2
 800386e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003870:	4b0b      	ldr	r3, [pc, #44]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	0c1b      	lsrs	r3, r3, #16
 8003876:	f003 0303 	and.w	r3, r3, #3
 800387a:	3301      	adds	r3, #1
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003880:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003884:	fbb2 f3f3 	udiv	r3, r2, r3
 8003888:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800388a:	e002      	b.n	8003892 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800388c:	4b05      	ldr	r3, [pc, #20]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800388e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003890:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003894:	4618      	mov	r0, r3
 8003896:	3750      	adds	r7, #80	; 0x50
 8003898:	46bd      	mov	sp, r7
 800389a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800389e:	bf00      	nop
 80038a0:	40023800 	.word	0x40023800
 80038a4:	00f42400 	.word	0x00f42400
 80038a8:	007a1200 	.word	0x007a1200

080038ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038b0:	4b03      	ldr	r3, [pc, #12]	; (80038c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80038b2:	681b      	ldr	r3, [r3, #0]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	20000000 	.word	0x20000000

080038c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038c8:	f7ff fff0 	bl	80038ac <HAL_RCC_GetHCLKFreq>
 80038cc:	4602      	mov	r2, r0
 80038ce:	4b05      	ldr	r3, [pc, #20]	; (80038e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	0a9b      	lsrs	r3, r3, #10
 80038d4:	f003 0307 	and.w	r3, r3, #7
 80038d8:	4903      	ldr	r1, [pc, #12]	; (80038e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038da:	5ccb      	ldrb	r3, [r1, r3]
 80038dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40023800 	.word	0x40023800
 80038e8:	0800510c 	.word	0x0800510c

080038ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038f0:	f7ff ffdc 	bl	80038ac <HAL_RCC_GetHCLKFreq>
 80038f4:	4602      	mov	r2, r0
 80038f6:	4b05      	ldr	r3, [pc, #20]	; (800390c <HAL_RCC_GetPCLK2Freq+0x20>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	0b5b      	lsrs	r3, r3, #13
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	4903      	ldr	r1, [pc, #12]	; (8003910 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003902:	5ccb      	ldrb	r3, [r1, r3]
 8003904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003908:	4618      	mov	r0, r3
 800390a:	bd80      	pop	{r7, pc}
 800390c:	40023800 	.word	0x40023800
 8003910:	0800510c 	.word	0x0800510c

08003914 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e041      	b.n	80039aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d106      	bne.n	8003940 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f7fd fee0 	bl	8001700 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2202      	movs	r2, #2
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	3304      	adds	r3, #4
 8003950:	4619      	mov	r1, r3
 8003952:	4610      	mov	r0, r2
 8003954:	f000 fbee 	bl	8004134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b082      	sub	sp, #8
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d101      	bne.n	80039c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e041      	b.n	8003a48 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d106      	bne.n	80039de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7fd feef 	bl	80017bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2202      	movs	r2, #2
 80039e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	3304      	adds	r3, #4
 80039ee:	4619      	mov	r1, r3
 80039f0:	4610      	mov	r0, r2
 80039f2:	f000 fb9f 	bl	8004134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d109      	bne.n	8003a74 <HAL_TIM_PWM_Start+0x24>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	bf14      	ite	ne
 8003a6c:	2301      	movne	r3, #1
 8003a6e:	2300      	moveq	r3, #0
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	e022      	b.n	8003aba <HAL_TIM_PWM_Start+0x6a>
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	d109      	bne.n	8003a8e <HAL_TIM_PWM_Start+0x3e>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	bf14      	ite	ne
 8003a86:	2301      	movne	r3, #1
 8003a88:	2300      	moveq	r3, #0
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	e015      	b.n	8003aba <HAL_TIM_PWM_Start+0x6a>
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	2b08      	cmp	r3, #8
 8003a92:	d109      	bne.n	8003aa8 <HAL_TIM_PWM_Start+0x58>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	bf14      	ite	ne
 8003aa0:	2301      	movne	r3, #1
 8003aa2:	2300      	moveq	r3, #0
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	e008      	b.n	8003aba <HAL_TIM_PWM_Start+0x6a>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	bf14      	ite	ne
 8003ab4:	2301      	movne	r3, #1
 8003ab6:	2300      	moveq	r3, #0
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e068      	b.n	8003b94 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d104      	bne.n	8003ad2 <HAL_TIM_PWM_Start+0x82>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2202      	movs	r2, #2
 8003acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ad0:	e013      	b.n	8003afa <HAL_TIM_PWM_Start+0xaa>
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	2b04      	cmp	r3, #4
 8003ad6:	d104      	bne.n	8003ae2 <HAL_TIM_PWM_Start+0x92>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2202      	movs	r2, #2
 8003adc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ae0:	e00b      	b.n	8003afa <HAL_TIM_PWM_Start+0xaa>
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	d104      	bne.n	8003af2 <HAL_TIM_PWM_Start+0xa2>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2202      	movs	r2, #2
 8003aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003af0:	e003      	b.n	8003afa <HAL_TIM_PWM_Start+0xaa>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2202      	movs	r2, #2
 8003af6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2201      	movs	r2, #1
 8003b00:	6839      	ldr	r1, [r7, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f000 ff6c 	bl	80049e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a23      	ldr	r2, [pc, #140]	; (8003b9c <HAL_TIM_PWM_Start+0x14c>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d107      	bne.n	8003b22 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a1d      	ldr	r2, [pc, #116]	; (8003b9c <HAL_TIM_PWM_Start+0x14c>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d018      	beq.n	8003b5e <HAL_TIM_PWM_Start+0x10e>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b34:	d013      	beq.n	8003b5e <HAL_TIM_PWM_Start+0x10e>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a19      	ldr	r2, [pc, #100]	; (8003ba0 <HAL_TIM_PWM_Start+0x150>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d00e      	beq.n	8003b5e <HAL_TIM_PWM_Start+0x10e>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a17      	ldr	r2, [pc, #92]	; (8003ba4 <HAL_TIM_PWM_Start+0x154>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d009      	beq.n	8003b5e <HAL_TIM_PWM_Start+0x10e>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a16      	ldr	r2, [pc, #88]	; (8003ba8 <HAL_TIM_PWM_Start+0x158>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d004      	beq.n	8003b5e <HAL_TIM_PWM_Start+0x10e>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a14      	ldr	r2, [pc, #80]	; (8003bac <HAL_TIM_PWM_Start+0x15c>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d111      	bne.n	8003b82 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f003 0307 	and.w	r3, r3, #7
 8003b68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2b06      	cmp	r3, #6
 8003b6e:	d010      	beq.n	8003b92 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f042 0201 	orr.w	r2, r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b80:	e007      	b.n	8003b92 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f042 0201 	orr.w	r2, r2, #1
 8003b90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40010000 	.word	0x40010000
 8003ba0:	40000400 	.word	0x40000400
 8003ba4:	40000800 	.word	0x40000800
 8003ba8:	40000c00 	.word	0x40000c00
 8003bac:	40014000 	.word	0x40014000

08003bb0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e041      	b.n	8003c46 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d106      	bne.n	8003bdc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f839 	bl	8003c4e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2202      	movs	r2, #2
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3304      	adds	r3, #4
 8003bec:	4619      	mov	r1, r3
 8003bee:	4610      	mov	r0, r2
 8003bf0:	f000 faa0 	bl	8004134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003c56:	bf00      	nop
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b086      	sub	sp, #24
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	60f8      	str	r0, [r7, #12]
 8003c6a:	60b9      	str	r1, [r7, #8]
 8003c6c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d101      	bne.n	8003c80 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	e088      	b.n	8003d92 <HAL_TIM_IC_ConfigChannel+0x130>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d11b      	bne.n	8003cc6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6818      	ldr	r0, [r3, #0]
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	6819      	ldr	r1, [r3, #0]
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	685a      	ldr	r2, [r3, #4]
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f000 fce7 	bl	8004670 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	699a      	ldr	r2, [r3, #24]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 020c 	bic.w	r2, r2, #12
 8003cb0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6999      	ldr	r1, [r3, #24]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	689a      	ldr	r2, [r3, #8]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	619a      	str	r2, [r3, #24]
 8003cc4:	e060      	b.n	8003d88 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b04      	cmp	r3, #4
 8003cca:	d11c      	bne.n	8003d06 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6818      	ldr	r0, [r3, #0]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	6819      	ldr	r1, [r3, #0]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	f000 fd5f 	bl	800479e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	699a      	ldr	r2, [r3, #24]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003cee:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6999      	ldr	r1, [r3, #24]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	021a      	lsls	r2, r3, #8
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	619a      	str	r2, [r3, #24]
 8003d04:	e040      	b.n	8003d88 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b08      	cmp	r3, #8
 8003d0a:	d11b      	bne.n	8003d44 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6818      	ldr	r0, [r3, #0]
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	6819      	ldr	r1, [r3, #0]
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f000 fdac 	bl	8004878 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	69da      	ldr	r2, [r3, #28]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 020c 	bic.w	r2, r2, #12
 8003d2e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	69d9      	ldr	r1, [r3, #28]
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	689a      	ldr	r2, [r3, #8]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	61da      	str	r2, [r3, #28]
 8003d42:	e021      	b.n	8003d88 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b0c      	cmp	r3, #12
 8003d48:	d11c      	bne.n	8003d84 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6818      	ldr	r0, [r3, #0]
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	6819      	ldr	r1, [r3, #0]
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	f000 fdc9 	bl	80048f0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	69da      	ldr	r2, [r3, #28]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003d6c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	69d9      	ldr	r1, [r3, #28]
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	021a      	lsls	r2, r3, #8
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	61da      	str	r2, [r3, #28]
 8003d82:	e001      	b.n	8003d88 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3718      	adds	r7, #24
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
	...

08003d9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003da8:	2300      	movs	r3, #0
 8003daa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d101      	bne.n	8003dba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003db6:	2302      	movs	r3, #2
 8003db8:	e0ae      	b.n	8003f18 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b0c      	cmp	r3, #12
 8003dc6:	f200 809f 	bhi.w	8003f08 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003dca:	a201      	add	r2, pc, #4	; (adr r2, 8003dd0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd0:	08003e05 	.word	0x08003e05
 8003dd4:	08003f09 	.word	0x08003f09
 8003dd8:	08003f09 	.word	0x08003f09
 8003ddc:	08003f09 	.word	0x08003f09
 8003de0:	08003e45 	.word	0x08003e45
 8003de4:	08003f09 	.word	0x08003f09
 8003de8:	08003f09 	.word	0x08003f09
 8003dec:	08003f09 	.word	0x08003f09
 8003df0:	08003e87 	.word	0x08003e87
 8003df4:	08003f09 	.word	0x08003f09
 8003df8:	08003f09 	.word	0x08003f09
 8003dfc:	08003f09 	.word	0x08003f09
 8003e00:	08003ec7 	.word	0x08003ec7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68b9      	ldr	r1, [r7, #8]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 fa12 	bl	8004234 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	699a      	ldr	r2, [r3, #24]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0208 	orr.w	r2, r2, #8
 8003e1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	699a      	ldr	r2, [r3, #24]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0204 	bic.w	r2, r2, #4
 8003e2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6999      	ldr	r1, [r3, #24]
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	691a      	ldr	r2, [r3, #16]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	619a      	str	r2, [r3, #24]
      break;
 8003e42:	e064      	b.n	8003f0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68b9      	ldr	r1, [r7, #8]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 fa58 	bl	8004300 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	699a      	ldr	r2, [r3, #24]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	699a      	ldr	r2, [r3, #24]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6999      	ldr	r1, [r3, #24]
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	021a      	lsls	r2, r3, #8
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	619a      	str	r2, [r3, #24]
      break;
 8003e84:	e043      	b.n	8003f0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68b9      	ldr	r1, [r7, #8]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 faa3 	bl	80043d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	69da      	ldr	r2, [r3, #28]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f042 0208 	orr.w	r2, r2, #8
 8003ea0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	69da      	ldr	r2, [r3, #28]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 0204 	bic.w	r2, r2, #4
 8003eb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	69d9      	ldr	r1, [r3, #28]
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	691a      	ldr	r2, [r3, #16]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	61da      	str	r2, [r3, #28]
      break;
 8003ec4:	e023      	b.n	8003f0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68b9      	ldr	r1, [r7, #8]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f000 faed 	bl	80044ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	69da      	ldr	r2, [r3, #28]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ee0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	69da      	ldr	r2, [r3, #28]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ef0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	69d9      	ldr	r1, [r3, #28]
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	021a      	lsls	r2, r3, #8
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	61da      	str	r2, [r3, #28]
      break;
 8003f06:	e002      	b.n	8003f0e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f16:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3718      	adds	r7, #24
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d101      	bne.n	8003f3c <HAL_TIM_ConfigClockSource+0x1c>
 8003f38:	2302      	movs	r3, #2
 8003f3a:	e0b4      	b.n	80040a6 <HAL_TIM_ConfigClockSource+0x186>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2202      	movs	r2, #2
 8003f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f74:	d03e      	beq.n	8003ff4 <HAL_TIM_ConfigClockSource+0xd4>
 8003f76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f7a:	f200 8087 	bhi.w	800408c <HAL_TIM_ConfigClockSource+0x16c>
 8003f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f82:	f000 8086 	beq.w	8004092 <HAL_TIM_ConfigClockSource+0x172>
 8003f86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f8a:	d87f      	bhi.n	800408c <HAL_TIM_ConfigClockSource+0x16c>
 8003f8c:	2b70      	cmp	r3, #112	; 0x70
 8003f8e:	d01a      	beq.n	8003fc6 <HAL_TIM_ConfigClockSource+0xa6>
 8003f90:	2b70      	cmp	r3, #112	; 0x70
 8003f92:	d87b      	bhi.n	800408c <HAL_TIM_ConfigClockSource+0x16c>
 8003f94:	2b60      	cmp	r3, #96	; 0x60
 8003f96:	d050      	beq.n	800403a <HAL_TIM_ConfigClockSource+0x11a>
 8003f98:	2b60      	cmp	r3, #96	; 0x60
 8003f9a:	d877      	bhi.n	800408c <HAL_TIM_ConfigClockSource+0x16c>
 8003f9c:	2b50      	cmp	r3, #80	; 0x50
 8003f9e:	d03c      	beq.n	800401a <HAL_TIM_ConfigClockSource+0xfa>
 8003fa0:	2b50      	cmp	r3, #80	; 0x50
 8003fa2:	d873      	bhi.n	800408c <HAL_TIM_ConfigClockSource+0x16c>
 8003fa4:	2b40      	cmp	r3, #64	; 0x40
 8003fa6:	d058      	beq.n	800405a <HAL_TIM_ConfigClockSource+0x13a>
 8003fa8:	2b40      	cmp	r3, #64	; 0x40
 8003faa:	d86f      	bhi.n	800408c <HAL_TIM_ConfigClockSource+0x16c>
 8003fac:	2b30      	cmp	r3, #48	; 0x30
 8003fae:	d064      	beq.n	800407a <HAL_TIM_ConfigClockSource+0x15a>
 8003fb0:	2b30      	cmp	r3, #48	; 0x30
 8003fb2:	d86b      	bhi.n	800408c <HAL_TIM_ConfigClockSource+0x16c>
 8003fb4:	2b20      	cmp	r3, #32
 8003fb6:	d060      	beq.n	800407a <HAL_TIM_ConfigClockSource+0x15a>
 8003fb8:	2b20      	cmp	r3, #32
 8003fba:	d867      	bhi.n	800408c <HAL_TIM_ConfigClockSource+0x16c>
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d05c      	beq.n	800407a <HAL_TIM_ConfigClockSource+0x15a>
 8003fc0:	2b10      	cmp	r3, #16
 8003fc2:	d05a      	beq.n	800407a <HAL_TIM_ConfigClockSource+0x15a>
 8003fc4:	e062      	b.n	800408c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6818      	ldr	r0, [r3, #0]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	6899      	ldr	r1, [r3, #8]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	f000 fce3 	bl	80049a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003fe8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	609a      	str	r2, [r3, #8]
      break;
 8003ff2:	e04f      	b.n	8004094 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6818      	ldr	r0, [r3, #0]
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	6899      	ldr	r1, [r3, #8]
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	f000 fccc 	bl	80049a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689a      	ldr	r2, [r3, #8]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004016:	609a      	str	r2, [r3, #8]
      break;
 8004018:	e03c      	b.n	8004094 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6818      	ldr	r0, [r3, #0]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	6859      	ldr	r1, [r3, #4]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	461a      	mov	r2, r3
 8004028:	f000 fb8a 	bl	8004740 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2150      	movs	r1, #80	; 0x50
 8004032:	4618      	mov	r0, r3
 8004034:	f000 fc99 	bl	800496a <TIM_ITRx_SetConfig>
      break;
 8004038:	e02c      	b.n	8004094 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6818      	ldr	r0, [r3, #0]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	6859      	ldr	r1, [r3, #4]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	461a      	mov	r2, r3
 8004048:	f000 fbe6 	bl	8004818 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2160      	movs	r1, #96	; 0x60
 8004052:	4618      	mov	r0, r3
 8004054:	f000 fc89 	bl	800496a <TIM_ITRx_SetConfig>
      break;
 8004058:	e01c      	b.n	8004094 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6818      	ldr	r0, [r3, #0]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	6859      	ldr	r1, [r3, #4]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	461a      	mov	r2, r3
 8004068:	f000 fb6a 	bl	8004740 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2140      	movs	r1, #64	; 0x40
 8004072:	4618      	mov	r0, r3
 8004074:	f000 fc79 	bl	800496a <TIM_ITRx_SetConfig>
      break;
 8004078:	e00c      	b.n	8004094 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4619      	mov	r1, r3
 8004084:	4610      	mov	r0, r2
 8004086:	f000 fc70 	bl	800496a <TIM_ITRx_SetConfig>
      break;
 800408a:	e003      	b.n	8004094 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	73fb      	strb	r3, [r7, #15]
      break;
 8004090:	e000      	b.n	8004094 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004092:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b082      	sub	sp, #8
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
 80040b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d101      	bne.n	80040c6 <HAL_TIM_SlaveConfigSynchro+0x18>
 80040c2:	2302      	movs	r3, #2
 80040c4:	e031      	b.n	800412a <HAL_TIM_SlaveConfigSynchro+0x7c>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2202      	movs	r2, #2
 80040d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80040d6:	6839      	ldr	r1, [r7, #0]
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 fa37 	bl	800454c <TIM_SlaveTimer_SetConfig>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d009      	beq.n	80040f8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e018      	b.n	800412a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68da      	ldr	r2, [r3, #12]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004106:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68da      	ldr	r2, [r3, #12]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004116:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
	...

08004134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a34      	ldr	r2, [pc, #208]	; (8004218 <TIM_Base_SetConfig+0xe4>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d00f      	beq.n	800416c <TIM_Base_SetConfig+0x38>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004152:	d00b      	beq.n	800416c <TIM_Base_SetConfig+0x38>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a31      	ldr	r2, [pc, #196]	; (800421c <TIM_Base_SetConfig+0xe8>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d007      	beq.n	800416c <TIM_Base_SetConfig+0x38>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a30      	ldr	r2, [pc, #192]	; (8004220 <TIM_Base_SetConfig+0xec>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d003      	beq.n	800416c <TIM_Base_SetConfig+0x38>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a2f      	ldr	r2, [pc, #188]	; (8004224 <TIM_Base_SetConfig+0xf0>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d108      	bne.n	800417e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004172:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	4313      	orrs	r3, r2
 800417c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a25      	ldr	r2, [pc, #148]	; (8004218 <TIM_Base_SetConfig+0xe4>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d01b      	beq.n	80041be <TIM_Base_SetConfig+0x8a>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800418c:	d017      	beq.n	80041be <TIM_Base_SetConfig+0x8a>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a22      	ldr	r2, [pc, #136]	; (800421c <TIM_Base_SetConfig+0xe8>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d013      	beq.n	80041be <TIM_Base_SetConfig+0x8a>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a21      	ldr	r2, [pc, #132]	; (8004220 <TIM_Base_SetConfig+0xec>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d00f      	beq.n	80041be <TIM_Base_SetConfig+0x8a>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a20      	ldr	r2, [pc, #128]	; (8004224 <TIM_Base_SetConfig+0xf0>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d00b      	beq.n	80041be <TIM_Base_SetConfig+0x8a>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a1f      	ldr	r2, [pc, #124]	; (8004228 <TIM_Base_SetConfig+0xf4>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d007      	beq.n	80041be <TIM_Base_SetConfig+0x8a>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a1e      	ldr	r2, [pc, #120]	; (800422c <TIM_Base_SetConfig+0xf8>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d003      	beq.n	80041be <TIM_Base_SetConfig+0x8a>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a1d      	ldr	r2, [pc, #116]	; (8004230 <TIM_Base_SetConfig+0xfc>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d108      	bne.n	80041d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	4313      	orrs	r3, r2
 80041dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a08      	ldr	r2, [pc, #32]	; (8004218 <TIM_Base_SetConfig+0xe4>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d103      	bne.n	8004204 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	691a      	ldr	r2, [r3, #16]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	615a      	str	r2, [r3, #20]
}
 800420a:	bf00      	nop
 800420c:	3714      	adds	r7, #20
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	40010000 	.word	0x40010000
 800421c:	40000400 	.word	0x40000400
 8004220:	40000800 	.word	0x40000800
 8004224:	40000c00 	.word	0x40000c00
 8004228:	40014000 	.word	0x40014000
 800422c:	40014400 	.word	0x40014400
 8004230:	40014800 	.word	0x40014800

08004234 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004234:	b480      	push	{r7}
 8004236:	b087      	sub	sp, #28
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	f023 0201 	bic.w	r2, r3, #1
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f023 0303 	bic.w	r3, r3, #3
 800426a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	4313      	orrs	r3, r2
 8004274:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f023 0302 	bic.w	r3, r3, #2
 800427c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	4313      	orrs	r3, r2
 8004286:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a1c      	ldr	r2, [pc, #112]	; (80042fc <TIM_OC1_SetConfig+0xc8>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d10c      	bne.n	80042aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	f023 0308 	bic.w	r3, r3, #8
 8004296:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	697a      	ldr	r2, [r7, #20]
 800429e:	4313      	orrs	r3, r2
 80042a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f023 0304 	bic.w	r3, r3, #4
 80042a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a13      	ldr	r2, [pc, #76]	; (80042fc <TIM_OC1_SetConfig+0xc8>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d111      	bne.n	80042d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	621a      	str	r2, [r3, #32]
}
 80042f0:	bf00      	nop
 80042f2:	371c      	adds	r7, #28
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	40010000 	.word	0x40010000

08004300 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004300:	b480      	push	{r7}
 8004302:	b087      	sub	sp, #28
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	f023 0210 	bic.w	r2, r3, #16
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800432e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004336:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	021b      	lsls	r3, r3, #8
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	4313      	orrs	r3, r2
 8004342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	f023 0320 	bic.w	r3, r3, #32
 800434a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	011b      	lsls	r3, r3, #4
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	4313      	orrs	r3, r2
 8004356:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a1e      	ldr	r2, [pc, #120]	; (80043d4 <TIM_OC2_SetConfig+0xd4>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d10d      	bne.n	800437c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004366:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	011b      	lsls	r3, r3, #4
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	4313      	orrs	r3, r2
 8004372:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800437a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a15      	ldr	r2, [pc, #84]	; (80043d4 <TIM_OC2_SetConfig+0xd4>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d113      	bne.n	80043ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800438a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004392:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	4313      	orrs	r3, r2
 800439e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	621a      	str	r2, [r3, #32]
}
 80043c6:	bf00      	nop
 80043c8:	371c      	adds	r7, #28
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	40010000 	.word	0x40010000

080043d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043d8:	b480      	push	{r7}
 80043da:	b087      	sub	sp, #28
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f023 0303 	bic.w	r3, r3, #3
 800440e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	4313      	orrs	r3, r2
 8004418:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004420:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	021b      	lsls	r3, r3, #8
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	4313      	orrs	r3, r2
 800442c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a1d      	ldr	r2, [pc, #116]	; (80044a8 <TIM_OC3_SetConfig+0xd0>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d10d      	bne.n	8004452 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800443c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	021b      	lsls	r3, r3, #8
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	4313      	orrs	r3, r2
 8004448:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004450:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a14      	ldr	r2, [pc, #80]	; (80044a8 <TIM_OC3_SetConfig+0xd0>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d113      	bne.n	8004482 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004460:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004468:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	011b      	lsls	r3, r3, #4
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	4313      	orrs	r3, r2
 8004474:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	693a      	ldr	r2, [r7, #16]
 800447e:	4313      	orrs	r3, r2
 8004480:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	685a      	ldr	r2, [r3, #4]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	621a      	str	r2, [r3, #32]
}
 800449c:	bf00      	nop
 800449e:	371c      	adds	r7, #28
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr
 80044a8:	40010000 	.word	0x40010000

080044ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	021b      	lsls	r3, r3, #8
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	031b      	lsls	r3, r3, #12
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	4313      	orrs	r3, r2
 8004502:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a10      	ldr	r2, [pc, #64]	; (8004548 <TIM_OC4_SetConfig+0x9c>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d109      	bne.n	8004520 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004512:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	019b      	lsls	r3, r3, #6
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	4313      	orrs	r3, r2
 800451e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	621a      	str	r2, [r3, #32]
}
 800453a:	bf00      	nop
 800453c:	371c      	adds	r7, #28
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	40010000 	.word	0x40010000

0800454c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004556:	2300      	movs	r3, #0
 8004558:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004568:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	4313      	orrs	r3, r2
 8004572:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	f023 0307 	bic.w	r3, r3, #7
 800457a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	4313      	orrs	r3, r2
 8004584:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	2b70      	cmp	r3, #112	; 0x70
 8004594:	d01a      	beq.n	80045cc <TIM_SlaveTimer_SetConfig+0x80>
 8004596:	2b70      	cmp	r3, #112	; 0x70
 8004598:	d860      	bhi.n	800465c <TIM_SlaveTimer_SetConfig+0x110>
 800459a:	2b60      	cmp	r3, #96	; 0x60
 800459c:	d054      	beq.n	8004648 <TIM_SlaveTimer_SetConfig+0xfc>
 800459e:	2b60      	cmp	r3, #96	; 0x60
 80045a0:	d85c      	bhi.n	800465c <TIM_SlaveTimer_SetConfig+0x110>
 80045a2:	2b50      	cmp	r3, #80	; 0x50
 80045a4:	d046      	beq.n	8004634 <TIM_SlaveTimer_SetConfig+0xe8>
 80045a6:	2b50      	cmp	r3, #80	; 0x50
 80045a8:	d858      	bhi.n	800465c <TIM_SlaveTimer_SetConfig+0x110>
 80045aa:	2b40      	cmp	r3, #64	; 0x40
 80045ac:	d019      	beq.n	80045e2 <TIM_SlaveTimer_SetConfig+0x96>
 80045ae:	2b40      	cmp	r3, #64	; 0x40
 80045b0:	d854      	bhi.n	800465c <TIM_SlaveTimer_SetConfig+0x110>
 80045b2:	2b30      	cmp	r3, #48	; 0x30
 80045b4:	d055      	beq.n	8004662 <TIM_SlaveTimer_SetConfig+0x116>
 80045b6:	2b30      	cmp	r3, #48	; 0x30
 80045b8:	d850      	bhi.n	800465c <TIM_SlaveTimer_SetConfig+0x110>
 80045ba:	2b20      	cmp	r3, #32
 80045bc:	d051      	beq.n	8004662 <TIM_SlaveTimer_SetConfig+0x116>
 80045be:	2b20      	cmp	r3, #32
 80045c0:	d84c      	bhi.n	800465c <TIM_SlaveTimer_SetConfig+0x110>
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d04d      	beq.n	8004662 <TIM_SlaveTimer_SetConfig+0x116>
 80045c6:	2b10      	cmp	r3, #16
 80045c8:	d04b      	beq.n	8004662 <TIM_SlaveTimer_SetConfig+0x116>
 80045ca:	e047      	b.n	800465c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6818      	ldr	r0, [r3, #0]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	68d9      	ldr	r1, [r3, #12]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	689a      	ldr	r2, [r3, #8]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	f000 f9e0 	bl	80049a0 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80045e0:	e040      	b.n	8004664 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2b05      	cmp	r3, #5
 80045e8:	d101      	bne.n	80045ee <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e03b      	b.n	8004666 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6a1a      	ldr	r2, [r3, #32]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 0201 	bic.w	r2, r2, #1
 8004604:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004614:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	011b      	lsls	r3, r3, #4
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	4313      	orrs	r3, r2
 8004620:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	621a      	str	r2, [r3, #32]
      break;
 8004632:	e017      	b.n	8004664 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6818      	ldr	r0, [r3, #0]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	6899      	ldr	r1, [r3, #8]
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	461a      	mov	r2, r3
 8004642:	f000 f87d 	bl	8004740 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004646:	e00d      	b.n	8004664 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6818      	ldr	r0, [r3, #0]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	6899      	ldr	r1, [r3, #8]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	461a      	mov	r2, r3
 8004656:	f000 f8df 	bl	8004818 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800465a:	e003      	b.n	8004664 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	75fb      	strb	r3, [r7, #23]
      break;
 8004660:	e000      	b.n	8004664 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004662:	bf00      	nop
  }

  return status;
 8004664:	7dfb      	ldrb	r3, [r7, #23]
}
 8004666:	4618      	mov	r0, r3
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
	...

08004670 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004670:	b480      	push	{r7}
 8004672:	b087      	sub	sp, #28
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
 800467c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	f023 0201 	bic.w	r2, r3, #1
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	4a24      	ldr	r2, [pc, #144]	; (800472c <TIM_TI1_SetConfig+0xbc>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d013      	beq.n	80046c6 <TIM_TI1_SetConfig+0x56>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046a4:	d00f      	beq.n	80046c6 <TIM_TI1_SetConfig+0x56>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	4a21      	ldr	r2, [pc, #132]	; (8004730 <TIM_TI1_SetConfig+0xc0>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d00b      	beq.n	80046c6 <TIM_TI1_SetConfig+0x56>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	4a20      	ldr	r2, [pc, #128]	; (8004734 <TIM_TI1_SetConfig+0xc4>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d007      	beq.n	80046c6 <TIM_TI1_SetConfig+0x56>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	4a1f      	ldr	r2, [pc, #124]	; (8004738 <TIM_TI1_SetConfig+0xc8>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d003      	beq.n	80046c6 <TIM_TI1_SetConfig+0x56>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	4a1e      	ldr	r2, [pc, #120]	; (800473c <TIM_TI1_SetConfig+0xcc>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d101      	bne.n	80046ca <TIM_TI1_SetConfig+0x5a>
 80046c6:	2301      	movs	r3, #1
 80046c8:	e000      	b.n	80046cc <TIM_TI1_SetConfig+0x5c>
 80046ca:	2300      	movs	r3, #0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d008      	beq.n	80046e2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f023 0303 	bic.w	r3, r3, #3
 80046d6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4313      	orrs	r3, r2
 80046de:	617b      	str	r3, [r7, #20]
 80046e0:	e003      	b.n	80046ea <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	f043 0301 	orr.w	r3, r3, #1
 80046e8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	011b      	lsls	r3, r3, #4
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	f023 030a 	bic.w	r3, r3, #10
 8004704:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	f003 030a 	and.w	r3, r3, #10
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	4313      	orrs	r3, r2
 8004710:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	621a      	str	r2, [r3, #32]
}
 800471e:	bf00      	nop
 8004720:	371c      	adds	r7, #28
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	40010000 	.word	0x40010000
 8004730:	40000400 	.word	0x40000400
 8004734:	40000800 	.word	0x40000800
 8004738:	40000c00 	.word	0x40000c00
 800473c:	40014000 	.word	0x40014000

08004740 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004740:	b480      	push	{r7}
 8004742:	b087      	sub	sp, #28
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	f023 0201 	bic.w	r2, r3, #1
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800476a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	011b      	lsls	r3, r3, #4
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	4313      	orrs	r3, r2
 8004774:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f023 030a 	bic.w	r3, r3, #10
 800477c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	4313      	orrs	r3, r2
 8004784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	621a      	str	r2, [r3, #32]
}
 8004792:	bf00      	nop
 8004794:	371c      	adds	r7, #28
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr

0800479e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800479e:	b480      	push	{r7}
 80047a0:	b087      	sub	sp, #28
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	60f8      	str	r0, [r7, #12]
 80047a6:	60b9      	str	r1, [r7, #8]
 80047a8:	607a      	str	r2, [r7, #4]
 80047aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	f023 0210 	bic.w	r2, r3, #16
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	021b      	lsls	r3, r3, #8
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	031b      	lsls	r3, r3, #12
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047f0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	011b      	lsls	r3, r3, #4
 80047f6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	621a      	str	r2, [r3, #32]
}
 800480c:	bf00      	nop
 800480e:	371c      	adds	r7, #28
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004818:	b480      	push	{r7}
 800481a:	b087      	sub	sp, #28
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	f023 0210 	bic.w	r2, r3, #16
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004842:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	031b      	lsls	r3, r3, #12
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	4313      	orrs	r3, r2
 800484c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004854:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	011b      	lsls	r3, r3, #4
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	4313      	orrs	r3, r2
 800485e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	621a      	str	r2, [r3, #32]
}
 800486c:	bf00      	nop
 800486e:	371c      	adds	r7, #28
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004878:	b480      	push	{r7}
 800487a:	b087      	sub	sp, #28
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
 8004884:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	69db      	ldr	r3, [r3, #28]
 8004896:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	f023 0303 	bic.w	r3, r3, #3
 80048a4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	011b      	lsls	r3, r3, #4
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	4313      	orrs	r3, r2
 80048c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80048c8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	021b      	lsls	r3, r3, #8
 80048ce:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	621a      	str	r2, [r3, #32]
}
 80048e4:	bf00      	nop
 80048e6:	371c      	adds	r7, #28
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b087      	sub	sp, #28
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
 80048fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800491c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	021b      	lsls	r3, r3, #8
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	4313      	orrs	r3, r2
 8004926:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800492e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	031b      	lsls	r3, r3, #12
 8004934:	b29b      	uxth	r3, r3
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	4313      	orrs	r3, r2
 800493a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004942:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	031b      	lsls	r3, r3, #12
 8004948:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	4313      	orrs	r3, r2
 8004950:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	621a      	str	r2, [r3, #32]
}
 800495e:	bf00      	nop
 8004960:	371c      	adds	r7, #28
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800496a:	b480      	push	{r7}
 800496c:	b085      	sub	sp, #20
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
 8004972:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004980:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	4313      	orrs	r3, r2
 8004988:	f043 0307 	orr.w	r3, r3, #7
 800498c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	609a      	str	r2, [r3, #8]
}
 8004994:	bf00      	nop
 8004996:	3714      	adds	r7, #20
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b087      	sub	sp, #28
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
 80049ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	021a      	lsls	r2, r3, #8
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	431a      	orrs	r2, r3
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	609a      	str	r2, [r3, #8]
}
 80049d4:	bf00      	nop
 80049d6:	371c      	adds	r7, #28
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b087      	sub	sp, #28
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	f003 031f 	and.w	r3, r3, #31
 80049f2:	2201      	movs	r2, #1
 80049f4:	fa02 f303 	lsl.w	r3, r2, r3
 80049f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6a1a      	ldr	r2, [r3, #32]
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	43db      	mvns	r3, r3
 8004a02:	401a      	ands	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6a1a      	ldr	r2, [r3, #32]
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	f003 031f 	and.w	r3, r3, #31
 8004a12:	6879      	ldr	r1, [r7, #4]
 8004a14:	fa01 f303 	lsl.w	r3, r1, r3
 8004a18:	431a      	orrs	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	621a      	str	r2, [r3, #32]
}
 8004a1e:	bf00      	nop
 8004a20:	371c      	adds	r7, #28
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
	...

08004a2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d101      	bne.n	8004a44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a40:	2302      	movs	r3, #2
 8004a42:	e050      	b.n	8004ae6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a1c      	ldr	r2, [pc, #112]	; (8004af4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d018      	beq.n	8004aba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a90:	d013      	beq.n	8004aba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a18      	ldr	r2, [pc, #96]	; (8004af8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d00e      	beq.n	8004aba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a16      	ldr	r2, [pc, #88]	; (8004afc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d009      	beq.n	8004aba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a15      	ldr	r2, [pc, #84]	; (8004b00 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d004      	beq.n	8004aba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a13      	ldr	r2, [pc, #76]	; (8004b04 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d10c      	bne.n	8004ad4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ac0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68ba      	ldr	r2, [r7, #8]
 8004ad2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3714      	adds	r7, #20
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	40010000 	.word	0x40010000
 8004af8:	40000400 	.word	0x40000400
 8004afc:	40000800 	.word	0x40000800
 8004b00:	40000c00 	.word	0x40000c00
 8004b04:	40014000 	.word	0x40014000

08004b08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e03f      	b.n	8004b9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d106      	bne.n	8004b34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7fc fefa 	bl	8001928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2224      	movs	r2, #36	; 0x24
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68da      	ldr	r2, [r3, #12]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 f829 	bl	8004ba4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	691a      	ldr	r2, [r3, #16]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	695a      	ldr	r2, [r3, #20]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68da      	ldr	r2, [r3, #12]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2220      	movs	r2, #32
 8004b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
	...

08004ba4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ba4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ba8:	b0c0      	sub	sp, #256	; 0x100
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc0:	68d9      	ldr	r1, [r3, #12]
 8004bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	ea40 0301 	orr.w	r3, r0, r1
 8004bcc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd2:	689a      	ldr	r2, [r3, #8]
 8004bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	431a      	orrs	r2, r3
 8004be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004bfc:	f021 010c 	bic.w	r1, r1, #12
 8004c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c0a:	430b      	orrs	r3, r1
 8004c0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c1e:	6999      	ldr	r1, [r3, #24]
 8004c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	ea40 0301 	orr.w	r3, r0, r1
 8004c2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	4b8f      	ldr	r3, [pc, #572]	; (8004e70 <UART_SetConfig+0x2cc>)
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d005      	beq.n	8004c44 <UART_SetConfig+0xa0>
 8004c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	4b8d      	ldr	r3, [pc, #564]	; (8004e74 <UART_SetConfig+0x2d0>)
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d104      	bne.n	8004c4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c44:	f7fe fe52 	bl	80038ec <HAL_RCC_GetPCLK2Freq>
 8004c48:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004c4c:	e003      	b.n	8004c56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c4e:	f7fe fe39 	bl	80038c4 <HAL_RCC_GetPCLK1Freq>
 8004c52:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c5a:	69db      	ldr	r3, [r3, #28]
 8004c5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c60:	f040 810c 	bne.w	8004e7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c6e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004c72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004c76:	4622      	mov	r2, r4
 8004c78:	462b      	mov	r3, r5
 8004c7a:	1891      	adds	r1, r2, r2
 8004c7c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c7e:	415b      	adcs	r3, r3
 8004c80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004c86:	4621      	mov	r1, r4
 8004c88:	eb12 0801 	adds.w	r8, r2, r1
 8004c8c:	4629      	mov	r1, r5
 8004c8e:	eb43 0901 	adc.w	r9, r3, r1
 8004c92:	f04f 0200 	mov.w	r2, #0
 8004c96:	f04f 0300 	mov.w	r3, #0
 8004c9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ca2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ca6:	4690      	mov	r8, r2
 8004ca8:	4699      	mov	r9, r3
 8004caa:	4623      	mov	r3, r4
 8004cac:	eb18 0303 	adds.w	r3, r8, r3
 8004cb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004cb4:	462b      	mov	r3, r5
 8004cb6:	eb49 0303 	adc.w	r3, r9, r3
 8004cba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004cca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004cce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	18db      	adds	r3, r3, r3
 8004cd6:	653b      	str	r3, [r7, #80]	; 0x50
 8004cd8:	4613      	mov	r3, r2
 8004cda:	eb42 0303 	adc.w	r3, r2, r3
 8004cde:	657b      	str	r3, [r7, #84]	; 0x54
 8004ce0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ce4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004ce8:	f7fb fe42 	bl	8000970 <__aeabi_uldivmod>
 8004cec:	4602      	mov	r2, r0
 8004cee:	460b      	mov	r3, r1
 8004cf0:	4b61      	ldr	r3, [pc, #388]	; (8004e78 <UART_SetConfig+0x2d4>)
 8004cf2:	fba3 2302 	umull	r2, r3, r3, r2
 8004cf6:	095b      	lsrs	r3, r3, #5
 8004cf8:	011c      	lsls	r4, r3, #4
 8004cfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d04:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004d08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004d0c:	4642      	mov	r2, r8
 8004d0e:	464b      	mov	r3, r9
 8004d10:	1891      	adds	r1, r2, r2
 8004d12:	64b9      	str	r1, [r7, #72]	; 0x48
 8004d14:	415b      	adcs	r3, r3
 8004d16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004d1c:	4641      	mov	r1, r8
 8004d1e:	eb12 0a01 	adds.w	sl, r2, r1
 8004d22:	4649      	mov	r1, r9
 8004d24:	eb43 0b01 	adc.w	fp, r3, r1
 8004d28:	f04f 0200 	mov.w	r2, #0
 8004d2c:	f04f 0300 	mov.w	r3, #0
 8004d30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d3c:	4692      	mov	sl, r2
 8004d3e:	469b      	mov	fp, r3
 8004d40:	4643      	mov	r3, r8
 8004d42:	eb1a 0303 	adds.w	r3, sl, r3
 8004d46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d4a:	464b      	mov	r3, r9
 8004d4c:	eb4b 0303 	adc.w	r3, fp, r3
 8004d50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d60:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004d64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004d68:	460b      	mov	r3, r1
 8004d6a:	18db      	adds	r3, r3, r3
 8004d6c:	643b      	str	r3, [r7, #64]	; 0x40
 8004d6e:	4613      	mov	r3, r2
 8004d70:	eb42 0303 	adc.w	r3, r2, r3
 8004d74:	647b      	str	r3, [r7, #68]	; 0x44
 8004d76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004d7e:	f7fb fdf7 	bl	8000970 <__aeabi_uldivmod>
 8004d82:	4602      	mov	r2, r0
 8004d84:	460b      	mov	r3, r1
 8004d86:	4611      	mov	r1, r2
 8004d88:	4b3b      	ldr	r3, [pc, #236]	; (8004e78 <UART_SetConfig+0x2d4>)
 8004d8a:	fba3 2301 	umull	r2, r3, r3, r1
 8004d8e:	095b      	lsrs	r3, r3, #5
 8004d90:	2264      	movs	r2, #100	; 0x64
 8004d92:	fb02 f303 	mul.w	r3, r2, r3
 8004d96:	1acb      	subs	r3, r1, r3
 8004d98:	00db      	lsls	r3, r3, #3
 8004d9a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004d9e:	4b36      	ldr	r3, [pc, #216]	; (8004e78 <UART_SetConfig+0x2d4>)
 8004da0:	fba3 2302 	umull	r2, r3, r3, r2
 8004da4:	095b      	lsrs	r3, r3, #5
 8004da6:	005b      	lsls	r3, r3, #1
 8004da8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004dac:	441c      	add	r4, r3
 8004dae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004db2:	2200      	movs	r2, #0
 8004db4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004db8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004dbc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004dc0:	4642      	mov	r2, r8
 8004dc2:	464b      	mov	r3, r9
 8004dc4:	1891      	adds	r1, r2, r2
 8004dc6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004dc8:	415b      	adcs	r3, r3
 8004dca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dcc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004dd0:	4641      	mov	r1, r8
 8004dd2:	1851      	adds	r1, r2, r1
 8004dd4:	6339      	str	r1, [r7, #48]	; 0x30
 8004dd6:	4649      	mov	r1, r9
 8004dd8:	414b      	adcs	r3, r1
 8004dda:	637b      	str	r3, [r7, #52]	; 0x34
 8004ddc:	f04f 0200 	mov.w	r2, #0
 8004de0:	f04f 0300 	mov.w	r3, #0
 8004de4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004de8:	4659      	mov	r1, fp
 8004dea:	00cb      	lsls	r3, r1, #3
 8004dec:	4651      	mov	r1, sl
 8004dee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004df2:	4651      	mov	r1, sl
 8004df4:	00ca      	lsls	r2, r1, #3
 8004df6:	4610      	mov	r0, r2
 8004df8:	4619      	mov	r1, r3
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	4642      	mov	r2, r8
 8004dfe:	189b      	adds	r3, r3, r2
 8004e00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e04:	464b      	mov	r3, r9
 8004e06:	460a      	mov	r2, r1
 8004e08:	eb42 0303 	adc.w	r3, r2, r3
 8004e0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004e1c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004e20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004e24:	460b      	mov	r3, r1
 8004e26:	18db      	adds	r3, r3, r3
 8004e28:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	eb42 0303 	adc.w	r3, r2, r3
 8004e30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004e3a:	f7fb fd99 	bl	8000970 <__aeabi_uldivmod>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	460b      	mov	r3, r1
 8004e42:	4b0d      	ldr	r3, [pc, #52]	; (8004e78 <UART_SetConfig+0x2d4>)
 8004e44:	fba3 1302 	umull	r1, r3, r3, r2
 8004e48:	095b      	lsrs	r3, r3, #5
 8004e4a:	2164      	movs	r1, #100	; 0x64
 8004e4c:	fb01 f303 	mul.w	r3, r1, r3
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	00db      	lsls	r3, r3, #3
 8004e54:	3332      	adds	r3, #50	; 0x32
 8004e56:	4a08      	ldr	r2, [pc, #32]	; (8004e78 <UART_SetConfig+0x2d4>)
 8004e58:	fba2 2303 	umull	r2, r3, r2, r3
 8004e5c:	095b      	lsrs	r3, r3, #5
 8004e5e:	f003 0207 	and.w	r2, r3, #7
 8004e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4422      	add	r2, r4
 8004e6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e6c:	e105      	b.n	800507a <UART_SetConfig+0x4d6>
 8004e6e:	bf00      	nop
 8004e70:	40011000 	.word	0x40011000
 8004e74:	40011400 	.word	0x40011400
 8004e78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e80:	2200      	movs	r2, #0
 8004e82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004e86:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004e8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004e8e:	4642      	mov	r2, r8
 8004e90:	464b      	mov	r3, r9
 8004e92:	1891      	adds	r1, r2, r2
 8004e94:	6239      	str	r1, [r7, #32]
 8004e96:	415b      	adcs	r3, r3
 8004e98:	627b      	str	r3, [r7, #36]	; 0x24
 8004e9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e9e:	4641      	mov	r1, r8
 8004ea0:	1854      	adds	r4, r2, r1
 8004ea2:	4649      	mov	r1, r9
 8004ea4:	eb43 0501 	adc.w	r5, r3, r1
 8004ea8:	f04f 0200 	mov.w	r2, #0
 8004eac:	f04f 0300 	mov.w	r3, #0
 8004eb0:	00eb      	lsls	r3, r5, #3
 8004eb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004eb6:	00e2      	lsls	r2, r4, #3
 8004eb8:	4614      	mov	r4, r2
 8004eba:	461d      	mov	r5, r3
 8004ebc:	4643      	mov	r3, r8
 8004ebe:	18e3      	adds	r3, r4, r3
 8004ec0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ec4:	464b      	mov	r3, r9
 8004ec6:	eb45 0303 	adc.w	r3, r5, r3
 8004eca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004eda:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ede:	f04f 0200 	mov.w	r2, #0
 8004ee2:	f04f 0300 	mov.w	r3, #0
 8004ee6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004eea:	4629      	mov	r1, r5
 8004eec:	008b      	lsls	r3, r1, #2
 8004eee:	4621      	mov	r1, r4
 8004ef0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ef4:	4621      	mov	r1, r4
 8004ef6:	008a      	lsls	r2, r1, #2
 8004ef8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004efc:	f7fb fd38 	bl	8000970 <__aeabi_uldivmod>
 8004f00:	4602      	mov	r2, r0
 8004f02:	460b      	mov	r3, r1
 8004f04:	4b60      	ldr	r3, [pc, #384]	; (8005088 <UART_SetConfig+0x4e4>)
 8004f06:	fba3 2302 	umull	r2, r3, r3, r2
 8004f0a:	095b      	lsrs	r3, r3, #5
 8004f0c:	011c      	lsls	r4, r3, #4
 8004f0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f12:	2200      	movs	r2, #0
 8004f14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004f1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004f20:	4642      	mov	r2, r8
 8004f22:	464b      	mov	r3, r9
 8004f24:	1891      	adds	r1, r2, r2
 8004f26:	61b9      	str	r1, [r7, #24]
 8004f28:	415b      	adcs	r3, r3
 8004f2a:	61fb      	str	r3, [r7, #28]
 8004f2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f30:	4641      	mov	r1, r8
 8004f32:	1851      	adds	r1, r2, r1
 8004f34:	6139      	str	r1, [r7, #16]
 8004f36:	4649      	mov	r1, r9
 8004f38:	414b      	adcs	r3, r1
 8004f3a:	617b      	str	r3, [r7, #20]
 8004f3c:	f04f 0200 	mov.w	r2, #0
 8004f40:	f04f 0300 	mov.w	r3, #0
 8004f44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f48:	4659      	mov	r1, fp
 8004f4a:	00cb      	lsls	r3, r1, #3
 8004f4c:	4651      	mov	r1, sl
 8004f4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f52:	4651      	mov	r1, sl
 8004f54:	00ca      	lsls	r2, r1, #3
 8004f56:	4610      	mov	r0, r2
 8004f58:	4619      	mov	r1, r3
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	4642      	mov	r2, r8
 8004f5e:	189b      	adds	r3, r3, r2
 8004f60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f64:	464b      	mov	r3, r9
 8004f66:	460a      	mov	r2, r1
 8004f68:	eb42 0303 	adc.w	r3, r2, r3
 8004f6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004f7c:	f04f 0200 	mov.w	r2, #0
 8004f80:	f04f 0300 	mov.w	r3, #0
 8004f84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004f88:	4649      	mov	r1, r9
 8004f8a:	008b      	lsls	r3, r1, #2
 8004f8c:	4641      	mov	r1, r8
 8004f8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f92:	4641      	mov	r1, r8
 8004f94:	008a      	lsls	r2, r1, #2
 8004f96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004f9a:	f7fb fce9 	bl	8000970 <__aeabi_uldivmod>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	4b39      	ldr	r3, [pc, #228]	; (8005088 <UART_SetConfig+0x4e4>)
 8004fa4:	fba3 1302 	umull	r1, r3, r3, r2
 8004fa8:	095b      	lsrs	r3, r3, #5
 8004faa:	2164      	movs	r1, #100	; 0x64
 8004fac:	fb01 f303 	mul.w	r3, r1, r3
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	011b      	lsls	r3, r3, #4
 8004fb4:	3332      	adds	r3, #50	; 0x32
 8004fb6:	4a34      	ldr	r2, [pc, #208]	; (8005088 <UART_SetConfig+0x4e4>)
 8004fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fbc:	095b      	lsrs	r3, r3, #5
 8004fbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fc2:	441c      	add	r4, r3
 8004fc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fc8:	2200      	movs	r2, #0
 8004fca:	673b      	str	r3, [r7, #112]	; 0x70
 8004fcc:	677a      	str	r2, [r7, #116]	; 0x74
 8004fce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004fd2:	4642      	mov	r2, r8
 8004fd4:	464b      	mov	r3, r9
 8004fd6:	1891      	adds	r1, r2, r2
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	415b      	adcs	r3, r3
 8004fdc:	60fb      	str	r3, [r7, #12]
 8004fde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fe2:	4641      	mov	r1, r8
 8004fe4:	1851      	adds	r1, r2, r1
 8004fe6:	6039      	str	r1, [r7, #0]
 8004fe8:	4649      	mov	r1, r9
 8004fea:	414b      	adcs	r3, r1
 8004fec:	607b      	str	r3, [r7, #4]
 8004fee:	f04f 0200 	mov.w	r2, #0
 8004ff2:	f04f 0300 	mov.w	r3, #0
 8004ff6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ffa:	4659      	mov	r1, fp
 8004ffc:	00cb      	lsls	r3, r1, #3
 8004ffe:	4651      	mov	r1, sl
 8005000:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005004:	4651      	mov	r1, sl
 8005006:	00ca      	lsls	r2, r1, #3
 8005008:	4610      	mov	r0, r2
 800500a:	4619      	mov	r1, r3
 800500c:	4603      	mov	r3, r0
 800500e:	4642      	mov	r2, r8
 8005010:	189b      	adds	r3, r3, r2
 8005012:	66bb      	str	r3, [r7, #104]	; 0x68
 8005014:	464b      	mov	r3, r9
 8005016:	460a      	mov	r2, r1
 8005018:	eb42 0303 	adc.w	r3, r2, r3
 800501c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800501e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	663b      	str	r3, [r7, #96]	; 0x60
 8005028:	667a      	str	r2, [r7, #100]	; 0x64
 800502a:	f04f 0200 	mov.w	r2, #0
 800502e:	f04f 0300 	mov.w	r3, #0
 8005032:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005036:	4649      	mov	r1, r9
 8005038:	008b      	lsls	r3, r1, #2
 800503a:	4641      	mov	r1, r8
 800503c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005040:	4641      	mov	r1, r8
 8005042:	008a      	lsls	r2, r1, #2
 8005044:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005048:	f7fb fc92 	bl	8000970 <__aeabi_uldivmod>
 800504c:	4602      	mov	r2, r0
 800504e:	460b      	mov	r3, r1
 8005050:	4b0d      	ldr	r3, [pc, #52]	; (8005088 <UART_SetConfig+0x4e4>)
 8005052:	fba3 1302 	umull	r1, r3, r3, r2
 8005056:	095b      	lsrs	r3, r3, #5
 8005058:	2164      	movs	r1, #100	; 0x64
 800505a:	fb01 f303 	mul.w	r3, r1, r3
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	011b      	lsls	r3, r3, #4
 8005062:	3332      	adds	r3, #50	; 0x32
 8005064:	4a08      	ldr	r2, [pc, #32]	; (8005088 <UART_SetConfig+0x4e4>)
 8005066:	fba2 2303 	umull	r2, r3, r2, r3
 800506a:	095b      	lsrs	r3, r3, #5
 800506c:	f003 020f 	and.w	r2, r3, #15
 8005070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4422      	add	r2, r4
 8005078:	609a      	str	r2, [r3, #8]
}
 800507a:	bf00      	nop
 800507c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005080:	46bd      	mov	sp, r7
 8005082:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005086:	bf00      	nop
 8005088:	51eb851f 	.word	0x51eb851f

0800508c <__libc_init_array>:
 800508c:	b570      	push	{r4, r5, r6, lr}
 800508e:	4d0d      	ldr	r5, [pc, #52]	; (80050c4 <__libc_init_array+0x38>)
 8005090:	4c0d      	ldr	r4, [pc, #52]	; (80050c8 <__libc_init_array+0x3c>)
 8005092:	1b64      	subs	r4, r4, r5
 8005094:	10a4      	asrs	r4, r4, #2
 8005096:	2600      	movs	r6, #0
 8005098:	42a6      	cmp	r6, r4
 800509a:	d109      	bne.n	80050b0 <__libc_init_array+0x24>
 800509c:	4d0b      	ldr	r5, [pc, #44]	; (80050cc <__libc_init_array+0x40>)
 800509e:	4c0c      	ldr	r4, [pc, #48]	; (80050d0 <__libc_init_array+0x44>)
 80050a0:	f000 f820 	bl	80050e4 <_init>
 80050a4:	1b64      	subs	r4, r4, r5
 80050a6:	10a4      	asrs	r4, r4, #2
 80050a8:	2600      	movs	r6, #0
 80050aa:	42a6      	cmp	r6, r4
 80050ac:	d105      	bne.n	80050ba <__libc_init_array+0x2e>
 80050ae:	bd70      	pop	{r4, r5, r6, pc}
 80050b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80050b4:	4798      	blx	r3
 80050b6:	3601      	adds	r6, #1
 80050b8:	e7ee      	b.n	8005098 <__libc_init_array+0xc>
 80050ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80050be:	4798      	blx	r3
 80050c0:	3601      	adds	r6, #1
 80050c2:	e7f2      	b.n	80050aa <__libc_init_array+0x1e>
 80050c4:	0800511c 	.word	0x0800511c
 80050c8:	0800511c 	.word	0x0800511c
 80050cc:	0800511c 	.word	0x0800511c
 80050d0:	08005120 	.word	0x08005120

080050d4 <memset>:
 80050d4:	4402      	add	r2, r0
 80050d6:	4603      	mov	r3, r0
 80050d8:	4293      	cmp	r3, r2
 80050da:	d100      	bne.n	80050de <memset+0xa>
 80050dc:	4770      	bx	lr
 80050de:	f803 1b01 	strb.w	r1, [r3], #1
 80050e2:	e7f9      	b.n	80050d8 <memset+0x4>

080050e4 <_init>:
 80050e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050e6:	bf00      	nop
 80050e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ea:	bc08      	pop	{r3}
 80050ec:	469e      	mov	lr, r3
 80050ee:	4770      	bx	lr

080050f0 <_fini>:
 80050f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050f2:	bf00      	nop
 80050f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050f6:	bc08      	pop	{r3}
 80050f8:	469e      	mov	lr, r3
 80050fa:	4770      	bx	lr
