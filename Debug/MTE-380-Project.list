
MTE-380-Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005580  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005718  08005718  00015718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005730  08005730  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005730  08005730  00015730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005738  08005738  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005738  08005738  00015738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800573c  0800573c  0001573c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005740  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  20000010  0800574c  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  0800574c  0002029c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000115de  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021c6  00000000  00000000  0003161a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  000337e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e60  00000000  00000000  00034700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001634d  00000000  00000000  00035560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012242  00000000  00000000  0004b8ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bf15  00000000  00000000  0005daef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e9a04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004220  00000000  00000000  000e9a54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005700 	.word	0x08005700

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08005700 	.word	0x08005700

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2uiz>:
 8000a84:	004a      	lsls	r2, r1, #1
 8000a86:	d211      	bcs.n	8000aac <__aeabi_d2uiz+0x28>
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d211      	bcs.n	8000ab2 <__aeabi_d2uiz+0x2e>
 8000a8e:	d50d      	bpl.n	8000aac <__aeabi_d2uiz+0x28>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d40e      	bmi.n	8000ab8 <__aeabi_d2uiz+0x34>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_d2uiz+0x3a>
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_uldivmod>:
 8000ac4:	b953      	cbnz	r3, 8000adc <__aeabi_uldivmod+0x18>
 8000ac6:	b94a      	cbnz	r2, 8000adc <__aeabi_uldivmod+0x18>
 8000ac8:	2900      	cmp	r1, #0
 8000aca:	bf08      	it	eq
 8000acc:	2800      	cmpeq	r0, #0
 8000ace:	bf1c      	itt	ne
 8000ad0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ad4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad8:	f000 b974 	b.w	8000dc4 <__aeabi_idiv0>
 8000adc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ae4:	f000 f806 	bl	8000af4 <__udivmoddi4>
 8000ae8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af0:	b004      	add	sp, #16
 8000af2:	4770      	bx	lr

08000af4 <__udivmoddi4>:
 8000af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af8:	9d08      	ldr	r5, [sp, #32]
 8000afa:	4604      	mov	r4, r0
 8000afc:	468e      	mov	lr, r1
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d14d      	bne.n	8000b9e <__udivmoddi4+0xaa>
 8000b02:	428a      	cmp	r2, r1
 8000b04:	4694      	mov	ip, r2
 8000b06:	d969      	bls.n	8000bdc <__udivmoddi4+0xe8>
 8000b08:	fab2 f282 	clz	r2, r2
 8000b0c:	b152      	cbz	r2, 8000b24 <__udivmoddi4+0x30>
 8000b0e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b12:	f1c2 0120 	rsb	r1, r2, #32
 8000b16:	fa20 f101 	lsr.w	r1, r0, r1
 8000b1a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b1e:	ea41 0e03 	orr.w	lr, r1, r3
 8000b22:	4094      	lsls	r4, r2
 8000b24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b28:	0c21      	lsrs	r1, r4, #16
 8000b2a:	fbbe f6f8 	udiv	r6, lr, r8
 8000b2e:	fa1f f78c 	uxth.w	r7, ip
 8000b32:	fb08 e316 	mls	r3, r8, r6, lr
 8000b36:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b3a:	fb06 f107 	mul.w	r1, r6, r7
 8000b3e:	4299      	cmp	r1, r3
 8000b40:	d90a      	bls.n	8000b58 <__udivmoddi4+0x64>
 8000b42:	eb1c 0303 	adds.w	r3, ip, r3
 8000b46:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b4a:	f080 811f 	bcs.w	8000d8c <__udivmoddi4+0x298>
 8000b4e:	4299      	cmp	r1, r3
 8000b50:	f240 811c 	bls.w	8000d8c <__udivmoddi4+0x298>
 8000b54:	3e02      	subs	r6, #2
 8000b56:	4463      	add	r3, ip
 8000b58:	1a5b      	subs	r3, r3, r1
 8000b5a:	b2a4      	uxth	r4, r4
 8000b5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b60:	fb08 3310 	mls	r3, r8, r0, r3
 8000b64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b68:	fb00 f707 	mul.w	r7, r0, r7
 8000b6c:	42a7      	cmp	r7, r4
 8000b6e:	d90a      	bls.n	8000b86 <__udivmoddi4+0x92>
 8000b70:	eb1c 0404 	adds.w	r4, ip, r4
 8000b74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b78:	f080 810a 	bcs.w	8000d90 <__udivmoddi4+0x29c>
 8000b7c:	42a7      	cmp	r7, r4
 8000b7e:	f240 8107 	bls.w	8000d90 <__udivmoddi4+0x29c>
 8000b82:	4464      	add	r4, ip
 8000b84:	3802      	subs	r0, #2
 8000b86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b8a:	1be4      	subs	r4, r4, r7
 8000b8c:	2600      	movs	r6, #0
 8000b8e:	b11d      	cbz	r5, 8000b98 <__udivmoddi4+0xa4>
 8000b90:	40d4      	lsrs	r4, r2
 8000b92:	2300      	movs	r3, #0
 8000b94:	e9c5 4300 	strd	r4, r3, [r5]
 8000b98:	4631      	mov	r1, r6
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	428b      	cmp	r3, r1
 8000ba0:	d909      	bls.n	8000bb6 <__udivmoddi4+0xc2>
 8000ba2:	2d00      	cmp	r5, #0
 8000ba4:	f000 80ef 	beq.w	8000d86 <__udivmoddi4+0x292>
 8000ba8:	2600      	movs	r6, #0
 8000baa:	e9c5 0100 	strd	r0, r1, [r5]
 8000bae:	4630      	mov	r0, r6
 8000bb0:	4631      	mov	r1, r6
 8000bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb6:	fab3 f683 	clz	r6, r3
 8000bba:	2e00      	cmp	r6, #0
 8000bbc:	d14a      	bne.n	8000c54 <__udivmoddi4+0x160>
 8000bbe:	428b      	cmp	r3, r1
 8000bc0:	d302      	bcc.n	8000bc8 <__udivmoddi4+0xd4>
 8000bc2:	4282      	cmp	r2, r0
 8000bc4:	f200 80f9 	bhi.w	8000dba <__udivmoddi4+0x2c6>
 8000bc8:	1a84      	subs	r4, r0, r2
 8000bca:	eb61 0303 	sbc.w	r3, r1, r3
 8000bce:	2001      	movs	r0, #1
 8000bd0:	469e      	mov	lr, r3
 8000bd2:	2d00      	cmp	r5, #0
 8000bd4:	d0e0      	beq.n	8000b98 <__udivmoddi4+0xa4>
 8000bd6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bda:	e7dd      	b.n	8000b98 <__udivmoddi4+0xa4>
 8000bdc:	b902      	cbnz	r2, 8000be0 <__udivmoddi4+0xec>
 8000bde:	deff      	udf	#255	; 0xff
 8000be0:	fab2 f282 	clz	r2, r2
 8000be4:	2a00      	cmp	r2, #0
 8000be6:	f040 8092 	bne.w	8000d0e <__udivmoddi4+0x21a>
 8000bea:	eba1 010c 	sub.w	r1, r1, ip
 8000bee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bf2:	fa1f fe8c 	uxth.w	lr, ip
 8000bf6:	2601      	movs	r6, #1
 8000bf8:	0c20      	lsrs	r0, r4, #16
 8000bfa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bfe:	fb07 1113 	mls	r1, r7, r3, r1
 8000c02:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c06:	fb0e f003 	mul.w	r0, lr, r3
 8000c0a:	4288      	cmp	r0, r1
 8000c0c:	d908      	bls.n	8000c20 <__udivmoddi4+0x12c>
 8000c0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000c12:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c16:	d202      	bcs.n	8000c1e <__udivmoddi4+0x12a>
 8000c18:	4288      	cmp	r0, r1
 8000c1a:	f200 80cb 	bhi.w	8000db4 <__udivmoddi4+0x2c0>
 8000c1e:	4643      	mov	r3, r8
 8000c20:	1a09      	subs	r1, r1, r0
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c28:	fb07 1110 	mls	r1, r7, r0, r1
 8000c2c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c30:	fb0e fe00 	mul.w	lr, lr, r0
 8000c34:	45a6      	cmp	lr, r4
 8000c36:	d908      	bls.n	8000c4a <__udivmoddi4+0x156>
 8000c38:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c40:	d202      	bcs.n	8000c48 <__udivmoddi4+0x154>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f200 80bb 	bhi.w	8000dbe <__udivmoddi4+0x2ca>
 8000c48:	4608      	mov	r0, r1
 8000c4a:	eba4 040e 	sub.w	r4, r4, lr
 8000c4e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c52:	e79c      	b.n	8000b8e <__udivmoddi4+0x9a>
 8000c54:	f1c6 0720 	rsb	r7, r6, #32
 8000c58:	40b3      	lsls	r3, r6
 8000c5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c62:	fa20 f407 	lsr.w	r4, r0, r7
 8000c66:	fa01 f306 	lsl.w	r3, r1, r6
 8000c6a:	431c      	orrs	r4, r3
 8000c6c:	40f9      	lsrs	r1, r7
 8000c6e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c72:	fa00 f306 	lsl.w	r3, r0, r6
 8000c76:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c7a:	0c20      	lsrs	r0, r4, #16
 8000c7c:	fa1f fe8c 	uxth.w	lr, ip
 8000c80:	fb09 1118 	mls	r1, r9, r8, r1
 8000c84:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c88:	fb08 f00e 	mul.w	r0, r8, lr
 8000c8c:	4288      	cmp	r0, r1
 8000c8e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c92:	d90b      	bls.n	8000cac <__udivmoddi4+0x1b8>
 8000c94:	eb1c 0101 	adds.w	r1, ip, r1
 8000c98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c9c:	f080 8088 	bcs.w	8000db0 <__udivmoddi4+0x2bc>
 8000ca0:	4288      	cmp	r0, r1
 8000ca2:	f240 8085 	bls.w	8000db0 <__udivmoddi4+0x2bc>
 8000ca6:	f1a8 0802 	sub.w	r8, r8, #2
 8000caa:	4461      	add	r1, ip
 8000cac:	1a09      	subs	r1, r1, r0
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cb4:	fb09 1110 	mls	r1, r9, r0, r1
 8000cb8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cc0:	458e      	cmp	lr, r1
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x1e2>
 8000cc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ccc:	d26c      	bcs.n	8000da8 <__udivmoddi4+0x2b4>
 8000cce:	458e      	cmp	lr, r1
 8000cd0:	d96a      	bls.n	8000da8 <__udivmoddi4+0x2b4>
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	4461      	add	r1, ip
 8000cd6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cda:	fba0 9402 	umull	r9, r4, r0, r2
 8000cde:	eba1 010e 	sub.w	r1, r1, lr
 8000ce2:	42a1      	cmp	r1, r4
 8000ce4:	46c8      	mov	r8, r9
 8000ce6:	46a6      	mov	lr, r4
 8000ce8:	d356      	bcc.n	8000d98 <__udivmoddi4+0x2a4>
 8000cea:	d053      	beq.n	8000d94 <__udivmoddi4+0x2a0>
 8000cec:	b15d      	cbz	r5, 8000d06 <__udivmoddi4+0x212>
 8000cee:	ebb3 0208 	subs.w	r2, r3, r8
 8000cf2:	eb61 010e 	sbc.w	r1, r1, lr
 8000cf6:	fa01 f707 	lsl.w	r7, r1, r7
 8000cfa:	fa22 f306 	lsr.w	r3, r2, r6
 8000cfe:	40f1      	lsrs	r1, r6
 8000d00:	431f      	orrs	r7, r3
 8000d02:	e9c5 7100 	strd	r7, r1, [r5]
 8000d06:	2600      	movs	r6, #0
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	f1c2 0320 	rsb	r3, r2, #32
 8000d12:	40d8      	lsrs	r0, r3
 8000d14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d18:	fa21 f303 	lsr.w	r3, r1, r3
 8000d1c:	4091      	lsls	r1, r2
 8000d1e:	4301      	orrs	r1, r0
 8000d20:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d24:	fa1f fe8c 	uxth.w	lr, ip
 8000d28:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d2c:	fb07 3610 	mls	r6, r7, r0, r3
 8000d30:	0c0b      	lsrs	r3, r1, #16
 8000d32:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d36:	fb00 f60e 	mul.w	r6, r0, lr
 8000d3a:	429e      	cmp	r6, r3
 8000d3c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x260>
 8000d42:	eb1c 0303 	adds.w	r3, ip, r3
 8000d46:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d4a:	d22f      	bcs.n	8000dac <__udivmoddi4+0x2b8>
 8000d4c:	429e      	cmp	r6, r3
 8000d4e:	d92d      	bls.n	8000dac <__udivmoddi4+0x2b8>
 8000d50:	3802      	subs	r0, #2
 8000d52:	4463      	add	r3, ip
 8000d54:	1b9b      	subs	r3, r3, r6
 8000d56:	b289      	uxth	r1, r1
 8000d58:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d5c:	fb07 3316 	mls	r3, r7, r6, r3
 8000d60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d64:	fb06 f30e 	mul.w	r3, r6, lr
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x28a>
 8000d6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d70:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d74:	d216      	bcs.n	8000da4 <__udivmoddi4+0x2b0>
 8000d76:	428b      	cmp	r3, r1
 8000d78:	d914      	bls.n	8000da4 <__udivmoddi4+0x2b0>
 8000d7a:	3e02      	subs	r6, #2
 8000d7c:	4461      	add	r1, ip
 8000d7e:	1ac9      	subs	r1, r1, r3
 8000d80:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d84:	e738      	b.n	8000bf8 <__udivmoddi4+0x104>
 8000d86:	462e      	mov	r6, r5
 8000d88:	4628      	mov	r0, r5
 8000d8a:	e705      	b.n	8000b98 <__udivmoddi4+0xa4>
 8000d8c:	4606      	mov	r6, r0
 8000d8e:	e6e3      	b.n	8000b58 <__udivmoddi4+0x64>
 8000d90:	4618      	mov	r0, r3
 8000d92:	e6f8      	b.n	8000b86 <__udivmoddi4+0x92>
 8000d94:	454b      	cmp	r3, r9
 8000d96:	d2a9      	bcs.n	8000cec <__udivmoddi4+0x1f8>
 8000d98:	ebb9 0802 	subs.w	r8, r9, r2
 8000d9c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000da0:	3801      	subs	r0, #1
 8000da2:	e7a3      	b.n	8000cec <__udivmoddi4+0x1f8>
 8000da4:	4646      	mov	r6, r8
 8000da6:	e7ea      	b.n	8000d7e <__udivmoddi4+0x28a>
 8000da8:	4620      	mov	r0, r4
 8000daa:	e794      	b.n	8000cd6 <__udivmoddi4+0x1e2>
 8000dac:	4640      	mov	r0, r8
 8000dae:	e7d1      	b.n	8000d54 <__udivmoddi4+0x260>
 8000db0:	46d0      	mov	r8, sl
 8000db2:	e77b      	b.n	8000cac <__udivmoddi4+0x1b8>
 8000db4:	3b02      	subs	r3, #2
 8000db6:	4461      	add	r1, ip
 8000db8:	e732      	b.n	8000c20 <__udivmoddi4+0x12c>
 8000dba:	4630      	mov	r0, r6
 8000dbc:	e709      	b.n	8000bd2 <__udivmoddi4+0xde>
 8000dbe:	4464      	add	r4, ip
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	e742      	b.n	8000c4a <__udivmoddi4+0x156>

08000dc4 <__aeabi_idiv0>:
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop

08000dc8 <hcsr04_init>:
 */
// Include files

#include "HCSR04.h"

HAL_StatusTypeDef hcsr04_init(TIM_HandleTypeDef *timer) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef ret = HAL_TIM_Base_Start(timer);
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f003 f8a1 	bl	8003f18 <HAL_TIM_Base_Start>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000de0:	4803      	ldr	r0, [pc, #12]	; (8000df0 <hcsr04_init+0x28>)
 8000de2:	f001 fc01 	bl	80025e8 <HAL_GPIO_WritePin>

	return ret;
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40020000 	.word	0x40020000
 8000df4:	00000000 	.word	0x00000000

08000df8 <hcsr04_get_distance>:


void hcsr04_get_distance(HCSR04_HandleTypeDef *dev, TIM_HandleTypeDef *timer) {
 8000df8:	b590      	push	{r4, r7, lr}
 8000dfa:	b087      	sub	sp, #28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]

	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000e02:	2201      	movs	r2, #1
 8000e04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e08:	4835      	ldr	r0, [pc, #212]	; (8000ee0 <hcsr04_get_distance+0xe8>)
 8000e0a:	f001 fbed 	bl	80025e8 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(timer, 0);
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2200      	movs	r2, #0
 8000e14:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(timer) < 5);  // wait for 5 us
 8000e16:	bf00      	nop
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	d9fa      	bls.n	8000e18 <hcsr04_get_distance+0x20>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000e22:	2200      	movs	r2, #0
 8000e24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e28:	482d      	ldr	r0, [pc, #180]	; (8000ee0 <hcsr04_get_distance+0xe8>)
 8000e2a:	f001 fbdd 	bl	80025e8 <HAL_GPIO_WritePin>

	uint32_t current_time = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8000e2e:	f001 f929 	bl	8002084 <HAL_GetTick>
 8000e32:	6178      	str	r0, [r7, #20]
	// wait for the echo pin to go high
	while (!(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN)) && current_time + 10 >  HAL_GetTick());
 8000e34:	bf00      	nop
 8000e36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e3a:	482a      	ldr	r0, [pc, #168]	; (8000ee4 <hcsr04_get_distance+0xec>)
 8000e3c:	f001 fbbc 	bl	80025b8 <HAL_GPIO_ReadPin>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d107      	bne.n	8000e56 <hcsr04_get_distance+0x5e>
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	f103 040a 	add.w	r4, r3, #10
 8000e4c:	f001 f91a 	bl	8002084 <HAL_GetTick>
 8000e50:	4603      	mov	r3, r0
 8000e52:	429c      	cmp	r4, r3
 8000e54:	d8ef      	bhi.n	8000e36 <hcsr04_get_distance+0x3e>
	uint32_t init_value = __HAL_TIM_GET_COUNTER(timer);
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5c:	613b      	str	r3, [r7, #16]

	current_time = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8000e5e:	f001 f911 	bl	8002084 <HAL_GetTick>
 8000e62:	6178      	str	r0, [r7, #20]
	// wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN)) && current_time + 10 > HAL_GetTick());
 8000e64:	bf00      	nop
 8000e66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e6a:	481e      	ldr	r0, [pc, #120]	; (8000ee4 <hcsr04_get_distance+0xec>)
 8000e6c:	f001 fba4 	bl	80025b8 <HAL_GPIO_ReadPin>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d007      	beq.n	8000e86 <hcsr04_get_distance+0x8e>
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	f103 040a 	add.w	r4, r3, #10
 8000e7c:	f001 f902 	bl	8002084 <HAL_GetTick>
 8000e80:	4603      	mov	r3, r0
 8000e82:	429c      	cmp	r4, r3
 8000e84:	d8ef      	bhi.n	8000e66 <hcsr04_get_distance+0x6e>
	uint32_t final_value = __HAL_TIM_GET_COUNTER(timer);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e8c:	60fb      	str	r3, [r7, #12]

	 dev->distance = (final_value - init_value) * 0.034/2;
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff fae1 	bl	800045c <__aeabi_ui2d>
 8000e9a:	a30f      	add	r3, pc, #60	; (adr r3, 8000ed8 <hcsr04_get_distance+0xe0>)
 8000e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea0:	f7ff fb56 	bl	8000550 <__aeabi_dmul>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	4619      	mov	r1, r3
 8000eac:	f04f 0200 	mov.w	r2, #0
 8000eb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eb4:	f7ff fc76 	bl	80007a4 <__aeabi_ddiv>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	460b      	mov	r3, r1
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	f7ff fde0 	bl	8000a84 <__aeabi_d2uiz>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	601a      	str	r2, [r3, #0]
}
 8000eca:	bf00      	nop
 8000ecc:	371c      	adds	r7, #28
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd90      	pop	{r4, r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	f3af 8000 	nop.w
 8000ed8:	b020c49c 	.word	0xb020c49c
 8000edc:	3fa16872 	.word	0x3fa16872
 8000ee0:	40020000 	.word	0x40020000
 8000ee4:	40020800 	.word	0x40020800

08000ee8 <l298n_init>:
 *      Author: ahuja
 */

#include "L298N.h"

HAL_StatusTypeDef l298n_init(TIM_HandleTypeDef *timer) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef ret = HAL_TIM_PWM_Start(timer, LEFT_MOTOR_CHANNEL);
 8000ef0:	2104      	movs	r1, #4
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f003 f8ba 	bl	800406c <HAL_TIM_PWM_Start>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	73fb      	strb	r3, [r7, #15]

	ret = HAL_TIM_PWM_Start(timer, RIGHT_MOTOR_CHANNEL);
 8000efc:	2108      	movs	r1, #8
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f003 f8b4 	bl	800406c <HAL_TIM_PWM_Start>
 8000f04:	4603      	mov	r3, r0
 8000f06:	73fb      	strb	r3, [r7, #15]

	return ret;
 8000f08:	7bfb      	ldrb	r3, [r7, #15]

}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <l298n_brake>:

void l298n_brake(L298N_HandleTypeDef *dev) {
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]

	dev->left_duty = 0;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
	dev->right_duty = 0;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2200      	movs	r2, #0
 8000f24:	605a      	str	r2, [r3, #4]

	set_motor_gpios(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET);
 8000f26:	2300      	movs	r3, #0
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	f000 f85b 	bl	8000fe8 <set_motor_gpios>

}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <l298n_drive_forward>:

void l298n_drive_forward(L298N_HandleTypeDef *dev, TIM_HandleTypeDef *timer, int duty_left, int duty_right) {
 8000f3c:	b590      	push	{r4, r7, lr}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
 8000f48:	603b      	str	r3, [r7, #0]

	dev->left_duty = duty_left;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	601a      	str	r2, [r3, #0]
	dev->right_duty = duty_right;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	683a      	ldr	r2, [r7, #0]
 8000f54:	605a      	str	r2, [r3, #4]

	set_motor_gpios(GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET);
 8000f56:	2300      	movs	r3, #0
 8000f58:	2201      	movs	r2, #1
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	f000 f843 	bl	8000fe8 <set_motor_gpios>

	__HAL_TIM_SET_COMPARE(timer, LEFT_MOTOR_CHANNEL, ((double)dev->left_duty / 100) * COUNTER_PERIOD);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff fa88 	bl	800047c <__aeabi_i2d>
 8000f6c:	f04f 0200 	mov.w	r2, #0
 8000f70:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <l298n_drive_forward+0xa4>)
 8000f72:	f7ff fc17 	bl	80007a4 <__aeabi_ddiv>
 8000f76:	4602      	mov	r2, r0
 8000f78:	460b      	mov	r3, r1
 8000f7a:	4610      	mov	r0, r2
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f04f 0200 	mov.w	r2, #0
 8000f82:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <l298n_drive_forward+0xa8>)
 8000f84:	f7ff fae4 	bl	8000550 <__aeabi_dmul>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	4619      	mov	r1, r3
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	681c      	ldr	r4, [r3, #0]
 8000f94:	f7ff fd76 	bl	8000a84 <__aeabi_d2uiz>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	63a3      	str	r3, [r4, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(timer, RIGHT_MOTOR_CHANNEL, ((double)dev->right_duty / 100) * COUNTER_PERIOD);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fa6b 	bl	800047c <__aeabi_i2d>
 8000fa6:	f04f 0200 	mov.w	r2, #0
 8000faa:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <l298n_drive_forward+0xa4>)
 8000fac:	f7ff fbfa 	bl	80007a4 <__aeabi_ddiv>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	4610      	mov	r0, r2
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <l298n_drive_forward+0xa8>)
 8000fbe:	f7ff fac7 	bl	8000550 <__aeabi_dmul>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	4610      	mov	r0, r2
 8000fc8:	4619      	mov	r1, r3
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	681c      	ldr	r4, [r3, #0]
 8000fce:	f7ff fd59 	bl	8000a84 <__aeabi_d2uiz>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	63e3      	str	r3, [r4, #60]	; 0x3c

}
 8000fd6:	bf00      	nop
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd90      	pop	{r4, r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40590000 	.word	0x40590000
 8000fe4:	40838800 	.word	0x40838800

08000fe8 <set_motor_gpios>:
	__HAL_TIM_SET_COMPARE(timer, LEFT_MOTOR_CHANNEL, ((double)dev->left_duty / 100) * COUNTER_PERIOD);
	__HAL_TIM_SET_COMPARE(timer, RIGHT_MOTOR_CHANNEL, ((double)dev->right_duty / 100) * COUNTER_PERIOD);

}

void set_motor_gpios(GPIO_PinState in1, GPIO_PinState in2, GPIO_PinState in3, GPIO_PinState in4) {
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4604      	mov	r4, r0
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	4611      	mov	r1, r2
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4623      	mov	r3, r4
 8000ff8:	71fb      	strb	r3, [r7, #7]
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71bb      	strb	r3, [r7, #6]
 8000ffe:	460b      	mov	r3, r1
 8001000:	717b      	strb	r3, [r7, #5]
 8001002:	4613      	mov	r3, r2
 8001004:	713b      	strb	r3, [r7, #4]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, in1);
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	461a      	mov	r2, r3
 800100a:	2180      	movs	r1, #128	; 0x80
 800100c:	480c      	ldr	r0, [pc, #48]	; (8001040 <set_motor_gpios+0x58>)
 800100e:	f001 faeb 	bl	80025e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, in2);
 8001012:	79bb      	ldrb	r3, [r7, #6]
 8001014:	461a      	mov	r2, r3
 8001016:	2120      	movs	r1, #32
 8001018:	480a      	ldr	r0, [pc, #40]	; (8001044 <set_motor_gpios+0x5c>)
 800101a:	f001 fae5 	bl	80025e8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, in3);
 800101e:	797b      	ldrb	r3, [r7, #5]
 8001020:	461a      	mov	r2, r3
 8001022:	2102      	movs	r1, #2
 8001024:	4808      	ldr	r0, [pc, #32]	; (8001048 <set_motor_gpios+0x60>)
 8001026:	f001 fadf 	bl	80025e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, in4);
 800102a:	793b      	ldrb	r3, [r7, #4]
 800102c:	461a      	mov	r2, r3
 800102e:	2104      	movs	r1, #4
 8001030:	4805      	ldr	r0, [pc, #20]	; (8001048 <set_motor_gpios+0x60>)
 8001032:	f001 fad9 	bl	80025e8 <HAL_GPIO_WritePin>

}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	bd90      	pop	{r4, r7, pc}
 800103e:	bf00      	nop
 8001040:	40020000 	.word	0x40020000
 8001044:	40020800 	.word	0x40020800
 8001048:	40020400 	.word	0x40020400

0800104c <sg90_init>:
 *  Created on: Nov 10, 2023
 *      Author: avane
 */
#include "SG90.h"

HAL_StatusTypeDef sg90_init(TIM_HandleTypeDef *timer) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef ret = HAL_TIM_Base_Start(timer);
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f002 ff5f 	bl	8003f18 <HAL_TIM_Base_Start>
 800105a:	4603      	mov	r3, r0
 800105c:	73fb      	strb	r3, [r7, #15]

	ret = HAL_TIM_PWM_Start(timer, SERVO_CHANNEL);
 800105e:	2104      	movs	r1, #4
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f003 f803 	bl	800406c <HAL_TIM_PWM_Start>
 8001066:	4603      	mov	r3, r0
 8001068:	73fb      	strb	r3, [r7, #15]

	return ret;
 800106a:	7bfb      	ldrb	r3, [r7, #15]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <sg90_close>:

void sg90_close(SG90_HandleTypeDef *dev, TIM_HandleTypeDef *timer) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]

	for(int i = 475; i < 1400; i += 35){
 800107e:	f240 13db 	movw	r3, #475	; 0x1db
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	e009      	b.n	800109a <sg90_close+0x26>

	__HAL_TIM_SET_COMPARE(timer, SERVO_CHANNEL, i);
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	639a      	str	r2, [r3, #56]	; 0x38

	HAL_Delay(20);
 800108e:	2014      	movs	r0, #20
 8001090:	f001 f804 	bl	800209c <HAL_Delay>
	for(int i = 475; i < 1400; i += 35){
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	3323      	adds	r3, #35	; 0x23
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80010a0:	dbf1      	blt.n	8001086 <sg90_close+0x12>

	}

	dev->position = 1;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2201      	movs	r2, #1
 80010a6:	601a      	str	r2, [r3, #0]
}
 80010a8:	bf00      	nop
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <sg90_open>:

void sg90_open(SG90_HandleTypeDef *dev, TIM_HandleTypeDef *timer) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]

	for(int i=1400; i > 475; i -= 35){
 80010ba:	f44f 63af 	mov.w	r3, #1400	; 0x578
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	e009      	b.n	80010d6 <sg90_open+0x26>

	__HAL_TIM_SET_COMPARE(timer, SERVO_CHANNEL, i);
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	639a      	str	r2, [r3, #56]	; 0x38

	HAL_Delay(20);
 80010ca:	2014      	movs	r0, #20
 80010cc:	f000 ffe6 	bl	800209c <HAL_Delay>
	for(int i=1400; i > 475; i -= 35){
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	3b23      	subs	r3, #35	; 0x23
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f5b3 7fee 	cmp.w	r3, #476	; 0x1dc
 80010dc:	daf1      	bge.n	80010c2 <sg90_open+0x12>

	}

	dev->position = 0;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
}
 80010e4:	bf00      	nop
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <tcs34725_get_data>:

// Include files

#include "tcs34725.h"

HAL_StatusTypeDef tcs34725_get_data(TCS34725_HandleTypeDef *dev, I2C_HandleTypeDef *hi2c_device) {
 80010ec:	b5b0      	push	{r4, r5, r7, lr}
 80010ee:	b08a      	sub	sp, #40	; 0x28
 80010f0:	af02      	add	r7, sp, #8
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]

    // TODO: Check status to see if data is valid and RGBC cycle has completed

	uint8_t val[8] = {0};
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
	uint8_t command = TCS34725_ITER_COMM | TCS34725_RGBC_REG;
 80010fe:	23b4      	movs	r3, #180	; 0xb4
 8001100:	73fb      	strb	r3, [r7, #15]

	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c_device, TCS34725_DEV_ADDR << 1, (uint8_t*)&command, 1, 1000);
 8001102:	f107 020f 	add.w	r2, r7, #15
 8001106:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	2301      	movs	r3, #1
 800110e:	2152      	movs	r1, #82	; 0x52
 8001110:	6838      	ldr	r0, [r7, #0]
 8001112:	f001 fbc7 	bl	80028a4 <HAL_I2C_Master_Transmit>
 8001116:	4603      	mov	r3, r0
 8001118:	77fb      	strb	r3, [r7, #31]

	ret = HAL_I2C_Master_Receive(hi2c_device, TCS34725_DEV_ADDR << 1, (uint8_t*)&val, 8, 1000);
 800111a:	f107 0210 	add.w	r2, r7, #16
 800111e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	2308      	movs	r3, #8
 8001126:	2152      	movs	r1, #82	; 0x52
 8001128:	6838      	ldr	r0, [r7, #0]
 800112a:	f001 fcb9 	bl	8002aa0 <HAL_I2C_Master_Receive>
 800112e:	4603      	mov	r3, r0
 8001130:	77fb      	strb	r3, [r7, #31]

	dev->clear = TO_16_BIT(val[1], val[0]);
 8001132:	7c7b      	ldrb	r3, [r7, #17]
 8001134:	021b      	lsls	r3, r3, #8
 8001136:	b21a      	sxth	r2, r3
 8001138:	7c3b      	ldrb	r3, [r7, #16]
 800113a:	b21b      	sxth	r3, r3
 800113c:	4313      	orrs	r3, r2
 800113e:	b21b      	sxth	r3, r3
 8001140:	b29a      	uxth	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	809a      	strh	r2, [r3, #4]
	dev->red = TO_16_BIT(val[3], val[2]);
 8001146:	7cfb      	ldrb	r3, [r7, #19]
 8001148:	021b      	lsls	r3, r3, #8
 800114a:	b21a      	sxth	r2, r3
 800114c:	7cbb      	ldrb	r3, [r7, #18]
 800114e:	b21b      	sxth	r3, r3
 8001150:	4313      	orrs	r3, r2
 8001152:	b21b      	sxth	r3, r3
 8001154:	b29a      	uxth	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	80da      	strh	r2, [r3, #6]
	dev->green = TO_16_BIT(val[5], val[4]);
 800115a:	7d7b      	ldrb	r3, [r7, #21]
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	b21a      	sxth	r2, r3
 8001160:	7d3b      	ldrb	r3, [r7, #20]
 8001162:	b21b      	sxth	r3, r3
 8001164:	4313      	orrs	r3, r2
 8001166:	b21b      	sxth	r3, r3
 8001168:	b29a      	uxth	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	811a      	strh	r2, [r3, #8]
	dev->blue = TO_16_BIT(val[7], val[6]);
 800116e:	7dfb      	ldrb	r3, [r7, #23]
 8001170:	021b      	lsls	r3, r3, #8
 8001172:	b21a      	sxth	r2, r3
 8001174:	7dbb      	ldrb	r3, [r7, #22]
 8001176:	b21b      	sxth	r3, r3
 8001178:	4313      	orrs	r3, r2
 800117a:	b21b      	sxth	r3, r3
 800117c:	b29a      	uxth	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	815a      	strh	r2, [r3, #10]

	uint32_t sum = dev->red + dev->green + dev->blue;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	88db      	ldrh	r3, [r3, #6]
 8001186:	461a      	mov	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	891b      	ldrh	r3, [r3, #8]
 800118c:	4413      	add	r3, r2
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	8952      	ldrh	r2, [r2, #10]
 8001192:	4413      	add	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]

	dev->r_ratio = (double)dev->red / sum;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	88db      	ldrh	r3, [r3, #6]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff f95e 	bl	800045c <__aeabi_ui2d>
 80011a0:	4604      	mov	r4, r0
 80011a2:	460d      	mov	r5, r1
 80011a4:	69b8      	ldr	r0, [r7, #24]
 80011a6:	f7ff f959 	bl	800045c <__aeabi_ui2d>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4620      	mov	r0, r4
 80011b0:	4629      	mov	r1, r5
 80011b2:	f7ff faf7 	bl	80007a4 <__aeabi_ddiv>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	6879      	ldr	r1, [r7, #4]
 80011bc:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dev->g_ratio = (double)dev->green / sum;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	891b      	ldrh	r3, [r3, #8]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff f949 	bl	800045c <__aeabi_ui2d>
 80011ca:	4604      	mov	r4, r0
 80011cc:	460d      	mov	r5, r1
 80011ce:	69b8      	ldr	r0, [r7, #24]
 80011d0:	f7ff f944 	bl	800045c <__aeabi_ui2d>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4620      	mov	r0, r4
 80011da:	4629      	mov	r1, r5
 80011dc:	f7ff fae2 	bl	80007a4 <__aeabi_ddiv>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	6879      	ldr	r1, [r7, #4]
 80011e6:	e9c1 2306 	strd	r2, r3, [r1, #24]
	dev->b_ratio = (double)dev->blue / sum;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	895b      	ldrh	r3, [r3, #10]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff f934 	bl	800045c <__aeabi_ui2d>
 80011f4:	4604      	mov	r4, r0
 80011f6:	460d      	mov	r5, r1
 80011f8:	69b8      	ldr	r0, [r7, #24]
 80011fa:	f7ff f92f 	bl	800045c <__aeabi_ui2d>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	4620      	mov	r0, r4
 8001204:	4629      	mov	r1, r5
 8001206:	f7ff facd 	bl	80007a4 <__aeabi_ddiv>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	e9c1 2308 	strd	r2, r3, [r1, #32]

    return ret;
 8001214:	7ffb      	ldrb	r3, [r7, #31]
}
 8001216:	4618      	mov	r0, r3
 8001218:	3720      	adds	r7, #32
 800121a:	46bd      	mov	sp, r7
 800121c:	bdb0      	pop	{r4, r5, r7, pc}

0800121e <tcs34725_get_device_id>:

HAL_StatusTypeDef tcs34725_get_device_id(TCS34725_HandleTypeDef *dev, I2C_HandleTypeDef *hi2c_device) {
 800121e:	b580      	push	{r7, lr}
 8001220:	b086      	sub	sp, #24
 8001222:	af02      	add	r7, sp, #8
 8001224:	6078      	str	r0, [r7, #4]
 8001226:	6039      	str	r1, [r7, #0]

	uint8_t val = 0x00;
 8001228:	2300      	movs	r3, #0
 800122a:	73bb      	strb	r3, [r7, #14]
	uint8_t command = TCS34725_COMM_BIT | TCS34725_DEVICE_ID_REG;
 800122c:	2392      	movs	r3, #146	; 0x92
 800122e:	737b      	strb	r3, [r7, #13]

	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c_device, TCS34725_DEV_ADDR << 1, (uint8_t*)&command, 1, 1000);
 8001230:	f107 020d 	add.w	r2, r7, #13
 8001234:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	2301      	movs	r3, #1
 800123c:	2152      	movs	r1, #82	; 0x52
 800123e:	6838      	ldr	r0, [r7, #0]
 8001240:	f001 fb30 	bl	80028a4 <HAL_I2C_Master_Transmit>
 8001244:	4603      	mov	r3, r0
 8001246:	73fb      	strb	r3, [r7, #15]

	ret = HAL_I2C_Master_Receive(hi2c_device, TCS34725_DEV_ADDR << 1, (uint8_t*)&val, 1, 1000);
 8001248:	f107 020e 	add.w	r2, r7, #14
 800124c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	2301      	movs	r3, #1
 8001254:	2152      	movs	r1, #82	; 0x52
 8001256:	6838      	ldr	r0, [r7, #0]
 8001258:	f001 fc22 	bl	8002aa0 <HAL_I2C_Master_Receive>
 800125c:	4603      	mov	r3, r0
 800125e:	73fb      	strb	r3, [r7, #15]


	dev->device_id = val;
 8001260:	7bba      	ldrb	r2, [r7, #14]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	731a      	strb	r2, [r3, #12]

	return ret;
 8001266:	7bfb      	ldrb	r3, [r7, #15]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <tcs34725_set_enable_reg>:

HAL_StatusTypeDef tcs34725_set_enable_reg(TCS34725_HandleTypeDef *dev, I2C_HandleTypeDef *hi2c_device) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af02      	add	r7, sp, #8
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]

	uint8_t val = 0x00;
 800127a:	2300      	movs	r3, #0
 800127c:	73bb      	strb	r3, [r7, #14]
	uint8_t command[2] = {TCS34725_COMM_BIT | TCS34725_ENABLE_REG, 0x01};
 800127e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001282:	81bb      	strh	r3, [r7, #12]


	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c_device, TCS34725_DEV_ADDR << 1, (uint8_t*)&command, 2, 1000);
 8001284:	f107 020c 	add.w	r2, r7, #12
 8001288:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	2302      	movs	r3, #2
 8001290:	2152      	movs	r1, #82	; 0x52
 8001292:	6838      	ldr	r0, [r7, #0]
 8001294:	f001 fb06 	bl	80028a4 <HAL_I2C_Master_Transmit>
 8001298:	4603      	mov	r3, r0
 800129a:	73fb      	strb	r3, [r7, #15]

	command[1] = 0x03;
 800129c:	2303      	movs	r3, #3
 800129e:	737b      	strb	r3, [r7, #13]

	ret = HAL_I2C_Master_Transmit(hi2c_device, TCS34725_DEV_ADDR << 1, (uint8_t*)&command, 2, 1000);
 80012a0:	f107 020c 	add.w	r2, r7, #12
 80012a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2302      	movs	r3, #2
 80012ac:	2152      	movs	r1, #82	; 0x52
 80012ae:	6838      	ldr	r0, [r7, #0]
 80012b0:	f001 faf8 	bl	80028a4 <HAL_I2C_Master_Transmit>
 80012b4:	4603      	mov	r3, r0
 80012b6:	73fb      	strb	r3, [r7, #15]

	ret = HAL_I2C_Master_Receive(hi2c_device, TCS34725_DEV_ADDR << 1, (uint8_t*)&val, 1, 1000);
 80012b8:	f107 020e 	add.w	r2, r7, #14
 80012bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	2301      	movs	r3, #1
 80012c4:	2152      	movs	r1, #82	; 0x52
 80012c6:	6838      	ldr	r0, [r7, #0]
 80012c8:	f001 fbea 	bl	8002aa0 <HAL_I2C_Master_Receive>
 80012cc:	4603      	mov	r3, r0
 80012ce:	73fb      	strb	r3, [r7, #15]

	dev->enable_reg = val;
 80012d0:	7bba      	ldrb	r2, [r7, #14]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	735a      	strb	r2, [r3, #13]

	return ret;
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012e4:	f000 fe68 	bl	8001fb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012e8:	f000 f8ae 	bl	8001448 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ec:	f000 fb20 	bl	8001930 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012f0:	f000 faf4 	bl	80018dc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80012f4:	f000 f970 	bl	80015d8 <MX_TIM1_Init>
  MX_I2C1_Init();
 80012f8:	f000 f912 	bl	8001520 <MX_I2C1_Init>
  MX_I2C3_Init();
 80012fc:	f000 f93e 	bl	800157c <MX_I2C3_Init>
  MX_TIM2_Init();
 8001300:	f000 f9e0 	bl	80016c4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001304:	f000 fa42 	bl	800178c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001308:	f000 fa9a 	bl	8001840 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  tcs34725_get_device_id(&rgb_sensor_left, &hi2c1);
 800130c:	4944      	ldr	r1, [pc, #272]	; (8001420 <main+0x140>)
 800130e:	4845      	ldr	r0, [pc, #276]	; (8001424 <main+0x144>)
 8001310:	f7ff ff85 	bl	800121e <tcs34725_get_device_id>
  tcs34725_get_device_id(&rgb_sensor_right, &hi2c3);
 8001314:	4944      	ldr	r1, [pc, #272]	; (8001428 <main+0x148>)
 8001316:	4845      	ldr	r0, [pc, #276]	; (800142c <main+0x14c>)
 8001318:	f7ff ff81 	bl	800121e <tcs34725_get_device_id>

  tcs34725_set_enable_reg(&rgb_sensor_left, &hi2c1);
 800131c:	4940      	ldr	r1, [pc, #256]	; (8001420 <main+0x140>)
 800131e:	4841      	ldr	r0, [pc, #260]	; (8001424 <main+0x144>)
 8001320:	f7ff ffa6 	bl	8001270 <tcs34725_set_enable_reg>
  tcs34725_set_enable_reg(&rgb_sensor_right, &hi2c3);
 8001324:	4940      	ldr	r1, [pc, #256]	; (8001428 <main+0x148>)
 8001326:	4841      	ldr	r0, [pc, #260]	; (800142c <main+0x14c>)
 8001328:	f7ff ffa2 	bl	8001270 <tcs34725_set_enable_reg>

  l298n_init(&htim2);
 800132c:	4840      	ldr	r0, [pc, #256]	; (8001430 <main+0x150>)
 800132e:	f7ff fddb 	bl	8000ee8 <l298n_init>

  sg90_init(&htim3);
 8001332:	4840      	ldr	r0, [pc, #256]	; (8001434 <main+0x154>)
 8001334:	f7ff fe8a 	bl	800104c <sg90_init>

  hcsr04_init(&htim4);
 8001338:	483f      	ldr	r0, [pc, #252]	; (8001438 <main+0x158>)
 800133a:	f7ff fd45 	bl	8000dc8 <hcsr04_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  sg90_open(&gripper_servo, &htim3);
 800133e:	493d      	ldr	r1, [pc, #244]	; (8001434 <main+0x154>)
 8001340:	483e      	ldr	r0, [pc, #248]	; (800143c <main+0x15c>)
 8001342:	f7ff feb5 	bl	80010b0 <sg90_open>

  l298n_brake(&motor_driver);
 8001346:	483e      	ldr	r0, [pc, #248]	; (8001440 <main+0x160>)
 8001348:	f7ff fde3 	bl	8000f12 <l298n_brake>

  l298n_drive_forward(&motor_driver, &htim2, 50, 50);
 800134c:	2332      	movs	r3, #50	; 0x32
 800134e:	2232      	movs	r2, #50	; 0x32
 8001350:	4937      	ldr	r1, [pc, #220]	; (8001430 <main+0x150>)
 8001352:	483b      	ldr	r0, [pc, #236]	; (8001440 <main+0x160>)
 8001354:	f7ff fdf2 	bl	8000f3c <l298n_drive_forward>

  while (1)
  {
	  tcs34725_get_data(&rgb_sensor_left, &hi2c1);
 8001358:	4931      	ldr	r1, [pc, #196]	; (8001420 <main+0x140>)
 800135a:	4832      	ldr	r0, [pc, #200]	; (8001424 <main+0x144>)
 800135c:	f7ff fec6 	bl	80010ec <tcs34725_get_data>
	  tcs34725_get_data(&rgb_sensor_right, &hi2c3);
 8001360:	4931      	ldr	r1, [pc, #196]	; (8001428 <main+0x148>)
 8001362:	4832      	ldr	r0, [pc, #200]	; (800142c <main+0x14c>)
 8001364:	f7ff fec2 	bl	80010ec <tcs34725_get_data>

	  hcsr04_get_distance(&ultrasonic_sensor, &htim4);
 8001368:	4933      	ldr	r1, [pc, #204]	; (8001438 <main+0x158>)
 800136a:	4836      	ldr	r0, [pc, #216]	; (8001444 <main+0x164>)
 800136c:	f7ff fd44 	bl	8000df8 <hcsr04_get_distance>

	  if (rgb_sensor_left.g_ratio >= 0.45) {
 8001370:	4b2c      	ldr	r3, [pc, #176]	; (8001424 <main+0x144>)
 8001372:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001376:	a326      	add	r3, pc, #152	; (adr r3, 8001410 <main+0x130>)
 8001378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137c:	f7ff fb6e 	bl	8000a5c <__aeabi_dcmpge>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d009      	beq.n	800139a <main+0xba>

		  l298n_brake(&motor_driver);
 8001386:	482e      	ldr	r0, [pc, #184]	; (8001440 <main+0x160>)
 8001388:	f7ff fdc3 	bl	8000f12 <l298n_brake>
		  l298n_drive_forward(&motor_driver, &htim2, 50, 80);
 800138c:	2350      	movs	r3, #80	; 0x50
 800138e:	2232      	movs	r2, #50	; 0x32
 8001390:	4927      	ldr	r1, [pc, #156]	; (8001430 <main+0x150>)
 8001392:	482b      	ldr	r0, [pc, #172]	; (8001440 <main+0x160>)
 8001394:	f7ff fdd2 	bl	8000f3c <l298n_drive_forward>
 8001398:	e035      	b.n	8001406 <main+0x126>
	  }
	  else if (rgb_sensor_right.g_ratio >= 0.45) {
 800139a:	4b24      	ldr	r3, [pc, #144]	; (800142c <main+0x14c>)
 800139c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80013a0:	a31b      	add	r3, pc, #108	; (adr r3, 8001410 <main+0x130>)
 80013a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a6:	f7ff fb59 	bl	8000a5c <__aeabi_dcmpge>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d009      	beq.n	80013c4 <main+0xe4>

		  l298n_brake(&motor_driver);
 80013b0:	4823      	ldr	r0, [pc, #140]	; (8001440 <main+0x160>)
 80013b2:	f7ff fdae 	bl	8000f12 <l298n_brake>
		  l298n_drive_forward(&motor_driver, &htim2, 80, 50);
 80013b6:	2332      	movs	r3, #50	; 0x32
 80013b8:	2250      	movs	r2, #80	; 0x50
 80013ba:	491d      	ldr	r1, [pc, #116]	; (8001430 <main+0x150>)
 80013bc:	4820      	ldr	r0, [pc, #128]	; (8001440 <main+0x160>)
 80013be:	f7ff fdbd 	bl	8000f3c <l298n_drive_forward>
 80013c2:	e020      	b.n	8001406 <main+0x126>
	  }
	  else if ((rgb_sensor_right.r_ratio >= 0.40 || rgb_sensor_left.r_ratio >= 0.40) && gripper_servo.position == 0) {
 80013c4:	4b19      	ldr	r3, [pc, #100]	; (800142c <main+0x14c>)
 80013c6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80013ca:	a313      	add	r3, pc, #76	; (adr r3, 8001418 <main+0x138>)
 80013cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d0:	f7ff fb44 	bl	8000a5c <__aeabi_dcmpge>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d10a      	bne.n	80013f0 <main+0x110>
 80013da:	4b12      	ldr	r3, [pc, #72]	; (8001424 <main+0x144>)
 80013dc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80013e0:	a30d      	add	r3, pc, #52	; (adr r3, 8001418 <main+0x138>)
 80013e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e6:	f7ff fb39 	bl	8000a5c <__aeabi_dcmpge>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d00a      	beq.n	8001406 <main+0x126>
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <main+0x15c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d106      	bne.n	8001406 <main+0x126>

		  l298n_brake(&motor_driver);
 80013f8:	4811      	ldr	r0, [pc, #68]	; (8001440 <main+0x160>)
 80013fa:	f7ff fd8a 	bl	8000f12 <l298n_brake>
		  sg90_close(&gripper_servo, &htim3);
 80013fe:	490d      	ldr	r1, [pc, #52]	; (8001434 <main+0x154>)
 8001400:	480e      	ldr	r0, [pc, #56]	; (800143c <main+0x15c>)
 8001402:	f7ff fe37 	bl	8001074 <sg90_close>
	  }

	  HAL_Delay(50);
 8001406:	2032      	movs	r0, #50	; 0x32
 8001408:	f000 fe48 	bl	800209c <HAL_Delay>
	  tcs34725_get_data(&rgb_sensor_left, &hi2c1);
 800140c:	e7a4      	b.n	8001358 <main+0x78>
 800140e:	bf00      	nop
 8001410:	cccccccd 	.word	0xcccccccd
 8001414:	3fdccccc 	.word	0x3fdccccc
 8001418:	9999999a 	.word	0x9999999a
 800141c:	3fd99999 	.word	0x3fd99999
 8001420:	2000002c 	.word	0x2000002c
 8001424:	20000238 	.word	0x20000238
 8001428:	20000080 	.word	0x20000080
 800142c:	20000260 	.word	0x20000260
 8001430:	2000011c 	.word	0x2000011c
 8001434:	20000164 	.word	0x20000164
 8001438:	200001ac 	.word	0x200001ac
 800143c:	20000290 	.word	0x20000290
 8001440:	20000288 	.word	0x20000288
 8001444:	20000294 	.word	0x20000294

08001448 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b094      	sub	sp, #80	; 0x50
 800144c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800144e:	f107 0320 	add.w	r3, r7, #32
 8001452:	2230      	movs	r2, #48	; 0x30
 8001454:	2100      	movs	r1, #0
 8001456:	4618      	mov	r0, r3
 8001458:	f004 f94a 	bl	80056f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800145c:	f107 030c 	add.w	r3, r7, #12
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800146c:	2300      	movs	r3, #0
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	4b29      	ldr	r3, [pc, #164]	; (8001518 <SystemClock_Config+0xd0>)
 8001472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001474:	4a28      	ldr	r2, [pc, #160]	; (8001518 <SystemClock_Config+0xd0>)
 8001476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800147a:	6413      	str	r3, [r2, #64]	; 0x40
 800147c:	4b26      	ldr	r3, [pc, #152]	; (8001518 <SystemClock_Config+0xd0>)
 800147e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001488:	2300      	movs	r3, #0
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	4b23      	ldr	r3, [pc, #140]	; (800151c <SystemClock_Config+0xd4>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001494:	4a21      	ldr	r2, [pc, #132]	; (800151c <SystemClock_Config+0xd4>)
 8001496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	4b1f      	ldr	r3, [pc, #124]	; (800151c <SystemClock_Config+0xd4>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014a8:	2302      	movs	r3, #2
 80014aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014ac:	2301      	movs	r3, #1
 80014ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014b0:	2310      	movs	r3, #16
 80014b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014b4:	2302      	movs	r3, #2
 80014b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014b8:	2300      	movs	r3, #0
 80014ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80014bc:	2310      	movs	r3, #16
 80014be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80014c0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80014c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80014c6:	2304      	movs	r3, #4
 80014c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80014ca:	2307      	movs	r3, #7
 80014cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ce:	f107 0320 	add.w	r3, r7, #32
 80014d2:	4618      	mov	r0, r3
 80014d4:	f002 f838 	bl	8003548 <HAL_RCC_OscConfig>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80014de:	f000 fadb 	bl	8001a98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e2:	230f      	movs	r3, #15
 80014e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e6:	2302      	movs	r3, #2
 80014e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014f8:	f107 030c 	add.w	r3, r7, #12
 80014fc:	2102      	movs	r1, #2
 80014fe:	4618      	mov	r0, r3
 8001500:	f002 fa9a 	bl	8003a38 <HAL_RCC_ClockConfig>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800150a:	f000 fac5 	bl	8001a98 <Error_Handler>
  }
}
 800150e:	bf00      	nop
 8001510:	3750      	adds	r7, #80	; 0x50
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800
 800151c:	40007000 	.word	0x40007000

08001520 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001524:	4b12      	ldr	r3, [pc, #72]	; (8001570 <MX_I2C1_Init+0x50>)
 8001526:	4a13      	ldr	r2, [pc, #76]	; (8001574 <MX_I2C1_Init+0x54>)
 8001528:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800152a:	4b11      	ldr	r3, [pc, #68]	; (8001570 <MX_I2C1_Init+0x50>)
 800152c:	4a12      	ldr	r2, [pc, #72]	; (8001578 <MX_I2C1_Init+0x58>)
 800152e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001530:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <MX_I2C1_Init+0x50>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <MX_I2C1_Init+0x50>)
 8001538:	2200      	movs	r2, #0
 800153a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <MX_I2C1_Init+0x50>)
 800153e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001542:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001544:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <MX_I2C1_Init+0x50>)
 8001546:	2200      	movs	r2, #0
 8001548:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <MX_I2C1_Init+0x50>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001550:	4b07      	ldr	r3, [pc, #28]	; (8001570 <MX_I2C1_Init+0x50>)
 8001552:	2200      	movs	r2, #0
 8001554:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <MX_I2C1_Init+0x50>)
 8001558:	2200      	movs	r2, #0
 800155a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800155c:	4804      	ldr	r0, [pc, #16]	; (8001570 <MX_I2C1_Init+0x50>)
 800155e:	f001 f85d 	bl	800261c <HAL_I2C_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001568:	f000 fa96 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}
 8001570:	2000002c 	.word	0x2000002c
 8001574:	40005400 	.word	0x40005400
 8001578:	000186a0 	.word	0x000186a0

0800157c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <MX_I2C3_Init+0x50>)
 8001582:	4a13      	ldr	r2, [pc, #76]	; (80015d0 <MX_I2C3_Init+0x54>)
 8001584:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001586:	4b11      	ldr	r3, [pc, #68]	; (80015cc <MX_I2C3_Init+0x50>)
 8001588:	4a12      	ldr	r2, [pc, #72]	; (80015d4 <MX_I2C3_Init+0x58>)
 800158a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800158c:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <MX_I2C3_Init+0x50>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001592:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <MX_I2C3_Init+0x50>)
 8001594:	2200      	movs	r2, #0
 8001596:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001598:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <MX_I2C3_Init+0x50>)
 800159a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800159e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015a0:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <MX_I2C3_Init+0x50>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <MX_I2C3_Init+0x50>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015ac:	4b07      	ldr	r3, [pc, #28]	; (80015cc <MX_I2C3_Init+0x50>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <MX_I2C3_Init+0x50>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80015b8:	4804      	ldr	r0, [pc, #16]	; (80015cc <MX_I2C3_Init+0x50>)
 80015ba:	f001 f82f 	bl	800261c <HAL_I2C_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80015c4:	f000 fa68 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000080 	.word	0x20000080
 80015d0:	40005c00 	.word	0x40005c00
 80015d4:	000186a0 	.word	0x000186a0

080015d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08c      	sub	sp, #48	; 0x30
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80015de:	f107 031c 	add.w	r3, r7, #28
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
 80015ec:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001604:	4b2d      	ldr	r3, [pc, #180]	; (80016bc <MX_TIM1_Init+0xe4>)
 8001606:	4a2e      	ldr	r2, [pc, #184]	; (80016c0 <MX_TIM1_Init+0xe8>)
 8001608:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800160a:	4b2c      	ldr	r3, [pc, #176]	; (80016bc <MX_TIM1_Init+0xe4>)
 800160c:	2200      	movs	r2, #0
 800160e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001610:	4b2a      	ldr	r3, [pc, #168]	; (80016bc <MX_TIM1_Init+0xe4>)
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001616:	4b29      	ldr	r3, [pc, #164]	; (80016bc <MX_TIM1_Init+0xe4>)
 8001618:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800161c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800161e:	4b27      	ldr	r3, [pc, #156]	; (80016bc <MX_TIM1_Init+0xe4>)
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001624:	4b25      	ldr	r3, [pc, #148]	; (80016bc <MX_TIM1_Init+0xe4>)
 8001626:	2200      	movs	r2, #0
 8001628:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800162a:	4b24      	ldr	r3, [pc, #144]	; (80016bc <MX_TIM1_Init+0xe4>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001630:	4822      	ldr	r0, [pc, #136]	; (80016bc <MX_TIM1_Init+0xe4>)
 8001632:	f002 fc21 	bl	8003e78 <HAL_TIM_Base_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 800163c:	f000 fa2c 	bl	8001a98 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001640:	481e      	ldr	r0, [pc, #120]	; (80016bc <MX_TIM1_Init+0xe4>)
 8001642:	f002 fdc3 	bl	80041cc <HAL_TIM_IC_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800164c:	f000 fa24 	bl	8001a98 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001650:	2307      	movs	r3, #7
 8001652:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8001654:	2310      	movs	r3, #16
 8001656:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001658:	f107 031c 	add.w	r3, r7, #28
 800165c:	4619      	mov	r1, r3
 800165e:	4817      	ldr	r0, [pc, #92]	; (80016bc <MX_TIM1_Init+0xe4>)
 8001660:	f003 f833 	bl	80046ca <HAL_TIM_SlaveConfigSynchro>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800166a:	f000 fa15 	bl	8001a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001672:	2300      	movs	r3, #0
 8001674:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001676:	f107 0314 	add.w	r3, r7, #20
 800167a:	4619      	mov	r1, r3
 800167c:	480f      	ldr	r0, [pc, #60]	; (80016bc <MX_TIM1_Init+0xe4>)
 800167e:	f003 fce3 	bl	8005048 <HAL_TIMEx_MasterConfigSynchronization>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8001688:	f000 fa06 	bl	8001a98 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800168c:	2300      	movs	r3, #0
 800168e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001690:	2301      	movs	r3, #1
 8001692:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001694:	2300      	movs	r3, #0
 8001696:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	2208      	movs	r2, #8
 80016a0:	4619      	mov	r1, r3
 80016a2:	4806      	ldr	r0, [pc, #24]	; (80016bc <MX_TIM1_Init+0xe4>)
 80016a4:	f002 fdeb 	bl	800427e <HAL_TIM_IC_ConfigChannel>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 80016ae:	f000 f9f3 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016b2:	bf00      	nop
 80016b4:	3730      	adds	r7, #48	; 0x30
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200000d4 	.word	0x200000d4
 80016c0:	40010000 	.word	0x40010000

080016c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08a      	sub	sp, #40	; 0x28
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ca:	f107 0320 	add.w	r3, r7, #32
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	60da      	str	r2, [r3, #12]
 80016e0:	611a      	str	r2, [r3, #16]
 80016e2:	615a      	str	r2, [r3, #20]
 80016e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016e6:	4b28      	ldr	r3, [pc, #160]	; (8001788 <MX_TIM2_Init+0xc4>)
 80016e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 127;
 80016ee:	4b26      	ldr	r3, [pc, #152]	; (8001788 <MX_TIM2_Init+0xc4>)
 80016f0:	227f      	movs	r2, #127	; 0x7f
 80016f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f4:	4b24      	ldr	r3, [pc, #144]	; (8001788 <MX_TIM2_Init+0xc4>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 625;
 80016fa:	4b23      	ldr	r3, [pc, #140]	; (8001788 <MX_TIM2_Init+0xc4>)
 80016fc:	f240 2271 	movw	r2, #625	; 0x271
 8001700:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001702:	4b21      	ldr	r3, [pc, #132]	; (8001788 <MX_TIM2_Init+0xc4>)
 8001704:	2200      	movs	r2, #0
 8001706:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001708:	4b1f      	ldr	r3, [pc, #124]	; (8001788 <MX_TIM2_Init+0xc4>)
 800170a:	2200      	movs	r2, #0
 800170c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800170e:	481e      	ldr	r0, [pc, #120]	; (8001788 <MX_TIM2_Init+0xc4>)
 8001710:	f002 fc5c 	bl	8003fcc <HAL_TIM_PWM_Init>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800171a:	f000 f9bd 	bl	8001a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800171e:	2300      	movs	r3, #0
 8001720:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001722:	2300      	movs	r3, #0
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001726:	f107 0320 	add.w	r3, r7, #32
 800172a:	4619      	mov	r1, r3
 800172c:	4816      	ldr	r0, [pc, #88]	; (8001788 <MX_TIM2_Init+0xc4>)
 800172e:	f003 fc8b 	bl	8005048 <HAL_TIMEx_MasterConfigSynchronization>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001738:	f000 f9ae 	bl	8001a98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800173c:	2360      	movs	r3, #96	; 0x60
 800173e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001740:	2300      	movs	r3, #0
 8001742:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001744:	2300      	movs	r3, #0
 8001746:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800174c:	1d3b      	adds	r3, r7, #4
 800174e:	2204      	movs	r2, #4
 8001750:	4619      	mov	r1, r3
 8001752:	480d      	ldr	r0, [pc, #52]	; (8001788 <MX_TIM2_Init+0xc4>)
 8001754:	f002 fe30 	bl	80043b8 <HAL_TIM_PWM_ConfigChannel>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800175e:	f000 f99b 	bl	8001a98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	2208      	movs	r2, #8
 8001766:	4619      	mov	r1, r3
 8001768:	4807      	ldr	r0, [pc, #28]	; (8001788 <MX_TIM2_Init+0xc4>)
 800176a:	f002 fe25 	bl	80043b8 <HAL_TIM_PWM_ConfigChannel>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001774:	f000 f990 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001778:	4803      	ldr	r0, [pc, #12]	; (8001788 <MX_TIM2_Init+0xc4>)
 800177a:	f000 faef 	bl	8001d5c <HAL_TIM_MspPostInit>

}
 800177e:	bf00      	nop
 8001780:	3728      	adds	r7, #40	; 0x28
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	2000011c 	.word	0x2000011c

0800178c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08a      	sub	sp, #40	; 0x28
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001792:	f107 0320 	add.w	r3, r7, #32
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800179c:	1d3b      	adds	r3, r7, #4
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	60da      	str	r2, [r3, #12]
 80017a8:	611a      	str	r2, [r3, #16]
 80017aa:	615a      	str	r2, [r3, #20]
 80017ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017ae:	4b22      	ldr	r3, [pc, #136]	; (8001838 <MX_TIM3_Init+0xac>)
 80017b0:	4a22      	ldr	r2, [pc, #136]	; (800183c <MX_TIM3_Init+0xb0>)
 80017b2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 80017b4:	4b20      	ldr	r3, [pc, #128]	; (8001838 <MX_TIM3_Init+0xac>)
 80017b6:	2253      	movs	r2, #83	; 0x53
 80017b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ba:	4b1f      	ldr	r3, [pc, #124]	; (8001838 <MX_TIM3_Init+0xac>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 80017c0:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <MX_TIM3_Init+0xac>)
 80017c2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80017c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c8:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <MX_TIM3_Init+0xac>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ce:	4b1a      	ldr	r3, [pc, #104]	; (8001838 <MX_TIM3_Init+0xac>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017d4:	4818      	ldr	r0, [pc, #96]	; (8001838 <MX_TIM3_Init+0xac>)
 80017d6:	f002 fbf9 	bl	8003fcc <HAL_TIM_PWM_Init>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80017e0:	f000 f95a 	bl	8001a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017e4:	2300      	movs	r3, #0
 80017e6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e8:	2300      	movs	r3, #0
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017ec:	f107 0320 	add.w	r3, r7, #32
 80017f0:	4619      	mov	r1, r3
 80017f2:	4811      	ldr	r0, [pc, #68]	; (8001838 <MX_TIM3_Init+0xac>)
 80017f4:	f003 fc28 	bl	8005048 <HAL_TIMEx_MasterConfigSynchronization>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80017fe:	f000 f94b 	bl	8001a98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001802:	2360      	movs	r3, #96	; 0x60
 8001804:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800180e:	2300      	movs	r3, #0
 8001810:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001812:	1d3b      	adds	r3, r7, #4
 8001814:	2204      	movs	r2, #4
 8001816:	4619      	mov	r1, r3
 8001818:	4807      	ldr	r0, [pc, #28]	; (8001838 <MX_TIM3_Init+0xac>)
 800181a:	f002 fdcd 	bl	80043b8 <HAL_TIM_PWM_ConfigChannel>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001824:	f000 f938 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001828:	4803      	ldr	r0, [pc, #12]	; (8001838 <MX_TIM3_Init+0xac>)
 800182a:	f000 fa97 	bl	8001d5c <HAL_TIM_MspPostInit>

}
 800182e:	bf00      	nop
 8001830:	3728      	adds	r7, #40	; 0x28
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000164 	.word	0x20000164
 800183c:	40000400 	.word	0x40000400

08001840 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001846:	f107 0308 	add.w	r3, r7, #8
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001854:	463b      	mov	r3, r7
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800185c:	4b1d      	ldr	r3, [pc, #116]	; (80018d4 <MX_TIM4_Init+0x94>)
 800185e:	4a1e      	ldr	r2, [pc, #120]	; (80018d8 <MX_TIM4_Init+0x98>)
 8001860:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8001862:	4b1c      	ldr	r3, [pc, #112]	; (80018d4 <MX_TIM4_Init+0x94>)
 8001864:	2247      	movs	r2, #71	; 0x47
 8001866:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001868:	4b1a      	ldr	r3, [pc, #104]	; (80018d4 <MX_TIM4_Init+0x94>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800186e:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <MX_TIM4_Init+0x94>)
 8001870:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001874:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001876:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <MX_TIM4_Init+0x94>)
 8001878:	2200      	movs	r2, #0
 800187a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800187c:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <MX_TIM4_Init+0x94>)
 800187e:	2200      	movs	r2, #0
 8001880:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001882:	4814      	ldr	r0, [pc, #80]	; (80018d4 <MX_TIM4_Init+0x94>)
 8001884:	f002 faf8 	bl	8003e78 <HAL_TIM_Base_Init>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800188e:	f000 f903 	bl	8001a98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001892:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001896:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001898:	f107 0308 	add.w	r3, r7, #8
 800189c:	4619      	mov	r1, r3
 800189e:	480d      	ldr	r0, [pc, #52]	; (80018d4 <MX_TIM4_Init+0x94>)
 80018a0:	f002 fe4c 	bl	800453c <HAL_TIM_ConfigClockSource>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80018aa:	f000 f8f5 	bl	8001a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ae:	2300      	movs	r3, #0
 80018b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80018b6:	463b      	mov	r3, r7
 80018b8:	4619      	mov	r1, r3
 80018ba:	4806      	ldr	r0, [pc, #24]	; (80018d4 <MX_TIM4_Init+0x94>)
 80018bc:	f003 fbc4 	bl	8005048 <HAL_TIMEx_MasterConfigSynchronization>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80018c6:	f000 f8e7 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80018ca:	bf00      	nop
 80018cc:	3718      	adds	r7, #24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	200001ac 	.word	0x200001ac
 80018d8:	40000800 	.word	0x40000800

080018dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018e0:	4b11      	ldr	r3, [pc, #68]	; (8001928 <MX_USART2_UART_Init+0x4c>)
 80018e2:	4a12      	ldr	r2, [pc, #72]	; (800192c <MX_USART2_UART_Init+0x50>)
 80018e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018e6:	4b10      	ldr	r3, [pc, #64]	; (8001928 <MX_USART2_UART_Init+0x4c>)
 80018e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018ee:	4b0e      	ldr	r3, [pc, #56]	; (8001928 <MX_USART2_UART_Init+0x4c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018f4:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <MX_USART2_UART_Init+0x4c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018fa:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <MX_USART2_UART_Init+0x4c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001900:	4b09      	ldr	r3, [pc, #36]	; (8001928 <MX_USART2_UART_Init+0x4c>)
 8001902:	220c      	movs	r2, #12
 8001904:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001906:	4b08      	ldr	r3, [pc, #32]	; (8001928 <MX_USART2_UART_Init+0x4c>)
 8001908:	2200      	movs	r2, #0
 800190a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <MX_USART2_UART_Init+0x4c>)
 800190e:	2200      	movs	r2, #0
 8001910:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001912:	4805      	ldr	r0, [pc, #20]	; (8001928 <MX_USART2_UART_Init+0x4c>)
 8001914:	f003 fc06 	bl	8005124 <HAL_UART_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800191e:	f000 f8bb 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	200001f4 	.word	0x200001f4
 800192c:	40004400 	.word	0x40004400

08001930 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08a      	sub	sp, #40	; 0x28
 8001934:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001936:	f107 0314 	add.w	r3, r7, #20
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	609a      	str	r2, [r3, #8]
 8001942:	60da      	str	r2, [r3, #12]
 8001944:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	4b4f      	ldr	r3, [pc, #316]	; (8001a88 <MX_GPIO_Init+0x158>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a4e      	ldr	r2, [pc, #312]	; (8001a88 <MX_GPIO_Init+0x158>)
 8001950:	f043 0304 	orr.w	r3, r3, #4
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b4c      	ldr	r3, [pc, #304]	; (8001a88 <MX_GPIO_Init+0x158>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f003 0304 	and.w	r3, r3, #4
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	4b48      	ldr	r3, [pc, #288]	; (8001a88 <MX_GPIO_Init+0x158>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	4a47      	ldr	r2, [pc, #284]	; (8001a88 <MX_GPIO_Init+0x158>)
 800196c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001970:	6313      	str	r3, [r2, #48]	; 0x30
 8001972:	4b45      	ldr	r3, [pc, #276]	; (8001a88 <MX_GPIO_Init+0x158>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	60bb      	str	r3, [r7, #8]
 8001982:	4b41      	ldr	r3, [pc, #260]	; (8001a88 <MX_GPIO_Init+0x158>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	4a40      	ldr	r2, [pc, #256]	; (8001a88 <MX_GPIO_Init+0x158>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	6313      	str	r3, [r2, #48]	; 0x30
 800198e:	4b3e      	ldr	r3, [pc, #248]	; (8001a88 <MX_GPIO_Init+0x158>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	607b      	str	r3, [r7, #4]
 800199e:	4b3a      	ldr	r3, [pc, #232]	; (8001a88 <MX_GPIO_Init+0x158>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	4a39      	ldr	r2, [pc, #228]	; (8001a88 <MX_GPIO_Init+0x158>)
 80019a4:	f043 0302 	orr.w	r3, r3, #2
 80019a8:	6313      	str	r3, [r2, #48]	; 0x30
 80019aa:	4b37      	ldr	r3, [pc, #220]	; (8001a88 <MX_GPIO_Init+0x158>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 80019b6:	2200      	movs	r2, #0
 80019b8:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 80019bc:	4833      	ldr	r0, [pc, #204]	; (8001a8c <MX_GPIO_Init+0x15c>)
 80019be:	f000 fe13 	bl	80025e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2120      	movs	r1, #32
 80019c6:	4832      	ldr	r0, [pc, #200]	; (8001a90 <MX_GPIO_Init+0x160>)
 80019c8:	f000 fe0e 	bl	80025e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|S0_Pin|S1_Pin
 80019cc:	2200      	movs	r2, #0
 80019ce:	f24f 0106 	movw	r1, #61446	; 0xf006
 80019d2:	4830      	ldr	r0, [pc, #192]	; (8001a94 <MX_GPIO_Init+0x164>)
 80019d4:	f000 fe08 	bl	80025e8 <HAL_GPIO_WritePin>
                          |S2_Pin|S3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019de:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80019e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019e8:	f107 0314 	add.w	r3, r7, #20
 80019ec:	4619      	mov	r1, r3
 80019ee:	4828      	ldr	r0, [pc, #160]	; (8001a90 <MX_GPIO_Init+0x160>)
 80019f0:	f000 fc5e 	bl	80022b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7|GPIO_PIN_9;
 80019f4:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 80019f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fa:	2301      	movs	r3, #1
 80019fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a02:	2300      	movs	r3, #0
 8001a04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a06:	f107 0314 	add.w	r3, r7, #20
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	481f      	ldr	r0, [pc, #124]	; (8001a8c <MX_GPIO_Init+0x15c>)
 8001a0e:	f000 fc4f 	bl	80022b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a12:	2320      	movs	r3, #32
 8001a14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a16:	2301      	movs	r3, #1
 8001a18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a22:	f107 0314 	add.w	r3, r7, #20
 8001a26:	4619      	mov	r1, r3
 8001a28:	4819      	ldr	r0, [pc, #100]	; (8001a90 <MX_GPIO_Init+0x160>)
 8001a2a:	f000 fc41 	bl	80022b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 S0_Pin S1_Pin
                           S2_Pin S3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|S0_Pin|S1_Pin
 8001a2e:	f24f 0306 	movw	r3, #61446	; 0xf006
 8001a32:	617b      	str	r3, [r7, #20]
                          |S2_Pin|S3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a34:	2301      	movs	r3, #1
 8001a36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	4619      	mov	r1, r3
 8001a46:	4813      	ldr	r0, [pc, #76]	; (8001a94 <MX_GPIO_Init+0x164>)
 8001a48:	f000 fc32 	bl	80022b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a52:	2300      	movs	r3, #0
 8001a54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a5a:	f107 0314 	add.w	r3, r7, #20
 8001a5e:	4619      	mov	r1, r3
 8001a60:	480b      	ldr	r0, [pc, #44]	; (8001a90 <MX_GPIO_Init+0x160>)
 8001a62:	f000 fc25 	bl	80022b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a66:	2310      	movs	r3, #16
 8001a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a72:	f107 0314 	add.w	r3, r7, #20
 8001a76:	4619      	mov	r1, r3
 8001a78:	4806      	ldr	r0, [pc, #24]	; (8001a94 <MX_GPIO_Init+0x164>)
 8001a7a:	f000 fc19 	bl	80022b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a7e:	bf00      	nop
 8001a80:	3728      	adds	r7, #40	; 0x28
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40020000 	.word	0x40020000
 8001a90:	40020800 	.word	0x40020800
 8001a94:	40020400 	.word	0x40020400

08001a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a9c:	b672      	cpsid	i
}
 8001a9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa0:	e7fe      	b.n	8001aa0 <Error_Handler+0x8>
	...

08001aa4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	607b      	str	r3, [r7, #4]
 8001aae:	4b10      	ldr	r3, [pc, #64]	; (8001af0 <HAL_MspInit+0x4c>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab2:	4a0f      	ldr	r2, [pc, #60]	; (8001af0 <HAL_MspInit+0x4c>)
 8001ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aba:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <HAL_MspInit+0x4c>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ac2:	607b      	str	r3, [r7, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	603b      	str	r3, [r7, #0]
 8001aca:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <HAL_MspInit+0x4c>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	4a08      	ldr	r2, [pc, #32]	; (8001af0 <HAL_MspInit+0x4c>)
 8001ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <HAL_MspInit+0x4c>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ade:	603b      	str	r3, [r7, #0]
 8001ae0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ae2:	2007      	movs	r0, #7
 8001ae4:	f000 fbb0 	bl	8002248 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40023800 	.word	0x40023800

08001af4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08c      	sub	sp, #48	; 0x30
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afc:	f107 031c 	add.w	r3, r7, #28
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a42      	ldr	r2, [pc, #264]	; (8001c1c <HAL_I2C_MspInit+0x128>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d12c      	bne.n	8001b70 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	61bb      	str	r3, [r7, #24]
 8001b1a:	4b41      	ldr	r3, [pc, #260]	; (8001c20 <HAL_I2C_MspInit+0x12c>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	4a40      	ldr	r2, [pc, #256]	; (8001c20 <HAL_I2C_MspInit+0x12c>)
 8001b20:	f043 0302 	orr.w	r3, r3, #2
 8001b24:	6313      	str	r3, [r2, #48]	; 0x30
 8001b26:	4b3e      	ldr	r3, [pc, #248]	; (8001c20 <HAL_I2C_MspInit+0x12c>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	61bb      	str	r3, [r7, #24]
 8001b30:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b32:	23c0      	movs	r3, #192	; 0xc0
 8001b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b36:	2312      	movs	r3, #18
 8001b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b42:	2304      	movs	r3, #4
 8001b44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b46:	f107 031c 	add.w	r3, r7, #28
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4835      	ldr	r0, [pc, #212]	; (8001c24 <HAL_I2C_MspInit+0x130>)
 8001b4e:	f000 fbaf 	bl	80022b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	4b32      	ldr	r3, [pc, #200]	; (8001c20 <HAL_I2C_MspInit+0x12c>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	4a31      	ldr	r2, [pc, #196]	; (8001c20 <HAL_I2C_MspInit+0x12c>)
 8001b5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b60:	6413      	str	r3, [r2, #64]	; 0x40
 8001b62:	4b2f      	ldr	r3, [pc, #188]	; (8001c20 <HAL_I2C_MspInit+0x12c>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001b6e:	e050      	b.n	8001c12 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a2c      	ldr	r2, [pc, #176]	; (8001c28 <HAL_I2C_MspInit+0x134>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d14b      	bne.n	8001c12 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	4b28      	ldr	r3, [pc, #160]	; (8001c20 <HAL_I2C_MspInit+0x12c>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	4a27      	ldr	r2, [pc, #156]	; (8001c20 <HAL_I2C_MspInit+0x12c>)
 8001b84:	f043 0304 	orr.w	r3, r3, #4
 8001b88:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8a:	4b25      	ldr	r3, [pc, #148]	; (8001c20 <HAL_I2C_MspInit+0x12c>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	f003 0304 	and.w	r3, r3, #4
 8001b92:	613b      	str	r3, [r7, #16]
 8001b94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	4b21      	ldr	r3, [pc, #132]	; (8001c20 <HAL_I2C_MspInit+0x12c>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	4a20      	ldr	r2, [pc, #128]	; (8001c20 <HAL_I2C_MspInit+0x12c>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba6:	4b1e      	ldr	r3, [pc, #120]	; (8001c20 <HAL_I2C_MspInit+0x12c>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001bb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bb8:	2312      	movs	r3, #18
 8001bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001bc4:	2304      	movs	r3, #4
 8001bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bc8:	f107 031c 	add.w	r3, r7, #28
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4817      	ldr	r0, [pc, #92]	; (8001c2c <HAL_I2C_MspInit+0x138>)
 8001bd0:	f000 fb6e 	bl	80022b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001bd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bda:	2312      	movs	r3, #18
 8001bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be2:	2303      	movs	r3, #3
 8001be4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001be6:	2304      	movs	r3, #4
 8001be8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bea:	f107 031c 	add.w	r3, r7, #28
 8001bee:	4619      	mov	r1, r3
 8001bf0:	480f      	ldr	r0, [pc, #60]	; (8001c30 <HAL_I2C_MspInit+0x13c>)
 8001bf2:	f000 fb5d 	bl	80022b0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <HAL_I2C_MspInit+0x12c>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	4a08      	ldr	r2, [pc, #32]	; (8001c20 <HAL_I2C_MspInit+0x12c>)
 8001c00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c04:	6413      	str	r3, [r2, #64]	; 0x40
 8001c06:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <HAL_I2C_MspInit+0x12c>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	68bb      	ldr	r3, [r7, #8]
}
 8001c12:	bf00      	nop
 8001c14:	3730      	adds	r7, #48	; 0x30
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40005400 	.word	0x40005400
 8001c20:	40023800 	.word	0x40023800
 8001c24:	40020400 	.word	0x40020400
 8001c28:	40005c00 	.word	0x40005c00
 8001c2c:	40020800 	.word	0x40020800
 8001c30:	40020000 	.word	0x40020000

08001c34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08a      	sub	sp, #40	; 0x28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a23      	ldr	r2, [pc, #140]	; (8001ce0 <HAL_TIM_Base_MspInit+0xac>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d12d      	bne.n	8001cb2 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	613b      	str	r3, [r7, #16]
 8001c5a:	4b22      	ldr	r3, [pc, #136]	; (8001ce4 <HAL_TIM_Base_MspInit+0xb0>)
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5e:	4a21      	ldr	r2, [pc, #132]	; (8001ce4 <HAL_TIM_Base_MspInit+0xb0>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	6453      	str	r3, [r2, #68]	; 0x44
 8001c66:	4b1f      	ldr	r3, [pc, #124]	; (8001ce4 <HAL_TIM_Base_MspInit+0xb0>)
 8001c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	613b      	str	r3, [r7, #16]
 8001c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	4b1b      	ldr	r3, [pc, #108]	; (8001ce4 <HAL_TIM_Base_MspInit+0xb0>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	4a1a      	ldr	r2, [pc, #104]	; (8001ce4 <HAL_TIM_Base_MspInit+0xb0>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	6313      	str	r3, [r2, #48]	; 0x30
 8001c82:	4b18      	ldr	r3, [pc, #96]	; (8001ce4 <HAL_TIM_Base_MspInit+0xb0>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c94:	2302      	movs	r3, #2
 8001c96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca4:	f107 0314 	add.w	r3, r7, #20
 8001ca8:	4619      	mov	r1, r3
 8001caa:	480f      	ldr	r0, [pc, #60]	; (8001ce8 <HAL_TIM_Base_MspInit+0xb4>)
 8001cac:	f000 fb00 	bl	80022b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001cb0:	e012      	b.n	8001cd8 <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM4)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a0d      	ldr	r2, [pc, #52]	; (8001cec <HAL_TIM_Base_MspInit+0xb8>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d10d      	bne.n	8001cd8 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60bb      	str	r3, [r7, #8]
 8001cc0:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <HAL_TIM_Base_MspInit+0xb0>)
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc4:	4a07      	ldr	r2, [pc, #28]	; (8001ce4 <HAL_TIM_Base_MspInit+0xb0>)
 8001cc6:	f043 0304 	orr.w	r3, r3, #4
 8001cca:	6413      	str	r3, [r2, #64]	; 0x40
 8001ccc:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <HAL_TIM_Base_MspInit+0xb0>)
 8001cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
}
 8001cd8:	bf00      	nop
 8001cda:	3728      	adds	r7, #40	; 0x28
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40010000 	.word	0x40010000
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40020000 	.word	0x40020000
 8001cec:	40000800 	.word	0x40000800

08001cf0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d00:	d10e      	bne.n	8001d20 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	4b13      	ldr	r3, [pc, #76]	; (8001d54 <HAL_TIM_PWM_MspInit+0x64>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	4a12      	ldr	r2, [pc, #72]	; (8001d54 <HAL_TIM_PWM_MspInit+0x64>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6413      	str	r3, [r2, #64]	; 0x40
 8001d12:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <HAL_TIM_PWM_MspInit+0x64>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d1e:	e012      	b.n	8001d46 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a0c      	ldr	r2, [pc, #48]	; (8001d58 <HAL_TIM_PWM_MspInit+0x68>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d10d      	bne.n	8001d46 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60bb      	str	r3, [r7, #8]
 8001d2e:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <HAL_TIM_PWM_MspInit+0x64>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	4a08      	ldr	r2, [pc, #32]	; (8001d54 <HAL_TIM_PWM_MspInit+0x64>)
 8001d34:	f043 0302 	orr.w	r3, r3, #2
 8001d38:	6413      	str	r3, [r2, #64]	; 0x40
 8001d3a:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <HAL_TIM_PWM_MspInit+0x64>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	60bb      	str	r3, [r7, #8]
 8001d44:	68bb      	ldr	r3, [r7, #8]
}
 8001d46:	bf00      	nop
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40000400 	.word	0x40000400

08001d5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08a      	sub	sp, #40	; 0x28
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d64:	f107 0314 	add.w	r3, r7, #20
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d7c:	d13d      	bne.n	8001dfa <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	4b31      	ldr	r3, [pc, #196]	; (8001e48 <HAL_TIM_MspPostInit+0xec>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	4a30      	ldr	r2, [pc, #192]	; (8001e48 <HAL_TIM_MspPostInit+0xec>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8e:	4b2e      	ldr	r3, [pc, #184]	; (8001e48 <HAL_TIM_MspPostInit+0xec>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	613b      	str	r3, [r7, #16]
 8001d98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	4b2a      	ldr	r3, [pc, #168]	; (8001e48 <HAL_TIM_MspPostInit+0xec>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	4a29      	ldr	r2, [pc, #164]	; (8001e48 <HAL_TIM_MspPostInit+0xec>)
 8001da4:	f043 0302 	orr.w	r3, r3, #2
 8001da8:	6313      	str	r3, [r2, #48]	; 0x30
 8001daa:	4b27      	ldr	r3, [pc, #156]	; (8001e48 <HAL_TIM_MspPostInit+0xec>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001db6:	2302      	movs	r3, #2
 8001db8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dca:	f107 0314 	add.w	r3, r7, #20
 8001dce:	4619      	mov	r1, r3
 8001dd0:	481e      	ldr	r0, [pc, #120]	; (8001e4c <HAL_TIM_MspPostInit+0xf0>)
 8001dd2:	f000 fa6d 	bl	80022b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001dd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de4:	2300      	movs	r3, #0
 8001de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001de8:	2301      	movs	r3, #1
 8001dea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	4619      	mov	r1, r3
 8001df2:	4817      	ldr	r0, [pc, #92]	; (8001e50 <HAL_TIM_MspPostInit+0xf4>)
 8001df4:	f000 fa5c 	bl	80022b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001df8:	e022      	b.n	8001e40 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a15      	ldr	r2, [pc, #84]	; (8001e54 <HAL_TIM_MspPostInit+0xf8>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d11d      	bne.n	8001e40 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e04:	2300      	movs	r3, #0
 8001e06:	60bb      	str	r3, [r7, #8]
 8001e08:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <HAL_TIM_MspPostInit+0xec>)
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0c:	4a0e      	ldr	r2, [pc, #56]	; (8001e48 <HAL_TIM_MspPostInit+0xec>)
 8001e0e:	f043 0304 	orr.w	r3, r3, #4
 8001e12:	6313      	str	r3, [r2, #48]	; 0x30
 8001e14:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <HAL_TIM_MspPostInit+0xec>)
 8001e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e20:	2380      	movs	r3, #128	; 0x80
 8001e22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e24:	2302      	movs	r3, #2
 8001e26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e30:	2302      	movs	r3, #2
 8001e32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e34:	f107 0314 	add.w	r3, r7, #20
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4807      	ldr	r0, [pc, #28]	; (8001e58 <HAL_TIM_MspPostInit+0xfc>)
 8001e3c:	f000 fa38 	bl	80022b0 <HAL_GPIO_Init>
}
 8001e40:	bf00      	nop
 8001e42:	3728      	adds	r7, #40	; 0x28
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40020000 	.word	0x40020000
 8001e50:	40020400 	.word	0x40020400
 8001e54:	40000400 	.word	0x40000400
 8001e58:	40020800 	.word	0x40020800

08001e5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08a      	sub	sp, #40	; 0x28
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
 8001e72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a19      	ldr	r2, [pc, #100]	; (8001ee0 <HAL_UART_MspInit+0x84>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d12b      	bne.n	8001ed6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	4b18      	ldr	r3, [pc, #96]	; (8001ee4 <HAL_UART_MspInit+0x88>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	4a17      	ldr	r2, [pc, #92]	; (8001ee4 <HAL_UART_MspInit+0x88>)
 8001e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e8e:	4b15      	ldr	r3, [pc, #84]	; (8001ee4 <HAL_UART_MspInit+0x88>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <HAL_UART_MspInit+0x88>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	4a10      	ldr	r2, [pc, #64]	; (8001ee4 <HAL_UART_MspInit+0x88>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <HAL_UART_MspInit+0x88>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001eb6:	230c      	movs	r3, #12
 8001eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ec6:	2307      	movs	r3, #7
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eca:	f107 0314 	add.w	r3, r7, #20
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <HAL_UART_MspInit+0x8c>)
 8001ed2:	f000 f9ed 	bl	80022b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ed6:	bf00      	nop
 8001ed8:	3728      	adds	r7, #40	; 0x28
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40004400 	.word	0x40004400
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40020000 	.word	0x40020000

08001eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ef0:	e7fe      	b.n	8001ef0 <NMI_Handler+0x4>

08001ef2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ef6:	e7fe      	b.n	8001ef6 <HardFault_Handler+0x4>

08001ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001efc:	e7fe      	b.n	8001efc <MemManage_Handler+0x4>

08001efe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f02:	e7fe      	b.n	8001f02 <BusFault_Handler+0x4>

08001f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f08:	e7fe      	b.n	8001f08 <UsageFault_Handler+0x4>

08001f0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f26:	b480      	push	{r7}
 8001f28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f38:	f000 f890 	bl	800205c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f3c:	bf00      	nop
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f44:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <SystemInit+0x20>)
 8001f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f4a:	4a05      	ldr	r2, [pc, #20]	; (8001f60 <SystemInit+0x20>)
 8001f4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f54:	bf00      	nop
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f68:	480d      	ldr	r0, [pc, #52]	; (8001fa0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f6a:	490e      	ldr	r1, [pc, #56]	; (8001fa4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f6c:	4a0e      	ldr	r2, [pc, #56]	; (8001fa8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f70:	e002      	b.n	8001f78 <LoopCopyDataInit>

08001f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f76:	3304      	adds	r3, #4

08001f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f7c:	d3f9      	bcc.n	8001f72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f7e:	4a0b      	ldr	r2, [pc, #44]	; (8001fac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f80:	4c0b      	ldr	r4, [pc, #44]	; (8001fb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f84:	e001      	b.n	8001f8a <LoopFillZerobss>

08001f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f88:	3204      	adds	r2, #4

08001f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f8c:	d3fb      	bcc.n	8001f86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f8e:	f7ff ffd7 	bl	8001f40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f92:	f003 fb89 	bl	80056a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f96:	f7ff f9a3 	bl	80012e0 <main>
  bx  lr    
 8001f9a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f9c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001fa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fa4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001fa8:	08005740 	.word	0x08005740
  ldr r2, =_sbss
 8001fac:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001fb0:	2000029c 	.word	0x2000029c

08001fb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fb4:	e7fe      	b.n	8001fb4 <ADC_IRQHandler>
	...

08001fb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fbc:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <HAL_Init+0x40>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a0d      	ldr	r2, [pc, #52]	; (8001ff8 <HAL_Init+0x40>)
 8001fc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <HAL_Init+0x40>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a0a      	ldr	r2, [pc, #40]	; (8001ff8 <HAL_Init+0x40>)
 8001fce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fd4:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <HAL_Init+0x40>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a07      	ldr	r2, [pc, #28]	; (8001ff8 <HAL_Init+0x40>)
 8001fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fe0:	2003      	movs	r0, #3
 8001fe2:	f000 f931 	bl	8002248 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f000 f808 	bl	8001ffc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fec:	f7ff fd5a 	bl	8001aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40023c00 	.word	0x40023c00

08001ffc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002004:	4b12      	ldr	r3, [pc, #72]	; (8002050 <HAL_InitTick+0x54>)
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	4b12      	ldr	r3, [pc, #72]	; (8002054 <HAL_InitTick+0x58>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	4619      	mov	r1, r3
 800200e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002012:	fbb3 f3f1 	udiv	r3, r3, r1
 8002016:	fbb2 f3f3 	udiv	r3, r2, r3
 800201a:	4618      	mov	r0, r3
 800201c:	f000 f93b 	bl	8002296 <HAL_SYSTICK_Config>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e00e      	b.n	8002048 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b0f      	cmp	r3, #15
 800202e:	d80a      	bhi.n	8002046 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002030:	2200      	movs	r2, #0
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	f04f 30ff 	mov.w	r0, #4294967295
 8002038:	f000 f911 	bl	800225e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800203c:	4a06      	ldr	r2, [pc, #24]	; (8002058 <HAL_InitTick+0x5c>)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002042:	2300      	movs	r3, #0
 8002044:	e000      	b.n	8002048 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
}
 8002048:	4618      	mov	r0, r3
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	20000000 	.word	0x20000000
 8002054:	20000008 	.word	0x20000008
 8002058:	20000004 	.word	0x20000004

0800205c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002060:	4b06      	ldr	r3, [pc, #24]	; (800207c <HAL_IncTick+0x20>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	461a      	mov	r2, r3
 8002066:	4b06      	ldr	r3, [pc, #24]	; (8002080 <HAL_IncTick+0x24>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4413      	add	r3, r2
 800206c:	4a04      	ldr	r2, [pc, #16]	; (8002080 <HAL_IncTick+0x24>)
 800206e:	6013      	str	r3, [r2, #0]
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	20000008 	.word	0x20000008
 8002080:	20000298 	.word	0x20000298

08002084 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  return uwTick;
 8002088:	4b03      	ldr	r3, [pc, #12]	; (8002098 <HAL_GetTick+0x14>)
 800208a:	681b      	ldr	r3, [r3, #0]
}
 800208c:	4618      	mov	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	20000298 	.word	0x20000298

0800209c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020a4:	f7ff ffee 	bl	8002084 <HAL_GetTick>
 80020a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b4:	d005      	beq.n	80020c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020b6:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <HAL_Delay+0x44>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	461a      	mov	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4413      	add	r3, r2
 80020c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020c2:	bf00      	nop
 80020c4:	f7ff ffde 	bl	8002084 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d8f7      	bhi.n	80020c4 <HAL_Delay+0x28>
  {
  }
}
 80020d4:	bf00      	nop
 80020d6:	bf00      	nop
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000008 	.word	0x20000008

080020e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020f4:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <__NVIC_SetPriorityGrouping+0x44>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002100:	4013      	ands	r3, r2
 8002102:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800210c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002116:	4a04      	ldr	r2, [pc, #16]	; (8002128 <__NVIC_SetPriorityGrouping+0x44>)
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	60d3      	str	r3, [r2, #12]
}
 800211c:	bf00      	nop
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002130:	4b04      	ldr	r3, [pc, #16]	; (8002144 <__NVIC_GetPriorityGrouping+0x18>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	0a1b      	lsrs	r3, r3, #8
 8002136:	f003 0307 	and.w	r3, r3, #7
}
 800213a:	4618      	mov	r0, r3
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	e000ed00 	.word	0xe000ed00

08002148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	6039      	str	r1, [r7, #0]
 8002152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002158:	2b00      	cmp	r3, #0
 800215a:	db0a      	blt.n	8002172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	b2da      	uxtb	r2, r3
 8002160:	490c      	ldr	r1, [pc, #48]	; (8002194 <__NVIC_SetPriority+0x4c>)
 8002162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002166:	0112      	lsls	r2, r2, #4
 8002168:	b2d2      	uxtb	r2, r2
 800216a:	440b      	add	r3, r1
 800216c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002170:	e00a      	b.n	8002188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	b2da      	uxtb	r2, r3
 8002176:	4908      	ldr	r1, [pc, #32]	; (8002198 <__NVIC_SetPriority+0x50>)
 8002178:	79fb      	ldrb	r3, [r7, #7]
 800217a:	f003 030f 	and.w	r3, r3, #15
 800217e:	3b04      	subs	r3, #4
 8002180:	0112      	lsls	r2, r2, #4
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	440b      	add	r3, r1
 8002186:	761a      	strb	r2, [r3, #24]
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	e000e100 	.word	0xe000e100
 8002198:	e000ed00 	.word	0xe000ed00

0800219c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800219c:	b480      	push	{r7}
 800219e:	b089      	sub	sp, #36	; 0x24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f1c3 0307 	rsb	r3, r3, #7
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	bf28      	it	cs
 80021ba:	2304      	movcs	r3, #4
 80021bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	3304      	adds	r3, #4
 80021c2:	2b06      	cmp	r3, #6
 80021c4:	d902      	bls.n	80021cc <NVIC_EncodePriority+0x30>
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	3b03      	subs	r3, #3
 80021ca:	e000      	b.n	80021ce <NVIC_EncodePriority+0x32>
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d0:	f04f 32ff 	mov.w	r2, #4294967295
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	43da      	mvns	r2, r3
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	401a      	ands	r2, r3
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021e4:	f04f 31ff 	mov.w	r1, #4294967295
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	fa01 f303 	lsl.w	r3, r1, r3
 80021ee:	43d9      	mvns	r1, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f4:	4313      	orrs	r3, r2
         );
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3724      	adds	r7, #36	; 0x24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
	...

08002204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3b01      	subs	r3, #1
 8002210:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002214:	d301      	bcc.n	800221a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002216:	2301      	movs	r3, #1
 8002218:	e00f      	b.n	800223a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800221a:	4a0a      	ldr	r2, [pc, #40]	; (8002244 <SysTick_Config+0x40>)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3b01      	subs	r3, #1
 8002220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002222:	210f      	movs	r1, #15
 8002224:	f04f 30ff 	mov.w	r0, #4294967295
 8002228:	f7ff ff8e 	bl	8002148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800222c:	4b05      	ldr	r3, [pc, #20]	; (8002244 <SysTick_Config+0x40>)
 800222e:	2200      	movs	r2, #0
 8002230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002232:	4b04      	ldr	r3, [pc, #16]	; (8002244 <SysTick_Config+0x40>)
 8002234:	2207      	movs	r2, #7
 8002236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	e000e010 	.word	0xe000e010

08002248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f7ff ff47 	bl	80020e4 <__NVIC_SetPriorityGrouping>
}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800225e:	b580      	push	{r7, lr}
 8002260:	b086      	sub	sp, #24
 8002262:	af00      	add	r7, sp, #0
 8002264:	4603      	mov	r3, r0
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	607a      	str	r2, [r7, #4]
 800226a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002270:	f7ff ff5c 	bl	800212c <__NVIC_GetPriorityGrouping>
 8002274:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	68b9      	ldr	r1, [r7, #8]
 800227a:	6978      	ldr	r0, [r7, #20]
 800227c:	f7ff ff8e 	bl	800219c <NVIC_EncodePriority>
 8002280:	4602      	mov	r2, r0
 8002282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002286:	4611      	mov	r1, r2
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff ff5d 	bl	8002148 <__NVIC_SetPriority>
}
 800228e:	bf00      	nop
 8002290:	3718      	adds	r7, #24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7ff ffb0 	bl	8002204 <SysTick_Config>
 80022a4:	4603      	mov	r3, r0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b089      	sub	sp, #36	; 0x24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022be:	2300      	movs	r3, #0
 80022c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022c6:	2300      	movs	r3, #0
 80022c8:	61fb      	str	r3, [r7, #28]
 80022ca:	e159      	b.n	8002580 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022cc:	2201      	movs	r2, #1
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	4013      	ands	r3, r2
 80022de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	f040 8148 	bne.w	800257a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d005      	beq.n	8002302 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d130      	bne.n	8002364 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	2203      	movs	r2, #3
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43db      	mvns	r3, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4013      	ands	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	68da      	ldr	r2, [r3, #12]
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4313      	orrs	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002338:	2201      	movs	r2, #1
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	43db      	mvns	r3, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4013      	ands	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	091b      	lsrs	r3, r3, #4
 800234e:	f003 0201 	and.w	r2, r3, #1
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4313      	orrs	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 0303 	and.w	r3, r3, #3
 800236c:	2b03      	cmp	r3, #3
 800236e:	d017      	beq.n	80023a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	2203      	movs	r2, #3
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4313      	orrs	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f003 0303 	and.w	r3, r3, #3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d123      	bne.n	80023f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	08da      	lsrs	r2, r3, #3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3208      	adds	r2, #8
 80023b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	f003 0307 	and.w	r3, r3, #7
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	220f      	movs	r2, #15
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	691a      	ldr	r2, [r3, #16]
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	08da      	lsrs	r2, r3, #3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	3208      	adds	r2, #8
 80023ee:	69b9      	ldr	r1, [r7, #24]
 80023f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	2203      	movs	r2, #3
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	43db      	mvns	r3, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4013      	ands	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f003 0203 	and.w	r2, r3, #3
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4313      	orrs	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 80a2 	beq.w	800257a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	4b57      	ldr	r3, [pc, #348]	; (8002598 <HAL_GPIO_Init+0x2e8>)
 800243c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243e:	4a56      	ldr	r2, [pc, #344]	; (8002598 <HAL_GPIO_Init+0x2e8>)
 8002440:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002444:	6453      	str	r3, [r2, #68]	; 0x44
 8002446:	4b54      	ldr	r3, [pc, #336]	; (8002598 <HAL_GPIO_Init+0x2e8>)
 8002448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002452:	4a52      	ldr	r2, [pc, #328]	; (800259c <HAL_GPIO_Init+0x2ec>)
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	089b      	lsrs	r3, r3, #2
 8002458:	3302      	adds	r3, #2
 800245a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800245e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	220f      	movs	r2, #15
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43db      	mvns	r3, r3
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4013      	ands	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a49      	ldr	r2, [pc, #292]	; (80025a0 <HAL_GPIO_Init+0x2f0>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d019      	beq.n	80024b2 <HAL_GPIO_Init+0x202>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a48      	ldr	r2, [pc, #288]	; (80025a4 <HAL_GPIO_Init+0x2f4>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d013      	beq.n	80024ae <HAL_GPIO_Init+0x1fe>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a47      	ldr	r2, [pc, #284]	; (80025a8 <HAL_GPIO_Init+0x2f8>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d00d      	beq.n	80024aa <HAL_GPIO_Init+0x1fa>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a46      	ldr	r2, [pc, #280]	; (80025ac <HAL_GPIO_Init+0x2fc>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d007      	beq.n	80024a6 <HAL_GPIO_Init+0x1f6>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a45      	ldr	r2, [pc, #276]	; (80025b0 <HAL_GPIO_Init+0x300>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d101      	bne.n	80024a2 <HAL_GPIO_Init+0x1f2>
 800249e:	2304      	movs	r3, #4
 80024a0:	e008      	b.n	80024b4 <HAL_GPIO_Init+0x204>
 80024a2:	2307      	movs	r3, #7
 80024a4:	e006      	b.n	80024b4 <HAL_GPIO_Init+0x204>
 80024a6:	2303      	movs	r3, #3
 80024a8:	e004      	b.n	80024b4 <HAL_GPIO_Init+0x204>
 80024aa:	2302      	movs	r3, #2
 80024ac:	e002      	b.n	80024b4 <HAL_GPIO_Init+0x204>
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <HAL_GPIO_Init+0x204>
 80024b2:	2300      	movs	r3, #0
 80024b4:	69fa      	ldr	r2, [r7, #28]
 80024b6:	f002 0203 	and.w	r2, r2, #3
 80024ba:	0092      	lsls	r2, r2, #2
 80024bc:	4093      	lsls	r3, r2
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024c4:	4935      	ldr	r1, [pc, #212]	; (800259c <HAL_GPIO_Init+0x2ec>)
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	089b      	lsrs	r3, r3, #2
 80024ca:	3302      	adds	r3, #2
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024d2:	4b38      	ldr	r3, [pc, #224]	; (80025b4 <HAL_GPIO_Init+0x304>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	43db      	mvns	r3, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4013      	ands	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024f6:	4a2f      	ldr	r2, [pc, #188]	; (80025b4 <HAL_GPIO_Init+0x304>)
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024fc:	4b2d      	ldr	r3, [pc, #180]	; (80025b4 <HAL_GPIO_Init+0x304>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	43db      	mvns	r3, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	4313      	orrs	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002520:	4a24      	ldr	r2, [pc, #144]	; (80025b4 <HAL_GPIO_Init+0x304>)
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002526:	4b23      	ldr	r3, [pc, #140]	; (80025b4 <HAL_GPIO_Init+0x304>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	43db      	mvns	r3, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4013      	ands	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800254a:	4a1a      	ldr	r2, [pc, #104]	; (80025b4 <HAL_GPIO_Init+0x304>)
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002550:	4b18      	ldr	r3, [pc, #96]	; (80025b4 <HAL_GPIO_Init+0x304>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d003      	beq.n	8002574 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4313      	orrs	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002574:	4a0f      	ldr	r2, [pc, #60]	; (80025b4 <HAL_GPIO_Init+0x304>)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	3301      	adds	r3, #1
 800257e:	61fb      	str	r3, [r7, #28]
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	2b0f      	cmp	r3, #15
 8002584:	f67f aea2 	bls.w	80022cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002588:	bf00      	nop
 800258a:	bf00      	nop
 800258c:	3724      	adds	r7, #36	; 0x24
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	40023800 	.word	0x40023800
 800259c:	40013800 	.word	0x40013800
 80025a0:	40020000 	.word	0x40020000
 80025a4:	40020400 	.word	0x40020400
 80025a8:	40020800 	.word	0x40020800
 80025ac:	40020c00 	.word	0x40020c00
 80025b0:	40021000 	.word	0x40021000
 80025b4:	40013c00 	.word	0x40013c00

080025b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691a      	ldr	r2, [r3, #16]
 80025c8:	887b      	ldrh	r3, [r7, #2]
 80025ca:	4013      	ands	r3, r2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d002      	beq.n	80025d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025d0:	2301      	movs	r3, #1
 80025d2:	73fb      	strb	r3, [r7, #15]
 80025d4:	e001      	b.n	80025da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025d6:	2300      	movs	r3, #0
 80025d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025da:	7bfb      	ldrb	r3, [r7, #15]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	807b      	strh	r3, [r7, #2]
 80025f4:	4613      	mov	r3, r2
 80025f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025f8:	787b      	ldrb	r3, [r7, #1]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025fe:	887a      	ldrh	r2, [r7, #2]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002604:	e003      	b.n	800260e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002606:	887b      	ldrh	r3, [r7, #2]
 8002608:	041a      	lsls	r2, r3, #16
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	619a      	str	r2, [r3, #24]
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
	...

0800261c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e12b      	b.n	8002886 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d106      	bne.n	8002648 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff fa56 	bl	8001af4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2224      	movs	r2, #36	; 0x24
 800264c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 0201 	bic.w	r2, r2, #1
 800265e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800266e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800267e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002680:	f001 fbd2 	bl	8003e28 <HAL_RCC_GetPCLK1Freq>
 8002684:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	4a81      	ldr	r2, [pc, #516]	; (8002890 <HAL_I2C_Init+0x274>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d807      	bhi.n	80026a0 <HAL_I2C_Init+0x84>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4a80      	ldr	r2, [pc, #512]	; (8002894 <HAL_I2C_Init+0x278>)
 8002694:	4293      	cmp	r3, r2
 8002696:	bf94      	ite	ls
 8002698:	2301      	movls	r3, #1
 800269a:	2300      	movhi	r3, #0
 800269c:	b2db      	uxtb	r3, r3
 800269e:	e006      	b.n	80026ae <HAL_I2C_Init+0x92>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4a7d      	ldr	r2, [pc, #500]	; (8002898 <HAL_I2C_Init+0x27c>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	bf94      	ite	ls
 80026a8:	2301      	movls	r3, #1
 80026aa:	2300      	movhi	r3, #0
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e0e7      	b.n	8002886 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	4a78      	ldr	r2, [pc, #480]	; (800289c <HAL_I2C_Init+0x280>)
 80026ba:	fba2 2303 	umull	r2, r3, r2, r3
 80026be:	0c9b      	lsrs	r3, r3, #18
 80026c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68ba      	ldr	r2, [r7, #8]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	4a6a      	ldr	r2, [pc, #424]	; (8002890 <HAL_I2C_Init+0x274>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d802      	bhi.n	80026f0 <HAL_I2C_Init+0xd4>
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	3301      	adds	r3, #1
 80026ee:	e009      	b.n	8002704 <HAL_I2C_Init+0xe8>
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026f6:	fb02 f303 	mul.w	r3, r2, r3
 80026fa:	4a69      	ldr	r2, [pc, #420]	; (80028a0 <HAL_I2C_Init+0x284>)
 80026fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002700:	099b      	lsrs	r3, r3, #6
 8002702:	3301      	adds	r3, #1
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	6812      	ldr	r2, [r2, #0]
 8002708:	430b      	orrs	r3, r1
 800270a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002716:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	495c      	ldr	r1, [pc, #368]	; (8002890 <HAL_I2C_Init+0x274>)
 8002720:	428b      	cmp	r3, r1
 8002722:	d819      	bhi.n	8002758 <HAL_I2C_Init+0x13c>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	1e59      	subs	r1, r3, #1
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002732:	1c59      	adds	r1, r3, #1
 8002734:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002738:	400b      	ands	r3, r1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00a      	beq.n	8002754 <HAL_I2C_Init+0x138>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	1e59      	subs	r1, r3, #1
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	fbb1 f3f3 	udiv	r3, r1, r3
 800274c:	3301      	adds	r3, #1
 800274e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002752:	e051      	b.n	80027f8 <HAL_I2C_Init+0x1dc>
 8002754:	2304      	movs	r3, #4
 8002756:	e04f      	b.n	80027f8 <HAL_I2C_Init+0x1dc>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d111      	bne.n	8002784 <HAL_I2C_Init+0x168>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	1e58      	subs	r0, r3, #1
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6859      	ldr	r1, [r3, #4]
 8002768:	460b      	mov	r3, r1
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	440b      	add	r3, r1
 800276e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002772:	3301      	adds	r3, #1
 8002774:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002778:	2b00      	cmp	r3, #0
 800277a:	bf0c      	ite	eq
 800277c:	2301      	moveq	r3, #1
 800277e:	2300      	movne	r3, #0
 8002780:	b2db      	uxtb	r3, r3
 8002782:	e012      	b.n	80027aa <HAL_I2C_Init+0x18e>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	1e58      	subs	r0, r3, #1
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6859      	ldr	r1, [r3, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	0099      	lsls	r1, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	fbb0 f3f3 	udiv	r3, r0, r3
 800279a:	3301      	adds	r3, #1
 800279c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	bf0c      	ite	eq
 80027a4:	2301      	moveq	r3, #1
 80027a6:	2300      	movne	r3, #0
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <HAL_I2C_Init+0x196>
 80027ae:	2301      	movs	r3, #1
 80027b0:	e022      	b.n	80027f8 <HAL_I2C_Init+0x1dc>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10e      	bne.n	80027d8 <HAL_I2C_Init+0x1bc>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	1e58      	subs	r0, r3, #1
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6859      	ldr	r1, [r3, #4]
 80027c2:	460b      	mov	r3, r1
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	440b      	add	r3, r1
 80027c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80027cc:	3301      	adds	r3, #1
 80027ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027d6:	e00f      	b.n	80027f8 <HAL_I2C_Init+0x1dc>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	1e58      	subs	r0, r3, #1
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6859      	ldr	r1, [r3, #4]
 80027e0:	460b      	mov	r3, r1
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	0099      	lsls	r1, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ee:	3301      	adds	r3, #1
 80027f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	6809      	ldr	r1, [r1, #0]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69da      	ldr	r2, [r3, #28]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	430a      	orrs	r2, r1
 800281a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002826:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6911      	ldr	r1, [r2, #16]
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	68d2      	ldr	r2, [r2, #12]
 8002832:	4311      	orrs	r1, r2
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	430b      	orrs	r3, r1
 800283a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	695a      	ldr	r2, [r3, #20]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	431a      	orrs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	430a      	orrs	r2, r1
 8002856:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 0201 	orr.w	r2, r2, #1
 8002866:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2220      	movs	r2, #32
 8002872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	000186a0 	.word	0x000186a0
 8002894:	001e847f 	.word	0x001e847f
 8002898:	003d08ff 	.word	0x003d08ff
 800289c:	431bde83 	.word	0x431bde83
 80028a0:	10624dd3 	.word	0x10624dd3

080028a4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b088      	sub	sp, #32
 80028a8:	af02      	add	r7, sp, #8
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	607a      	str	r2, [r7, #4]
 80028ae:	461a      	mov	r2, r3
 80028b0:	460b      	mov	r3, r1
 80028b2:	817b      	strh	r3, [r7, #10]
 80028b4:	4613      	mov	r3, r2
 80028b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028b8:	f7ff fbe4 	bl	8002084 <HAL_GetTick>
 80028bc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b20      	cmp	r3, #32
 80028c8:	f040 80e0 	bne.w	8002a8c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	2319      	movs	r3, #25
 80028d2:	2201      	movs	r2, #1
 80028d4:	4970      	ldr	r1, [pc, #448]	; (8002a98 <HAL_I2C_Master_Transmit+0x1f4>)
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 fc58 	bl	800318c <I2C_WaitOnFlagUntilTimeout>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80028e2:	2302      	movs	r3, #2
 80028e4:	e0d3      	b.n	8002a8e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d101      	bne.n	80028f4 <HAL_I2C_Master_Transmit+0x50>
 80028f0:	2302      	movs	r3, #2
 80028f2:	e0cc      	b.n	8002a8e <HAL_I2C_Master_Transmit+0x1ea>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b01      	cmp	r3, #1
 8002908:	d007      	beq.n	800291a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f042 0201 	orr.w	r2, r2, #1
 8002918:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002928:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2221      	movs	r2, #33	; 0x21
 800292e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2210      	movs	r2, #16
 8002936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	893a      	ldrh	r2, [r7, #8]
 800294a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002950:	b29a      	uxth	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	4a50      	ldr	r2, [pc, #320]	; (8002a9c <HAL_I2C_Master_Transmit+0x1f8>)
 800295a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800295c:	8979      	ldrh	r1, [r7, #10]
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	6a3a      	ldr	r2, [r7, #32]
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 fac2 	bl	8002eec <I2C_MasterRequestWrite>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e08d      	b.n	8002a8e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002972:	2300      	movs	r3, #0
 8002974:	613b      	str	r3, [r7, #16]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	613b      	str	r3, [r7, #16]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	613b      	str	r3, [r7, #16]
 8002986:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002988:	e066      	b.n	8002a58 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	6a39      	ldr	r1, [r7, #32]
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 fcd2 	bl	8003338 <I2C_WaitOnTXEFlagUntilTimeout>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00d      	beq.n	80029b6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d107      	bne.n	80029b2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e06b      	b.n	8002a8e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ba:	781a      	ldrb	r2, [r3, #0]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	1c5a      	adds	r2, r3, #1
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	3b01      	subs	r3, #1
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029de:	3b01      	subs	r3, #1
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	695b      	ldr	r3, [r3, #20]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b04      	cmp	r3, #4
 80029f2:	d11b      	bne.n	8002a2c <HAL_I2C_Master_Transmit+0x188>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d017      	beq.n	8002a2c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	781a      	ldrb	r2, [r3, #0]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	1c5a      	adds	r2, r3, #1
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a24:	3b01      	subs	r3, #1
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	6a39      	ldr	r1, [r7, #32]
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 fcc2 	bl	80033ba <I2C_WaitOnBTFFlagUntilTimeout>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00d      	beq.n	8002a58 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a40:	2b04      	cmp	r3, #4
 8002a42:	d107      	bne.n	8002a54 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a52:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e01a      	b.n	8002a8e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d194      	bne.n	800298a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2220      	movs	r2, #32
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	e000      	b.n	8002a8e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002a8c:	2302      	movs	r3, #2
  }
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	00100002 	.word	0x00100002
 8002a9c:	ffff0000 	.word	0xffff0000

08002aa0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b08c      	sub	sp, #48	; 0x30
 8002aa4:	af02      	add	r7, sp, #8
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	607a      	str	r2, [r7, #4]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	460b      	mov	r3, r1
 8002aae:	817b      	strh	r3, [r7, #10]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ab4:	f7ff fae6 	bl	8002084 <HAL_GetTick>
 8002ab8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b20      	cmp	r3, #32
 8002ac4:	f040 820b 	bne.w	8002ede <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	2319      	movs	r3, #25
 8002ace:	2201      	movs	r2, #1
 8002ad0:	497c      	ldr	r1, [pc, #496]	; (8002cc4 <HAL_I2C_Master_Receive+0x224>)
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f000 fb5a 	bl	800318c <I2C_WaitOnFlagUntilTimeout>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002ade:	2302      	movs	r3, #2
 8002ae0:	e1fe      	b.n	8002ee0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d101      	bne.n	8002af0 <HAL_I2C_Master_Receive+0x50>
 8002aec:	2302      	movs	r3, #2
 8002aee:	e1f7      	b.n	8002ee0 <HAL_I2C_Master_Receive+0x440>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d007      	beq.n	8002b16 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f042 0201 	orr.w	r2, r2, #1
 8002b14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b24:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2222      	movs	r2, #34	; 0x22
 8002b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2210      	movs	r2, #16
 8002b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	893a      	ldrh	r2, [r7, #8]
 8002b46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	4a5c      	ldr	r2, [pc, #368]	; (8002cc8 <HAL_I2C_Master_Receive+0x228>)
 8002b56:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b58:	8979      	ldrh	r1, [r7, #10]
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f000 fa46 	bl	8002ff0 <I2C_MasterRequestRead>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e1b8      	b.n	8002ee0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d113      	bne.n	8002b9e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b76:	2300      	movs	r3, #0
 8002b78:	623b      	str	r3, [r7, #32]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	623b      	str	r3, [r7, #32]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	623b      	str	r3, [r7, #32]
 8002b8a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	e18c      	b.n	8002eb8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d11b      	bne.n	8002bde <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61fb      	str	r3, [r7, #28]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	61fb      	str	r3, [r7, #28]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	61fb      	str	r3, [r7, #28]
 8002bca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	e16c      	b.n	8002eb8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d11b      	bne.n	8002c1e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bf4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c06:	2300      	movs	r3, #0
 8002c08:	61bb      	str	r3, [r7, #24]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	61bb      	str	r3, [r7, #24]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	61bb      	str	r3, [r7, #24]
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	e14c      	b.n	8002eb8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c2e:	2300      	movs	r3, #0
 8002c30:	617b      	str	r3, [r7, #20]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	617b      	str	r3, [r7, #20]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	617b      	str	r3, [r7, #20]
 8002c42:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002c44:	e138      	b.n	8002eb8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4a:	2b03      	cmp	r3, #3
 8002c4c:	f200 80f1 	bhi.w	8002e32 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d123      	bne.n	8002ca0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f000 fbed 	bl	800343c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e139      	b.n	8002ee0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	691a      	ldr	r2, [r3, #16]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	1c5a      	adds	r2, r3, #1
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	3b01      	subs	r3, #1
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c9e:	e10b      	b.n	8002eb8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d14e      	bne.n	8002d46 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cae:	2200      	movs	r2, #0
 8002cb0:	4906      	ldr	r1, [pc, #24]	; (8002ccc <HAL_I2C_Master_Receive+0x22c>)
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f000 fa6a 	bl	800318c <I2C_WaitOnFlagUntilTimeout>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d008      	beq.n	8002cd0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e10e      	b.n	8002ee0 <HAL_I2C_Master_Receive+0x440>
 8002cc2:	bf00      	nop
 8002cc4:	00100002 	.word	0x00100002
 8002cc8:	ffff0000 	.word	0xffff0000
 8002ccc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	691a      	ldr	r2, [r3, #16]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf2:	1c5a      	adds	r2, r3, #1
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	691a      	ldr	r2, [r3, #16]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1c:	b2d2      	uxtb	r2, r2
 8002d1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d24:	1c5a      	adds	r2, r3, #1
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d44:	e0b8      	b.n	8002eb8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	4966      	ldr	r1, [pc, #408]	; (8002ee8 <HAL_I2C_Master_Receive+0x448>)
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 fa1b 	bl	800318c <I2C_WaitOnFlagUntilTimeout>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e0bf      	b.n	8002ee0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	691a      	ldr	r2, [r3, #16]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7a:	b2d2      	uxtb	r2, r2
 8002d7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d82:	1c5a      	adds	r2, r3, #1
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da8:	2200      	movs	r2, #0
 8002daa:	494f      	ldr	r1, [pc, #316]	; (8002ee8 <HAL_I2C_Master_Receive+0x448>)
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f000 f9ed 	bl	800318c <I2C_WaitOnFlagUntilTimeout>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e091      	b.n	8002ee0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	691a      	ldr	r2, [r3, #16]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	1c5a      	adds	r2, r3, #1
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de8:	3b01      	subs	r3, #1
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	3b01      	subs	r3, #1
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	691a      	ldr	r2, [r3, #16]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e08:	b2d2      	uxtb	r2, r2
 8002e0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e10:	1c5a      	adds	r2, r3, #1
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e30:	e042      	b.n	8002eb8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f000 fb00 	bl	800343c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e04c      	b.n	8002ee0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	691a      	ldr	r2, [r3, #16]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	1c5a      	adds	r2, r3, #1
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e62:	3b01      	subs	r3, #1
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	3b01      	subs	r3, #1
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	f003 0304 	and.w	r3, r3, #4
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	d118      	bne.n	8002eb8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	691a      	ldr	r2, [r3, #16]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e90:	b2d2      	uxtb	r2, r2
 8002e92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	1c5a      	adds	r2, r3, #1
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f47f aec2 	bne.w	8002c46 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	e000      	b.n	8002ee0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002ede:	2302      	movs	r3, #2
  }
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3728      	adds	r7, #40	; 0x28
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	00010004 	.word	0x00010004

08002eec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b088      	sub	sp, #32
 8002ef0:	af02      	add	r7, sp, #8
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	607a      	str	r2, [r7, #4]
 8002ef6:	603b      	str	r3, [r7, #0]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f00:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	d006      	beq.n	8002f16 <I2C_MasterRequestWrite+0x2a>
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d003      	beq.n	8002f16 <I2C_MasterRequestWrite+0x2a>
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f14:	d108      	bne.n	8002f28 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	e00b      	b.n	8002f40 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2c:	2b12      	cmp	r3, #18
 8002f2e:	d107      	bne.n	8002f40 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f3e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	9300      	str	r3, [sp, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f000 f91d 	bl	800318c <I2C_WaitOnFlagUntilTimeout>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00d      	beq.n	8002f74 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f66:	d103      	bne.n	8002f70 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e035      	b.n	8002fe0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f7c:	d108      	bne.n	8002f90 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f7e:	897b      	ldrh	r3, [r7, #10]
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	461a      	mov	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f8c:	611a      	str	r2, [r3, #16]
 8002f8e:	e01b      	b.n	8002fc8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f90:	897b      	ldrh	r3, [r7, #10]
 8002f92:	11db      	asrs	r3, r3, #7
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	f003 0306 	and.w	r3, r3, #6
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	f063 030f 	orn	r3, r3, #15
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	490e      	ldr	r1, [pc, #56]	; (8002fe8 <I2C_MasterRequestWrite+0xfc>)
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f000 f943 	bl	800323a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e010      	b.n	8002fe0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002fbe:	897b      	ldrh	r3, [r7, #10]
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	4907      	ldr	r1, [pc, #28]	; (8002fec <I2C_MasterRequestWrite+0x100>)
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 f933 	bl	800323a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	00010008 	.word	0x00010008
 8002fec:	00010002 	.word	0x00010002

08002ff0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b088      	sub	sp, #32
 8002ff4:	af02      	add	r7, sp, #8
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	607a      	str	r2, [r7, #4]
 8002ffa:	603b      	str	r3, [r7, #0]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003004:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003014:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	2b08      	cmp	r3, #8
 800301a:	d006      	beq.n	800302a <I2C_MasterRequestRead+0x3a>
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d003      	beq.n	800302a <I2C_MasterRequestRead+0x3a>
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003028:	d108      	bne.n	800303c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003038:	601a      	str	r2, [r3, #0]
 800303a:	e00b      	b.n	8003054 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003040:	2b11      	cmp	r3, #17
 8003042:	d107      	bne.n	8003054 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003052:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 f893 	bl	800318c <I2C_WaitOnFlagUntilTimeout>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00d      	beq.n	8003088 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800307a:	d103      	bne.n	8003084 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003082:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e079      	b.n	800317c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003090:	d108      	bne.n	80030a4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003092:	897b      	ldrh	r3, [r7, #10]
 8003094:	b2db      	uxtb	r3, r3
 8003096:	f043 0301 	orr.w	r3, r3, #1
 800309a:	b2da      	uxtb	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	611a      	str	r2, [r3, #16]
 80030a2:	e05f      	b.n	8003164 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80030a4:	897b      	ldrh	r3, [r7, #10]
 80030a6:	11db      	asrs	r3, r3, #7
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	f003 0306 	and.w	r3, r3, #6
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	f063 030f 	orn	r3, r3, #15
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	4930      	ldr	r1, [pc, #192]	; (8003184 <I2C_MasterRequestRead+0x194>)
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f000 f8b9 	bl	800323a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e054      	b.n	800317c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80030d2:	897b      	ldrh	r3, [r7, #10]
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	4929      	ldr	r1, [pc, #164]	; (8003188 <I2C_MasterRequestRead+0x198>)
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 f8a9 	bl	800323a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e044      	b.n	800317c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030f2:	2300      	movs	r3, #0
 80030f4:	613b      	str	r3, [r7, #16]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	613b      	str	r3, [r7, #16]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	613b      	str	r3, [r7, #16]
 8003106:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003116:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 f831 	bl	800318c <I2C_WaitOnFlagUntilTimeout>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00d      	beq.n	800314c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800313e:	d103      	bne.n	8003148 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003146:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e017      	b.n	800317c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800314c:	897b      	ldrh	r3, [r7, #10]
 800314e:	11db      	asrs	r3, r3, #7
 8003150:	b2db      	uxtb	r3, r3
 8003152:	f003 0306 	and.w	r3, r3, #6
 8003156:	b2db      	uxtb	r3, r3
 8003158:	f063 030e 	orn	r3, r3, #14
 800315c:	b2da      	uxtb	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	4907      	ldr	r1, [pc, #28]	; (8003188 <I2C_MasterRequestRead+0x198>)
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f000 f865 	bl	800323a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e000      	b.n	800317c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3718      	adds	r7, #24
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	00010008 	.word	0x00010008
 8003188:	00010002 	.word	0x00010002

0800318c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	603b      	str	r3, [r7, #0]
 8003198:	4613      	mov	r3, r2
 800319a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800319c:	e025      	b.n	80031ea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a4:	d021      	beq.n	80031ea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031a6:	f7fe ff6d 	bl	8002084 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d302      	bcc.n	80031bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d116      	bne.n	80031ea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2220      	movs	r2, #32
 80031c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	f043 0220 	orr.w	r2, r3, #32
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e023      	b.n	8003232 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	0c1b      	lsrs	r3, r3, #16
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d10d      	bne.n	8003210 <I2C_WaitOnFlagUntilTimeout+0x84>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	43da      	mvns	r2, r3
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	4013      	ands	r3, r2
 8003200:	b29b      	uxth	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	bf0c      	ite	eq
 8003206:	2301      	moveq	r3, #1
 8003208:	2300      	movne	r3, #0
 800320a:	b2db      	uxtb	r3, r3
 800320c:	461a      	mov	r2, r3
 800320e:	e00c      	b.n	800322a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	43da      	mvns	r2, r3
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	4013      	ands	r3, r2
 800321c:	b29b      	uxth	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	bf0c      	ite	eq
 8003222:	2301      	moveq	r3, #1
 8003224:	2300      	movne	r3, #0
 8003226:	b2db      	uxtb	r3, r3
 8003228:	461a      	mov	r2, r3
 800322a:	79fb      	ldrb	r3, [r7, #7]
 800322c:	429a      	cmp	r2, r3
 800322e:	d0b6      	beq.n	800319e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b084      	sub	sp, #16
 800323e:	af00      	add	r7, sp, #0
 8003240:	60f8      	str	r0, [r7, #12]
 8003242:	60b9      	str	r1, [r7, #8]
 8003244:	607a      	str	r2, [r7, #4]
 8003246:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003248:	e051      	b.n	80032ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003258:	d123      	bne.n	80032a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003268:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003272:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2220      	movs	r2, #32
 800327e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	f043 0204 	orr.w	r2, r3, #4
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e046      	b.n	8003330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a8:	d021      	beq.n	80032ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032aa:	f7fe feeb 	bl	8002084 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d302      	bcc.n	80032c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d116      	bne.n	80032ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2220      	movs	r2, #32
 80032ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	f043 0220 	orr.w	r2, r3, #32
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e020      	b.n	8003330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	0c1b      	lsrs	r3, r3, #16
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d10c      	bne.n	8003312 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	43da      	mvns	r2, r3
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	4013      	ands	r3, r2
 8003304:	b29b      	uxth	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	bf14      	ite	ne
 800330a:	2301      	movne	r3, #1
 800330c:	2300      	moveq	r3, #0
 800330e:	b2db      	uxtb	r3, r3
 8003310:	e00b      	b.n	800332a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	43da      	mvns	r2, r3
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	4013      	ands	r3, r2
 800331e:	b29b      	uxth	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	bf14      	ite	ne
 8003324:	2301      	movne	r3, #1
 8003326:	2300      	moveq	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d18d      	bne.n	800324a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003344:	e02d      	b.n	80033a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f000 f8ce 	bl	80034e8 <I2C_IsAcknowledgeFailed>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e02d      	b.n	80033b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335c:	d021      	beq.n	80033a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800335e:	f7fe fe91 	bl	8002084 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	68ba      	ldr	r2, [r7, #8]
 800336a:	429a      	cmp	r2, r3
 800336c:	d302      	bcc.n	8003374 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d116      	bne.n	80033a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2220      	movs	r2, #32
 800337e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	f043 0220 	orr.w	r2, r3, #32
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e007      	b.n	80033b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ac:	2b80      	cmp	r3, #128	; 0x80
 80033ae:	d1ca      	bne.n	8003346 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b084      	sub	sp, #16
 80033be:	af00      	add	r7, sp, #0
 80033c0:	60f8      	str	r0, [r7, #12]
 80033c2:	60b9      	str	r1, [r7, #8]
 80033c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033c6:	e02d      	b.n	8003424 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f000 f88d 	bl	80034e8 <I2C_IsAcknowledgeFailed>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e02d      	b.n	8003434 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033de:	d021      	beq.n	8003424 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033e0:	f7fe fe50 	bl	8002084 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d302      	bcc.n	80033f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d116      	bne.n	8003424 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2220      	movs	r2, #32
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003410:	f043 0220 	orr.w	r2, r3, #32
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e007      	b.n	8003434 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	f003 0304 	and.w	r3, r3, #4
 800342e:	2b04      	cmp	r3, #4
 8003430:	d1ca      	bne.n	80033c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003448:	e042      	b.n	80034d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	f003 0310 	and.w	r3, r3, #16
 8003454:	2b10      	cmp	r3, #16
 8003456:	d119      	bne.n	800348c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f06f 0210 	mvn.w	r2, #16
 8003460:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2220      	movs	r2, #32
 800346c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e029      	b.n	80034e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800348c:	f7fe fdfa 	bl	8002084 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	68ba      	ldr	r2, [r7, #8]
 8003498:	429a      	cmp	r2, r3
 800349a:	d302      	bcc.n	80034a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d116      	bne.n	80034d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2220      	movs	r2, #32
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034bc:	f043 0220 	orr.w	r2, r3, #32
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e007      	b.n	80034e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034da:	2b40      	cmp	r3, #64	; 0x40
 80034dc:	d1b5      	bne.n	800344a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034fe:	d11b      	bne.n	8003538 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003508:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003524:	f043 0204 	orr.w	r2, r3, #4
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e000      	b.n	800353a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
	...

08003548 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e267      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d075      	beq.n	8003652 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003566:	4b88      	ldr	r3, [pc, #544]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 030c 	and.w	r3, r3, #12
 800356e:	2b04      	cmp	r3, #4
 8003570:	d00c      	beq.n	800358c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003572:	4b85      	ldr	r3, [pc, #532]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800357a:	2b08      	cmp	r3, #8
 800357c:	d112      	bne.n	80035a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800357e:	4b82      	ldr	r3, [pc, #520]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003586:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800358a:	d10b      	bne.n	80035a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800358c:	4b7e      	ldr	r3, [pc, #504]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d05b      	beq.n	8003650 <HAL_RCC_OscConfig+0x108>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d157      	bne.n	8003650 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e242      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035ac:	d106      	bne.n	80035bc <HAL_RCC_OscConfig+0x74>
 80035ae:	4b76      	ldr	r3, [pc, #472]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a75      	ldr	r2, [pc, #468]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 80035b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b8:	6013      	str	r3, [r2, #0]
 80035ba:	e01d      	b.n	80035f8 <HAL_RCC_OscConfig+0xb0>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035c4:	d10c      	bne.n	80035e0 <HAL_RCC_OscConfig+0x98>
 80035c6:	4b70      	ldr	r3, [pc, #448]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a6f      	ldr	r2, [pc, #444]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 80035cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035d0:	6013      	str	r3, [r2, #0]
 80035d2:	4b6d      	ldr	r3, [pc, #436]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a6c      	ldr	r2, [pc, #432]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 80035d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035dc:	6013      	str	r3, [r2, #0]
 80035de:	e00b      	b.n	80035f8 <HAL_RCC_OscConfig+0xb0>
 80035e0:	4b69      	ldr	r3, [pc, #420]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a68      	ldr	r2, [pc, #416]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 80035e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ea:	6013      	str	r3, [r2, #0]
 80035ec:	4b66      	ldr	r3, [pc, #408]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a65      	ldr	r2, [pc, #404]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 80035f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d013      	beq.n	8003628 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003600:	f7fe fd40 	bl	8002084 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003608:	f7fe fd3c 	bl	8002084 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b64      	cmp	r3, #100	; 0x64
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e207      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800361a:	4b5b      	ldr	r3, [pc, #364]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0f0      	beq.n	8003608 <HAL_RCC_OscConfig+0xc0>
 8003626:	e014      	b.n	8003652 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003628:	f7fe fd2c 	bl	8002084 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003630:	f7fe fd28 	bl	8002084 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b64      	cmp	r3, #100	; 0x64
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e1f3      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003642:	4b51      	ldr	r3, [pc, #324]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1f0      	bne.n	8003630 <HAL_RCC_OscConfig+0xe8>
 800364e:	e000      	b.n	8003652 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d063      	beq.n	8003726 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800365e:	4b4a      	ldr	r3, [pc, #296]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f003 030c 	and.w	r3, r3, #12
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00b      	beq.n	8003682 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800366a:	4b47      	ldr	r3, [pc, #284]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003672:	2b08      	cmp	r3, #8
 8003674:	d11c      	bne.n	80036b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003676:	4b44      	ldr	r3, [pc, #272]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d116      	bne.n	80036b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003682:	4b41      	ldr	r3, [pc, #260]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d005      	beq.n	800369a <HAL_RCC_OscConfig+0x152>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d001      	beq.n	800369a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e1c7      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800369a:	4b3b      	ldr	r3, [pc, #236]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	4937      	ldr	r1, [pc, #220]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ae:	e03a      	b.n	8003726 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d020      	beq.n	80036fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036b8:	4b34      	ldr	r3, [pc, #208]	; (800378c <HAL_RCC_OscConfig+0x244>)
 80036ba:	2201      	movs	r2, #1
 80036bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036be:	f7fe fce1 	bl	8002084 <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c4:	e008      	b.n	80036d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036c6:	f7fe fcdd 	bl	8002084 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e1a8      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d8:	4b2b      	ldr	r3, [pc, #172]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0f0      	beq.n	80036c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e4:	4b28      	ldr	r3, [pc, #160]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	4925      	ldr	r1, [pc, #148]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	600b      	str	r3, [r1, #0]
 80036f8:	e015      	b.n	8003726 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036fa:	4b24      	ldr	r3, [pc, #144]	; (800378c <HAL_RCC_OscConfig+0x244>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003700:	f7fe fcc0 	bl	8002084 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003708:	f7fe fcbc 	bl	8002084 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e187      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800371a:	4b1b      	ldr	r3, [pc, #108]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f0      	bne.n	8003708 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0308 	and.w	r3, r3, #8
 800372e:	2b00      	cmp	r3, #0
 8003730:	d036      	beq.n	80037a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d016      	beq.n	8003768 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800373a:	4b15      	ldr	r3, [pc, #84]	; (8003790 <HAL_RCC_OscConfig+0x248>)
 800373c:	2201      	movs	r2, #1
 800373e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003740:	f7fe fca0 	bl	8002084 <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003748:	f7fe fc9c 	bl	8002084 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e167      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800375a:	4b0b      	ldr	r3, [pc, #44]	; (8003788 <HAL_RCC_OscConfig+0x240>)
 800375c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0f0      	beq.n	8003748 <HAL_RCC_OscConfig+0x200>
 8003766:	e01b      	b.n	80037a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003768:	4b09      	ldr	r3, [pc, #36]	; (8003790 <HAL_RCC_OscConfig+0x248>)
 800376a:	2200      	movs	r2, #0
 800376c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800376e:	f7fe fc89 	bl	8002084 <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003774:	e00e      	b.n	8003794 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003776:	f7fe fc85 	bl	8002084 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d907      	bls.n	8003794 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e150      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
 8003788:	40023800 	.word	0x40023800
 800378c:	42470000 	.word	0x42470000
 8003790:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003794:	4b88      	ldr	r3, [pc, #544]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 8003796:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1ea      	bne.n	8003776 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 8097 	beq.w	80038dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ae:	2300      	movs	r3, #0
 80037b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037b2:	4b81      	ldr	r3, [pc, #516]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10f      	bne.n	80037de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037be:	2300      	movs	r3, #0
 80037c0:	60bb      	str	r3, [r7, #8]
 80037c2:	4b7d      	ldr	r3, [pc, #500]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	4a7c      	ldr	r2, [pc, #496]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 80037c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037cc:	6413      	str	r3, [r2, #64]	; 0x40
 80037ce:	4b7a      	ldr	r3, [pc, #488]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d6:	60bb      	str	r3, [r7, #8]
 80037d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037da:	2301      	movs	r3, #1
 80037dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037de:	4b77      	ldr	r3, [pc, #476]	; (80039bc <HAL_RCC_OscConfig+0x474>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d118      	bne.n	800381c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037ea:	4b74      	ldr	r3, [pc, #464]	; (80039bc <HAL_RCC_OscConfig+0x474>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a73      	ldr	r2, [pc, #460]	; (80039bc <HAL_RCC_OscConfig+0x474>)
 80037f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037f6:	f7fe fc45 	bl	8002084 <HAL_GetTick>
 80037fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037fc:	e008      	b.n	8003810 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037fe:	f7fe fc41 	bl	8002084 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d901      	bls.n	8003810 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e10c      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003810:	4b6a      	ldr	r3, [pc, #424]	; (80039bc <HAL_RCC_OscConfig+0x474>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0f0      	beq.n	80037fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d106      	bne.n	8003832 <HAL_RCC_OscConfig+0x2ea>
 8003824:	4b64      	ldr	r3, [pc, #400]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 8003826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003828:	4a63      	ldr	r2, [pc, #396]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 800382a:	f043 0301 	orr.w	r3, r3, #1
 800382e:	6713      	str	r3, [r2, #112]	; 0x70
 8003830:	e01c      	b.n	800386c <HAL_RCC_OscConfig+0x324>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	2b05      	cmp	r3, #5
 8003838:	d10c      	bne.n	8003854 <HAL_RCC_OscConfig+0x30c>
 800383a:	4b5f      	ldr	r3, [pc, #380]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 800383c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383e:	4a5e      	ldr	r2, [pc, #376]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 8003840:	f043 0304 	orr.w	r3, r3, #4
 8003844:	6713      	str	r3, [r2, #112]	; 0x70
 8003846:	4b5c      	ldr	r3, [pc, #368]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 8003848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384a:	4a5b      	ldr	r2, [pc, #364]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 800384c:	f043 0301 	orr.w	r3, r3, #1
 8003850:	6713      	str	r3, [r2, #112]	; 0x70
 8003852:	e00b      	b.n	800386c <HAL_RCC_OscConfig+0x324>
 8003854:	4b58      	ldr	r3, [pc, #352]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 8003856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003858:	4a57      	ldr	r2, [pc, #348]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 800385a:	f023 0301 	bic.w	r3, r3, #1
 800385e:	6713      	str	r3, [r2, #112]	; 0x70
 8003860:	4b55      	ldr	r3, [pc, #340]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 8003862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003864:	4a54      	ldr	r2, [pc, #336]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 8003866:	f023 0304 	bic.w	r3, r3, #4
 800386a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d015      	beq.n	80038a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003874:	f7fe fc06 	bl	8002084 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800387a:	e00a      	b.n	8003892 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800387c:	f7fe fc02 	bl	8002084 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	f241 3288 	movw	r2, #5000	; 0x1388
 800388a:	4293      	cmp	r3, r2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e0cb      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003892:	4b49      	ldr	r3, [pc, #292]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 8003894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d0ee      	beq.n	800387c <HAL_RCC_OscConfig+0x334>
 800389e:	e014      	b.n	80038ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038a0:	f7fe fbf0 	bl	8002084 <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038a6:	e00a      	b.n	80038be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038a8:	f7fe fbec 	bl	8002084 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e0b5      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038be:	4b3e      	ldr	r3, [pc, #248]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 80038c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1ee      	bne.n	80038a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038ca:	7dfb      	ldrb	r3, [r7, #23]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d105      	bne.n	80038dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038d0:	4b39      	ldr	r3, [pc, #228]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 80038d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d4:	4a38      	ldr	r2, [pc, #224]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 80038d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 80a1 	beq.w	8003a28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038e6:	4b34      	ldr	r3, [pc, #208]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 030c 	and.w	r3, r3, #12
 80038ee:	2b08      	cmp	r3, #8
 80038f0:	d05c      	beq.n	80039ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d141      	bne.n	800397e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038fa:	4b31      	ldr	r3, [pc, #196]	; (80039c0 <HAL_RCC_OscConfig+0x478>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003900:	f7fe fbc0 	bl	8002084 <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003906:	e008      	b.n	800391a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003908:	f7fe fbbc 	bl	8002084 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e087      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800391a:	4b27      	ldr	r3, [pc, #156]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1f0      	bne.n	8003908 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	69da      	ldr	r2, [r3, #28]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	019b      	lsls	r3, r3, #6
 8003936:	431a      	orrs	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393c:	085b      	lsrs	r3, r3, #1
 800393e:	3b01      	subs	r3, #1
 8003940:	041b      	lsls	r3, r3, #16
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003948:	061b      	lsls	r3, r3, #24
 800394a:	491b      	ldr	r1, [pc, #108]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 800394c:	4313      	orrs	r3, r2
 800394e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003950:	4b1b      	ldr	r3, [pc, #108]	; (80039c0 <HAL_RCC_OscConfig+0x478>)
 8003952:	2201      	movs	r2, #1
 8003954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003956:	f7fe fb95 	bl	8002084 <HAL_GetTick>
 800395a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800395c:	e008      	b.n	8003970 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800395e:	f7fe fb91 	bl	8002084 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d901      	bls.n	8003970 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e05c      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003970:	4b11      	ldr	r3, [pc, #68]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d0f0      	beq.n	800395e <HAL_RCC_OscConfig+0x416>
 800397c:	e054      	b.n	8003a28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800397e:	4b10      	ldr	r3, [pc, #64]	; (80039c0 <HAL_RCC_OscConfig+0x478>)
 8003980:	2200      	movs	r2, #0
 8003982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003984:	f7fe fb7e 	bl	8002084 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800398c:	f7fe fb7a 	bl	8002084 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e045      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800399e:	4b06      	ldr	r3, [pc, #24]	; (80039b8 <HAL_RCC_OscConfig+0x470>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1f0      	bne.n	800398c <HAL_RCC_OscConfig+0x444>
 80039aa:	e03d      	b.n	8003a28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d107      	bne.n	80039c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e038      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
 80039b8:	40023800 	.word	0x40023800
 80039bc:	40007000 	.word	0x40007000
 80039c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039c4:	4b1b      	ldr	r3, [pc, #108]	; (8003a34 <HAL_RCC_OscConfig+0x4ec>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d028      	beq.n	8003a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039dc:	429a      	cmp	r2, r3
 80039de:	d121      	bne.n	8003a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d11a      	bne.n	8003a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039f4:	4013      	ands	r3, r2
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d111      	bne.n	8003a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0a:	085b      	lsrs	r3, r3, #1
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d107      	bne.n	8003a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d001      	beq.n	8003a28 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e000      	b.n	8003a2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3718      	adds	r7, #24
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	40023800 	.word	0x40023800

08003a38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d101      	bne.n	8003a4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e0cc      	b.n	8003be6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a4c:	4b68      	ldr	r3, [pc, #416]	; (8003bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d90c      	bls.n	8003a74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a5a:	4b65      	ldr	r3, [pc, #404]	; (8003bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	b2d2      	uxtb	r2, r2
 8003a60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a62:	4b63      	ldr	r3, [pc, #396]	; (8003bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0307 	and.w	r3, r3, #7
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d001      	beq.n	8003a74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e0b8      	b.n	8003be6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d020      	beq.n	8003ac2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0304 	and.w	r3, r3, #4
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d005      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a8c:	4b59      	ldr	r3, [pc, #356]	; (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	4a58      	ldr	r2, [pc, #352]	; (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0308 	and.w	r3, r3, #8
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d005      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003aa4:	4b53      	ldr	r3, [pc, #332]	; (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	4a52      	ldr	r2, [pc, #328]	; (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aaa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003aae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ab0:	4b50      	ldr	r3, [pc, #320]	; (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	494d      	ldr	r1, [pc, #308]	; (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d044      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d107      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ad6:	4b47      	ldr	r3, [pc, #284]	; (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d119      	bne.n	8003b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e07f      	b.n	8003be6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d003      	beq.n	8003af6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003af2:	2b03      	cmp	r3, #3
 8003af4:	d107      	bne.n	8003b06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003af6:	4b3f      	ldr	r3, [pc, #252]	; (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d109      	bne.n	8003b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e06f      	b.n	8003be6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b06:	4b3b      	ldr	r3, [pc, #236]	; (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e067      	b.n	8003be6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b16:	4b37      	ldr	r3, [pc, #220]	; (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f023 0203 	bic.w	r2, r3, #3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	4934      	ldr	r1, [pc, #208]	; (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b28:	f7fe faac 	bl	8002084 <HAL_GetTick>
 8003b2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2e:	e00a      	b.n	8003b46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b30:	f7fe faa8 	bl	8002084 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e04f      	b.n	8003be6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b46:	4b2b      	ldr	r3, [pc, #172]	; (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 020c 	and.w	r2, r3, #12
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d1eb      	bne.n	8003b30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b58:	4b25      	ldr	r3, [pc, #148]	; (8003bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d20c      	bcs.n	8003b80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b66:	4b22      	ldr	r3, [pc, #136]	; (8003bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	b2d2      	uxtb	r2, r2
 8003b6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b6e:	4b20      	ldr	r3, [pc, #128]	; (8003bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0307 	and.w	r3, r3, #7
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d001      	beq.n	8003b80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e032      	b.n	8003be6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d008      	beq.n	8003b9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b8c:	4b19      	ldr	r3, [pc, #100]	; (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	4916      	ldr	r1, [pc, #88]	; (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0308 	and.w	r3, r3, #8
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d009      	beq.n	8003bbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003baa:	4b12      	ldr	r3, [pc, #72]	; (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	00db      	lsls	r3, r3, #3
 8003bb8:	490e      	ldr	r1, [pc, #56]	; (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bbe:	f000 f821 	bl	8003c04 <HAL_RCC_GetSysClockFreq>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	091b      	lsrs	r3, r3, #4
 8003bca:	f003 030f 	and.w	r3, r3, #15
 8003bce:	490a      	ldr	r1, [pc, #40]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8003bd0:	5ccb      	ldrb	r3, [r1, r3]
 8003bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8003bd6:	4a09      	ldr	r2, [pc, #36]	; (8003bfc <HAL_RCC_ClockConfig+0x1c4>)
 8003bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bda:	4b09      	ldr	r3, [pc, #36]	; (8003c00 <HAL_RCC_ClockConfig+0x1c8>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f7fe fa0c 	bl	8001ffc <HAL_InitTick>

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	40023c00 	.word	0x40023c00
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	08005718 	.word	0x08005718
 8003bfc:	20000000 	.word	0x20000000
 8003c00:	20000004 	.word	0x20000004

08003c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c08:	b094      	sub	sp, #80	; 0x50
 8003c0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	647b      	str	r3, [r7, #68]	; 0x44
 8003c10:	2300      	movs	r3, #0
 8003c12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c14:	2300      	movs	r3, #0
 8003c16:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c1c:	4b79      	ldr	r3, [pc, #484]	; (8003e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f003 030c 	and.w	r3, r3, #12
 8003c24:	2b08      	cmp	r3, #8
 8003c26:	d00d      	beq.n	8003c44 <HAL_RCC_GetSysClockFreq+0x40>
 8003c28:	2b08      	cmp	r3, #8
 8003c2a:	f200 80e1 	bhi.w	8003df0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d002      	beq.n	8003c38 <HAL_RCC_GetSysClockFreq+0x34>
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	d003      	beq.n	8003c3e <HAL_RCC_GetSysClockFreq+0x3a>
 8003c36:	e0db      	b.n	8003df0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c38:	4b73      	ldr	r3, [pc, #460]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c3a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003c3c:	e0db      	b.n	8003df6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c3e:	4b73      	ldr	r3, [pc, #460]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x208>)
 8003c40:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c42:	e0d8      	b.n	8003df6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c44:	4b6f      	ldr	r3, [pc, #444]	; (8003e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c4c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c4e:	4b6d      	ldr	r3, [pc, #436]	; (8003e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d063      	beq.n	8003d22 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c5a:	4b6a      	ldr	r3, [pc, #424]	; (8003e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	099b      	lsrs	r3, r3, #6
 8003c60:	2200      	movs	r2, #0
 8003c62:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c64:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c6c:	633b      	str	r3, [r7, #48]	; 0x30
 8003c6e:	2300      	movs	r3, #0
 8003c70:	637b      	str	r3, [r7, #52]	; 0x34
 8003c72:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c76:	4622      	mov	r2, r4
 8003c78:	462b      	mov	r3, r5
 8003c7a:	f04f 0000 	mov.w	r0, #0
 8003c7e:	f04f 0100 	mov.w	r1, #0
 8003c82:	0159      	lsls	r1, r3, #5
 8003c84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c88:	0150      	lsls	r0, r2, #5
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4621      	mov	r1, r4
 8003c90:	1a51      	subs	r1, r2, r1
 8003c92:	6139      	str	r1, [r7, #16]
 8003c94:	4629      	mov	r1, r5
 8003c96:	eb63 0301 	sbc.w	r3, r3, r1
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ca8:	4659      	mov	r1, fp
 8003caa:	018b      	lsls	r3, r1, #6
 8003cac:	4651      	mov	r1, sl
 8003cae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cb2:	4651      	mov	r1, sl
 8003cb4:	018a      	lsls	r2, r1, #6
 8003cb6:	4651      	mov	r1, sl
 8003cb8:	ebb2 0801 	subs.w	r8, r2, r1
 8003cbc:	4659      	mov	r1, fp
 8003cbe:	eb63 0901 	sbc.w	r9, r3, r1
 8003cc2:	f04f 0200 	mov.w	r2, #0
 8003cc6:	f04f 0300 	mov.w	r3, #0
 8003cca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cd6:	4690      	mov	r8, r2
 8003cd8:	4699      	mov	r9, r3
 8003cda:	4623      	mov	r3, r4
 8003cdc:	eb18 0303 	adds.w	r3, r8, r3
 8003ce0:	60bb      	str	r3, [r7, #8]
 8003ce2:	462b      	mov	r3, r5
 8003ce4:	eb49 0303 	adc.w	r3, r9, r3
 8003ce8:	60fb      	str	r3, [r7, #12]
 8003cea:	f04f 0200 	mov.w	r2, #0
 8003cee:	f04f 0300 	mov.w	r3, #0
 8003cf2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003cf6:	4629      	mov	r1, r5
 8003cf8:	024b      	lsls	r3, r1, #9
 8003cfa:	4621      	mov	r1, r4
 8003cfc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d00:	4621      	mov	r1, r4
 8003d02:	024a      	lsls	r2, r1, #9
 8003d04:	4610      	mov	r0, r2
 8003d06:	4619      	mov	r1, r3
 8003d08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d14:	f7fc fed6 	bl	8000ac4 <__aeabi_uldivmod>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d20:	e058      	b.n	8003dd4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d22:	4b38      	ldr	r3, [pc, #224]	; (8003e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	099b      	lsrs	r3, r3, #6
 8003d28:	2200      	movs	r2, #0
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	4611      	mov	r1, r2
 8003d2e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d32:	623b      	str	r3, [r7, #32]
 8003d34:	2300      	movs	r3, #0
 8003d36:	627b      	str	r3, [r7, #36]	; 0x24
 8003d38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d3c:	4642      	mov	r2, r8
 8003d3e:	464b      	mov	r3, r9
 8003d40:	f04f 0000 	mov.w	r0, #0
 8003d44:	f04f 0100 	mov.w	r1, #0
 8003d48:	0159      	lsls	r1, r3, #5
 8003d4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d4e:	0150      	lsls	r0, r2, #5
 8003d50:	4602      	mov	r2, r0
 8003d52:	460b      	mov	r3, r1
 8003d54:	4641      	mov	r1, r8
 8003d56:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d5a:	4649      	mov	r1, r9
 8003d5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d60:	f04f 0200 	mov.w	r2, #0
 8003d64:	f04f 0300 	mov.w	r3, #0
 8003d68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d74:	ebb2 040a 	subs.w	r4, r2, sl
 8003d78:	eb63 050b 	sbc.w	r5, r3, fp
 8003d7c:	f04f 0200 	mov.w	r2, #0
 8003d80:	f04f 0300 	mov.w	r3, #0
 8003d84:	00eb      	lsls	r3, r5, #3
 8003d86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d8a:	00e2      	lsls	r2, r4, #3
 8003d8c:	4614      	mov	r4, r2
 8003d8e:	461d      	mov	r5, r3
 8003d90:	4643      	mov	r3, r8
 8003d92:	18e3      	adds	r3, r4, r3
 8003d94:	603b      	str	r3, [r7, #0]
 8003d96:	464b      	mov	r3, r9
 8003d98:	eb45 0303 	adc.w	r3, r5, r3
 8003d9c:	607b      	str	r3, [r7, #4]
 8003d9e:	f04f 0200 	mov.w	r2, #0
 8003da2:	f04f 0300 	mov.w	r3, #0
 8003da6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003daa:	4629      	mov	r1, r5
 8003dac:	028b      	lsls	r3, r1, #10
 8003dae:	4621      	mov	r1, r4
 8003db0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003db4:	4621      	mov	r1, r4
 8003db6:	028a      	lsls	r2, r1, #10
 8003db8:	4610      	mov	r0, r2
 8003dba:	4619      	mov	r1, r3
 8003dbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	61bb      	str	r3, [r7, #24]
 8003dc2:	61fa      	str	r2, [r7, #28]
 8003dc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dc8:	f7fc fe7c 	bl	8000ac4 <__aeabi_uldivmod>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	460b      	mov	r3, r1
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003dd4:	4b0b      	ldr	r3, [pc, #44]	; (8003e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	0c1b      	lsrs	r3, r3, #16
 8003dda:	f003 0303 	and.w	r3, r3, #3
 8003dde:	3301      	adds	r3, #1
 8003de0:	005b      	lsls	r3, r3, #1
 8003de2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003de4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003de6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003dee:	e002      	b.n	8003df6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003df0:	4b05      	ldr	r3, [pc, #20]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x204>)
 8003df2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003df4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003df6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3750      	adds	r7, #80	; 0x50
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e02:	bf00      	nop
 8003e04:	40023800 	.word	0x40023800
 8003e08:	00f42400 	.word	0x00f42400
 8003e0c:	007a1200 	.word	0x007a1200

08003e10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e14:	4b03      	ldr	r3, [pc, #12]	; (8003e24 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e16:	681b      	ldr	r3, [r3, #0]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	20000000 	.word	0x20000000

08003e28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e2c:	f7ff fff0 	bl	8003e10 <HAL_RCC_GetHCLKFreq>
 8003e30:	4602      	mov	r2, r0
 8003e32:	4b05      	ldr	r3, [pc, #20]	; (8003e48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	0a9b      	lsrs	r3, r3, #10
 8003e38:	f003 0307 	and.w	r3, r3, #7
 8003e3c:	4903      	ldr	r1, [pc, #12]	; (8003e4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e3e:	5ccb      	ldrb	r3, [r1, r3]
 8003e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	40023800 	.word	0x40023800
 8003e4c:	08005728 	.word	0x08005728

08003e50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e54:	f7ff ffdc 	bl	8003e10 <HAL_RCC_GetHCLKFreq>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	4b05      	ldr	r3, [pc, #20]	; (8003e70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	0b5b      	lsrs	r3, r3, #13
 8003e60:	f003 0307 	and.w	r3, r3, #7
 8003e64:	4903      	ldr	r1, [pc, #12]	; (8003e74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e66:	5ccb      	ldrb	r3, [r1, r3]
 8003e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	40023800 	.word	0x40023800
 8003e74:	08005728 	.word	0x08005728

08003e78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e041      	b.n	8003f0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d106      	bne.n	8003ea4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7fd fec8 	bl	8001c34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4610      	mov	r0, r2
 8003eb8:	f000 fc4a 	bl	8004750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
	...

08003f18 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d001      	beq.n	8003f30 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e03c      	b.n	8003faa <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2202      	movs	r2, #2
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a1e      	ldr	r2, [pc, #120]	; (8003fb8 <HAL_TIM_Base_Start+0xa0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d018      	beq.n	8003f74 <HAL_TIM_Base_Start+0x5c>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f4a:	d013      	beq.n	8003f74 <HAL_TIM_Base_Start+0x5c>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a1a      	ldr	r2, [pc, #104]	; (8003fbc <HAL_TIM_Base_Start+0xa4>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d00e      	beq.n	8003f74 <HAL_TIM_Base_Start+0x5c>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a19      	ldr	r2, [pc, #100]	; (8003fc0 <HAL_TIM_Base_Start+0xa8>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d009      	beq.n	8003f74 <HAL_TIM_Base_Start+0x5c>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a17      	ldr	r2, [pc, #92]	; (8003fc4 <HAL_TIM_Base_Start+0xac>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d004      	beq.n	8003f74 <HAL_TIM_Base_Start+0x5c>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a16      	ldr	r2, [pc, #88]	; (8003fc8 <HAL_TIM_Base_Start+0xb0>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d111      	bne.n	8003f98 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 0307 	and.w	r3, r3, #7
 8003f7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2b06      	cmp	r3, #6
 8003f84:	d010      	beq.n	8003fa8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f042 0201 	orr.w	r2, r2, #1
 8003f94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f96:	e007      	b.n	8003fa8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0201 	orr.w	r2, r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3714      	adds	r7, #20
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	40010000 	.word	0x40010000
 8003fbc:	40000400 	.word	0x40000400
 8003fc0:	40000800 	.word	0x40000800
 8003fc4:	40000c00 	.word	0x40000c00
 8003fc8:	40014000 	.word	0x40014000

08003fcc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e041      	b.n	8004062 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d106      	bne.n	8003ff8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7fd fe7c 	bl	8001cf0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3304      	adds	r3, #4
 8004008:	4619      	mov	r1, r3
 800400a:	4610      	mov	r0, r2
 800400c:	f000 fba0 	bl	8004750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
	...

0800406c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d109      	bne.n	8004090 <HAL_TIM_PWM_Start+0x24>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b01      	cmp	r3, #1
 8004086:	bf14      	ite	ne
 8004088:	2301      	movne	r3, #1
 800408a:	2300      	moveq	r3, #0
 800408c:	b2db      	uxtb	r3, r3
 800408e:	e022      	b.n	80040d6 <HAL_TIM_PWM_Start+0x6a>
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	2b04      	cmp	r3, #4
 8004094:	d109      	bne.n	80040aa <HAL_TIM_PWM_Start+0x3e>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b01      	cmp	r3, #1
 80040a0:	bf14      	ite	ne
 80040a2:	2301      	movne	r3, #1
 80040a4:	2300      	moveq	r3, #0
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	e015      	b.n	80040d6 <HAL_TIM_PWM_Start+0x6a>
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	d109      	bne.n	80040c4 <HAL_TIM_PWM_Start+0x58>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	bf14      	ite	ne
 80040bc:	2301      	movne	r3, #1
 80040be:	2300      	moveq	r3, #0
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	e008      	b.n	80040d6 <HAL_TIM_PWM_Start+0x6a>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	bf14      	ite	ne
 80040d0:	2301      	movne	r3, #1
 80040d2:	2300      	moveq	r3, #0
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e068      	b.n	80041b0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d104      	bne.n	80040ee <HAL_TIM_PWM_Start+0x82>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2202      	movs	r2, #2
 80040e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040ec:	e013      	b.n	8004116 <HAL_TIM_PWM_Start+0xaa>
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	2b04      	cmp	r3, #4
 80040f2:	d104      	bne.n	80040fe <HAL_TIM_PWM_Start+0x92>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2202      	movs	r2, #2
 80040f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040fc:	e00b      	b.n	8004116 <HAL_TIM_PWM_Start+0xaa>
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	2b08      	cmp	r3, #8
 8004102:	d104      	bne.n	800410e <HAL_TIM_PWM_Start+0xa2>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2202      	movs	r2, #2
 8004108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800410c:	e003      	b.n	8004116 <HAL_TIM_PWM_Start+0xaa>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2202      	movs	r2, #2
 8004112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2201      	movs	r2, #1
 800411c:	6839      	ldr	r1, [r7, #0]
 800411e:	4618      	mov	r0, r3
 8004120:	f000 ff6c 	bl	8004ffc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a23      	ldr	r2, [pc, #140]	; (80041b8 <HAL_TIM_PWM_Start+0x14c>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d107      	bne.n	800413e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800413c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a1d      	ldr	r2, [pc, #116]	; (80041b8 <HAL_TIM_PWM_Start+0x14c>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d018      	beq.n	800417a <HAL_TIM_PWM_Start+0x10e>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004150:	d013      	beq.n	800417a <HAL_TIM_PWM_Start+0x10e>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a19      	ldr	r2, [pc, #100]	; (80041bc <HAL_TIM_PWM_Start+0x150>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d00e      	beq.n	800417a <HAL_TIM_PWM_Start+0x10e>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a17      	ldr	r2, [pc, #92]	; (80041c0 <HAL_TIM_PWM_Start+0x154>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d009      	beq.n	800417a <HAL_TIM_PWM_Start+0x10e>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a16      	ldr	r2, [pc, #88]	; (80041c4 <HAL_TIM_PWM_Start+0x158>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d004      	beq.n	800417a <HAL_TIM_PWM_Start+0x10e>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a14      	ldr	r2, [pc, #80]	; (80041c8 <HAL_TIM_PWM_Start+0x15c>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d111      	bne.n	800419e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2b06      	cmp	r3, #6
 800418a:	d010      	beq.n	80041ae <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f042 0201 	orr.w	r2, r2, #1
 800419a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800419c:	e007      	b.n	80041ae <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f042 0201 	orr.w	r2, r2, #1
 80041ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40010000 	.word	0x40010000
 80041bc:	40000400 	.word	0x40000400
 80041c0:	40000800 	.word	0x40000800
 80041c4:	40000c00 	.word	0x40000c00
 80041c8:	40014000 	.word	0x40014000

080041cc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e041      	b.n	8004262 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d106      	bne.n	80041f8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f839 	bl	800426a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2202      	movs	r2, #2
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	3304      	adds	r3, #4
 8004208:	4619      	mov	r1, r3
 800420a:	4610      	mov	r0, r2
 800420c:	f000 faa0 	bl	8004750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800426a:	b480      	push	{r7}
 800426c:	b083      	sub	sp, #12
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004272:	bf00      	nop
 8004274:	370c      	adds	r7, #12
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr

0800427e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b086      	sub	sp, #24
 8004282:	af00      	add	r7, sp, #0
 8004284:	60f8      	str	r0, [r7, #12]
 8004286:	60b9      	str	r1, [r7, #8]
 8004288:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800428a:	2300      	movs	r3, #0
 800428c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004294:	2b01      	cmp	r3, #1
 8004296:	d101      	bne.n	800429c <HAL_TIM_IC_ConfigChannel+0x1e>
 8004298:	2302      	movs	r3, #2
 800429a:	e088      	b.n	80043ae <HAL_TIM_IC_ConfigChannel+0x130>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d11b      	bne.n	80042e2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6818      	ldr	r0, [r3, #0]
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	6819      	ldr	r1, [r3, #0]
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	f000 fce7 	bl	8004c8c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	699a      	ldr	r2, [r3, #24]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 020c 	bic.w	r2, r2, #12
 80042cc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6999      	ldr	r1, [r3, #24]
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	430a      	orrs	r2, r1
 80042de:	619a      	str	r2, [r3, #24]
 80042e0:	e060      	b.n	80043a4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d11c      	bne.n	8004322 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6818      	ldr	r0, [r3, #0]
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	6819      	ldr	r1, [r3, #0]
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	f000 fd5f 	bl	8004dba <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	699a      	ldr	r2, [r3, #24]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800430a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6999      	ldr	r1, [r3, #24]
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	021a      	lsls	r2, r3, #8
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	430a      	orrs	r2, r1
 800431e:	619a      	str	r2, [r3, #24]
 8004320:	e040      	b.n	80043a4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b08      	cmp	r3, #8
 8004326:	d11b      	bne.n	8004360 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6818      	ldr	r0, [r3, #0]
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	6819      	ldr	r1, [r3, #0]
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f000 fdac 	bl	8004e94 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	69da      	ldr	r2, [r3, #28]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 020c 	bic.w	r2, r2, #12
 800434a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	69d9      	ldr	r1, [r3, #28]
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	689a      	ldr	r2, [r3, #8]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	430a      	orrs	r2, r1
 800435c:	61da      	str	r2, [r3, #28]
 800435e:	e021      	b.n	80043a4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b0c      	cmp	r3, #12
 8004364:	d11c      	bne.n	80043a0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6818      	ldr	r0, [r3, #0]
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	6819      	ldr	r1, [r3, #0]
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	f000 fdc9 	bl	8004f0c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	69da      	ldr	r2, [r3, #28]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004388:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	69d9      	ldr	r1, [r3, #28]
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	021a      	lsls	r2, r3, #8
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	61da      	str	r2, [r3, #28]
 800439e:	e001      	b.n	80043a4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3718      	adds	r7, #24
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
	...

080043b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043c4:	2300      	movs	r3, #0
 80043c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d101      	bne.n	80043d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80043d2:	2302      	movs	r3, #2
 80043d4:	e0ae      	b.n	8004534 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2b0c      	cmp	r3, #12
 80043e2:	f200 809f 	bhi.w	8004524 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80043e6:	a201      	add	r2, pc, #4	; (adr r2, 80043ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80043e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ec:	08004421 	.word	0x08004421
 80043f0:	08004525 	.word	0x08004525
 80043f4:	08004525 	.word	0x08004525
 80043f8:	08004525 	.word	0x08004525
 80043fc:	08004461 	.word	0x08004461
 8004400:	08004525 	.word	0x08004525
 8004404:	08004525 	.word	0x08004525
 8004408:	08004525 	.word	0x08004525
 800440c:	080044a3 	.word	0x080044a3
 8004410:	08004525 	.word	0x08004525
 8004414:	08004525 	.word	0x08004525
 8004418:	08004525 	.word	0x08004525
 800441c:	080044e3 	.word	0x080044e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68b9      	ldr	r1, [r7, #8]
 8004426:	4618      	mov	r0, r3
 8004428:	f000 fa12 	bl	8004850 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699a      	ldr	r2, [r3, #24]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0208 	orr.w	r2, r2, #8
 800443a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	699a      	ldr	r2, [r3, #24]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0204 	bic.w	r2, r2, #4
 800444a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6999      	ldr	r1, [r3, #24]
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	691a      	ldr	r2, [r3, #16]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	619a      	str	r2, [r3, #24]
      break;
 800445e:	e064      	b.n	800452a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68b9      	ldr	r1, [r7, #8]
 8004466:	4618      	mov	r0, r3
 8004468:	f000 fa58 	bl	800491c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	699a      	ldr	r2, [r3, #24]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800447a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	699a      	ldr	r2, [r3, #24]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800448a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6999      	ldr	r1, [r3, #24]
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	021a      	lsls	r2, r3, #8
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	430a      	orrs	r2, r1
 800449e:	619a      	str	r2, [r3, #24]
      break;
 80044a0:	e043      	b.n	800452a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68b9      	ldr	r1, [r7, #8]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 faa3 	bl	80049f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	69da      	ldr	r2, [r3, #28]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f042 0208 	orr.w	r2, r2, #8
 80044bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	69da      	ldr	r2, [r3, #28]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 0204 	bic.w	r2, r2, #4
 80044cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	69d9      	ldr	r1, [r3, #28]
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	691a      	ldr	r2, [r3, #16]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	430a      	orrs	r2, r1
 80044de:	61da      	str	r2, [r3, #28]
      break;
 80044e0:	e023      	b.n	800452a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68b9      	ldr	r1, [r7, #8]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f000 faed 	bl	8004ac8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	69da      	ldr	r2, [r3, #28]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	69da      	ldr	r2, [r3, #28]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800450c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	69d9      	ldr	r1, [r3, #28]
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	021a      	lsls	r2, r3, #8
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	61da      	str	r2, [r3, #28]
      break;
 8004522:	e002      	b.n	800452a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	75fb      	strb	r3, [r7, #23]
      break;
 8004528:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004532:	7dfb      	ldrb	r3, [r7, #23]
}
 8004534:	4618      	mov	r0, r3
 8004536:	3718      	adds	r7, #24
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004546:	2300      	movs	r3, #0
 8004548:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004550:	2b01      	cmp	r3, #1
 8004552:	d101      	bne.n	8004558 <HAL_TIM_ConfigClockSource+0x1c>
 8004554:	2302      	movs	r3, #2
 8004556:	e0b4      	b.n	80046c2 <HAL_TIM_ConfigClockSource+0x186>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004576:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800457e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004590:	d03e      	beq.n	8004610 <HAL_TIM_ConfigClockSource+0xd4>
 8004592:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004596:	f200 8087 	bhi.w	80046a8 <HAL_TIM_ConfigClockSource+0x16c>
 800459a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800459e:	f000 8086 	beq.w	80046ae <HAL_TIM_ConfigClockSource+0x172>
 80045a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045a6:	d87f      	bhi.n	80046a8 <HAL_TIM_ConfigClockSource+0x16c>
 80045a8:	2b70      	cmp	r3, #112	; 0x70
 80045aa:	d01a      	beq.n	80045e2 <HAL_TIM_ConfigClockSource+0xa6>
 80045ac:	2b70      	cmp	r3, #112	; 0x70
 80045ae:	d87b      	bhi.n	80046a8 <HAL_TIM_ConfigClockSource+0x16c>
 80045b0:	2b60      	cmp	r3, #96	; 0x60
 80045b2:	d050      	beq.n	8004656 <HAL_TIM_ConfigClockSource+0x11a>
 80045b4:	2b60      	cmp	r3, #96	; 0x60
 80045b6:	d877      	bhi.n	80046a8 <HAL_TIM_ConfigClockSource+0x16c>
 80045b8:	2b50      	cmp	r3, #80	; 0x50
 80045ba:	d03c      	beq.n	8004636 <HAL_TIM_ConfigClockSource+0xfa>
 80045bc:	2b50      	cmp	r3, #80	; 0x50
 80045be:	d873      	bhi.n	80046a8 <HAL_TIM_ConfigClockSource+0x16c>
 80045c0:	2b40      	cmp	r3, #64	; 0x40
 80045c2:	d058      	beq.n	8004676 <HAL_TIM_ConfigClockSource+0x13a>
 80045c4:	2b40      	cmp	r3, #64	; 0x40
 80045c6:	d86f      	bhi.n	80046a8 <HAL_TIM_ConfigClockSource+0x16c>
 80045c8:	2b30      	cmp	r3, #48	; 0x30
 80045ca:	d064      	beq.n	8004696 <HAL_TIM_ConfigClockSource+0x15a>
 80045cc:	2b30      	cmp	r3, #48	; 0x30
 80045ce:	d86b      	bhi.n	80046a8 <HAL_TIM_ConfigClockSource+0x16c>
 80045d0:	2b20      	cmp	r3, #32
 80045d2:	d060      	beq.n	8004696 <HAL_TIM_ConfigClockSource+0x15a>
 80045d4:	2b20      	cmp	r3, #32
 80045d6:	d867      	bhi.n	80046a8 <HAL_TIM_ConfigClockSource+0x16c>
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d05c      	beq.n	8004696 <HAL_TIM_ConfigClockSource+0x15a>
 80045dc:	2b10      	cmp	r3, #16
 80045de:	d05a      	beq.n	8004696 <HAL_TIM_ConfigClockSource+0x15a>
 80045e0:	e062      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6818      	ldr	r0, [r3, #0]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	6899      	ldr	r1, [r3, #8]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f000 fce3 	bl	8004fbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004604:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	609a      	str	r2, [r3, #8]
      break;
 800460e:	e04f      	b.n	80046b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6818      	ldr	r0, [r3, #0]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	6899      	ldr	r1, [r3, #8]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	f000 fccc 	bl	8004fbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689a      	ldr	r2, [r3, #8]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004632:	609a      	str	r2, [r3, #8]
      break;
 8004634:	e03c      	b.n	80046b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6818      	ldr	r0, [r3, #0]
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	6859      	ldr	r1, [r3, #4]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	461a      	mov	r2, r3
 8004644:	f000 fb8a 	bl	8004d5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2150      	movs	r1, #80	; 0x50
 800464e:	4618      	mov	r0, r3
 8004650:	f000 fc99 	bl	8004f86 <TIM_ITRx_SetConfig>
      break;
 8004654:	e02c      	b.n	80046b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6818      	ldr	r0, [r3, #0]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	6859      	ldr	r1, [r3, #4]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	461a      	mov	r2, r3
 8004664:	f000 fbe6 	bl	8004e34 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2160      	movs	r1, #96	; 0x60
 800466e:	4618      	mov	r0, r3
 8004670:	f000 fc89 	bl	8004f86 <TIM_ITRx_SetConfig>
      break;
 8004674:	e01c      	b.n	80046b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6818      	ldr	r0, [r3, #0]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	6859      	ldr	r1, [r3, #4]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	461a      	mov	r2, r3
 8004684:	f000 fb6a 	bl	8004d5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2140      	movs	r1, #64	; 0x40
 800468e:	4618      	mov	r0, r3
 8004690:	f000 fc79 	bl	8004f86 <TIM_ITRx_SetConfig>
      break;
 8004694:	e00c      	b.n	80046b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4619      	mov	r1, r3
 80046a0:	4610      	mov	r0, r2
 80046a2:	f000 fc70 	bl	8004f86 <TIM_ITRx_SetConfig>
      break;
 80046a6:	e003      	b.n	80046b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	73fb      	strb	r3, [r7, #15]
      break;
 80046ac:	e000      	b.n	80046b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80046ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b082      	sub	sp, #8
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
 80046d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d101      	bne.n	80046e2 <HAL_TIM_SlaveConfigSynchro+0x18>
 80046de:	2302      	movs	r3, #2
 80046e0:	e031      	b.n	8004746 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2202      	movs	r2, #2
 80046ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80046f2:	6839      	ldr	r1, [r7, #0]
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 fa37 	bl	8004b68 <TIM_SlaveTimer_SetConfig>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d009      	beq.n	8004714 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e018      	b.n	8004746 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004722:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68da      	ldr	r2, [r3, #12]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004732:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
	...

08004750 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a34      	ldr	r2, [pc, #208]	; (8004834 <TIM_Base_SetConfig+0xe4>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d00f      	beq.n	8004788 <TIM_Base_SetConfig+0x38>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800476e:	d00b      	beq.n	8004788 <TIM_Base_SetConfig+0x38>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a31      	ldr	r2, [pc, #196]	; (8004838 <TIM_Base_SetConfig+0xe8>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d007      	beq.n	8004788 <TIM_Base_SetConfig+0x38>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a30      	ldr	r2, [pc, #192]	; (800483c <TIM_Base_SetConfig+0xec>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d003      	beq.n	8004788 <TIM_Base_SetConfig+0x38>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a2f      	ldr	r2, [pc, #188]	; (8004840 <TIM_Base_SetConfig+0xf0>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d108      	bne.n	800479a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800478e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	4313      	orrs	r3, r2
 8004798:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a25      	ldr	r2, [pc, #148]	; (8004834 <TIM_Base_SetConfig+0xe4>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d01b      	beq.n	80047da <TIM_Base_SetConfig+0x8a>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047a8:	d017      	beq.n	80047da <TIM_Base_SetConfig+0x8a>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a22      	ldr	r2, [pc, #136]	; (8004838 <TIM_Base_SetConfig+0xe8>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d013      	beq.n	80047da <TIM_Base_SetConfig+0x8a>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a21      	ldr	r2, [pc, #132]	; (800483c <TIM_Base_SetConfig+0xec>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d00f      	beq.n	80047da <TIM_Base_SetConfig+0x8a>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a20      	ldr	r2, [pc, #128]	; (8004840 <TIM_Base_SetConfig+0xf0>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d00b      	beq.n	80047da <TIM_Base_SetConfig+0x8a>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a1f      	ldr	r2, [pc, #124]	; (8004844 <TIM_Base_SetConfig+0xf4>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d007      	beq.n	80047da <TIM_Base_SetConfig+0x8a>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a1e      	ldr	r2, [pc, #120]	; (8004848 <TIM_Base_SetConfig+0xf8>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d003      	beq.n	80047da <TIM_Base_SetConfig+0x8a>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a1d      	ldr	r2, [pc, #116]	; (800484c <TIM_Base_SetConfig+0xfc>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d108      	bne.n	80047ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a08      	ldr	r2, [pc, #32]	; (8004834 <TIM_Base_SetConfig+0xe4>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d103      	bne.n	8004820 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	691a      	ldr	r2, [r3, #16]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	615a      	str	r2, [r3, #20]
}
 8004826:	bf00      	nop
 8004828:	3714      	adds	r7, #20
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	40010000 	.word	0x40010000
 8004838:	40000400 	.word	0x40000400
 800483c:	40000800 	.word	0x40000800
 8004840:	40000c00 	.word	0x40000c00
 8004844:	40014000 	.word	0x40014000
 8004848:	40014400 	.word	0x40014400
 800484c:	40014800 	.word	0x40014800

08004850 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004850:	b480      	push	{r7}
 8004852:	b087      	sub	sp, #28
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	f023 0201 	bic.w	r2, r3, #1
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800487e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f023 0303 	bic.w	r3, r3, #3
 8004886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	4313      	orrs	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f023 0302 	bic.w	r3, r3, #2
 8004898:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a1c      	ldr	r2, [pc, #112]	; (8004918 <TIM_OC1_SetConfig+0xc8>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d10c      	bne.n	80048c6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	f023 0308 	bic.w	r3, r3, #8
 80048b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f023 0304 	bic.w	r3, r3, #4
 80048c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a13      	ldr	r2, [pc, #76]	; (8004918 <TIM_OC1_SetConfig+0xc8>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d111      	bne.n	80048f2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	621a      	str	r2, [r3, #32]
}
 800490c:	bf00      	nop
 800490e:	371c      	adds	r7, #28
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr
 8004918:	40010000 	.word	0x40010000

0800491c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800491c:	b480      	push	{r7}
 800491e:	b087      	sub	sp, #28
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	f023 0210 	bic.w	r2, r3, #16
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800494a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004952:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	021b      	lsls	r3, r3, #8
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	4313      	orrs	r3, r2
 800495e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	f023 0320 	bic.w	r3, r3, #32
 8004966:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	011b      	lsls	r3, r3, #4
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	4313      	orrs	r3, r2
 8004972:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a1e      	ldr	r2, [pc, #120]	; (80049f0 <TIM_OC2_SetConfig+0xd4>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d10d      	bne.n	8004998 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004982:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	011b      	lsls	r3, r3, #4
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	4313      	orrs	r3, r2
 800498e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004996:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a15      	ldr	r2, [pc, #84]	; (80049f0 <TIM_OC2_SetConfig+0xd4>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d113      	bne.n	80049c8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685a      	ldr	r2, [r3, #4]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	621a      	str	r2, [r3, #32]
}
 80049e2:	bf00      	nop
 80049e4:	371c      	adds	r7, #28
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	40010000 	.word	0x40010000

080049f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b087      	sub	sp, #28
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f023 0303 	bic.w	r3, r3, #3
 8004a2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	021b      	lsls	r3, r3, #8
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a1d      	ldr	r2, [pc, #116]	; (8004ac4 <TIM_OC3_SetConfig+0xd0>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d10d      	bne.n	8004a6e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	021b      	lsls	r3, r3, #8
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a14      	ldr	r2, [pc, #80]	; (8004ac4 <TIM_OC3_SetConfig+0xd0>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d113      	bne.n	8004a9e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	011b      	lsls	r3, r3, #4
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	011b      	lsls	r3, r3, #4
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	621a      	str	r2, [r3, #32]
}
 8004ab8:	bf00      	nop
 8004aba:	371c      	adds	r7, #28
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	40010000 	.word	0x40010000

08004ac8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b087      	sub	sp, #28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	69db      	ldr	r3, [r3, #28]
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	021b      	lsls	r3, r3, #8
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	031b      	lsls	r3, r3, #12
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a10      	ldr	r2, [pc, #64]	; (8004b64 <TIM_OC4_SetConfig+0x9c>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d109      	bne.n	8004b3c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	695b      	ldr	r3, [r3, #20]
 8004b34:	019b      	lsls	r3, r3, #6
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	621a      	str	r2, [r3, #32]
}
 8004b56:	bf00      	nop
 8004b58:	371c      	adds	r7, #28
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	40010000 	.word	0x40010000

08004b68 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b086      	sub	sp, #24
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b72:	2300      	movs	r3, #0
 8004b74:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b84:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	f023 0307 	bic.w	r3, r3, #7
 8004b96:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	2b70      	cmp	r3, #112	; 0x70
 8004bb0:	d01a      	beq.n	8004be8 <TIM_SlaveTimer_SetConfig+0x80>
 8004bb2:	2b70      	cmp	r3, #112	; 0x70
 8004bb4:	d860      	bhi.n	8004c78 <TIM_SlaveTimer_SetConfig+0x110>
 8004bb6:	2b60      	cmp	r3, #96	; 0x60
 8004bb8:	d054      	beq.n	8004c64 <TIM_SlaveTimer_SetConfig+0xfc>
 8004bba:	2b60      	cmp	r3, #96	; 0x60
 8004bbc:	d85c      	bhi.n	8004c78 <TIM_SlaveTimer_SetConfig+0x110>
 8004bbe:	2b50      	cmp	r3, #80	; 0x50
 8004bc0:	d046      	beq.n	8004c50 <TIM_SlaveTimer_SetConfig+0xe8>
 8004bc2:	2b50      	cmp	r3, #80	; 0x50
 8004bc4:	d858      	bhi.n	8004c78 <TIM_SlaveTimer_SetConfig+0x110>
 8004bc6:	2b40      	cmp	r3, #64	; 0x40
 8004bc8:	d019      	beq.n	8004bfe <TIM_SlaveTimer_SetConfig+0x96>
 8004bca:	2b40      	cmp	r3, #64	; 0x40
 8004bcc:	d854      	bhi.n	8004c78 <TIM_SlaveTimer_SetConfig+0x110>
 8004bce:	2b30      	cmp	r3, #48	; 0x30
 8004bd0:	d055      	beq.n	8004c7e <TIM_SlaveTimer_SetConfig+0x116>
 8004bd2:	2b30      	cmp	r3, #48	; 0x30
 8004bd4:	d850      	bhi.n	8004c78 <TIM_SlaveTimer_SetConfig+0x110>
 8004bd6:	2b20      	cmp	r3, #32
 8004bd8:	d051      	beq.n	8004c7e <TIM_SlaveTimer_SetConfig+0x116>
 8004bda:	2b20      	cmp	r3, #32
 8004bdc:	d84c      	bhi.n	8004c78 <TIM_SlaveTimer_SetConfig+0x110>
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d04d      	beq.n	8004c7e <TIM_SlaveTimer_SetConfig+0x116>
 8004be2:	2b10      	cmp	r3, #16
 8004be4:	d04b      	beq.n	8004c7e <TIM_SlaveTimer_SetConfig+0x116>
 8004be6:	e047      	b.n	8004c78 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6818      	ldr	r0, [r3, #0]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	68d9      	ldr	r1, [r3, #12]
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	f000 f9e0 	bl	8004fbc <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8004bfc:	e040      	b.n	8004c80 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2b05      	cmp	r3, #5
 8004c04:	d101      	bne.n	8004c0a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e03b      	b.n	8004c82 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	6a1a      	ldr	r2, [r3, #32]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f022 0201 	bic.w	r2, r2, #1
 8004c20:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c30:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	621a      	str	r2, [r3, #32]
      break;
 8004c4e:	e017      	b.n	8004c80 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6818      	ldr	r0, [r3, #0]
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	6899      	ldr	r1, [r3, #8]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	f000 f87d 	bl	8004d5c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004c62:	e00d      	b.n	8004c80 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6818      	ldr	r0, [r3, #0]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	6899      	ldr	r1, [r3, #8]
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	461a      	mov	r2, r3
 8004c72:	f000 f8df 	bl	8004e34 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004c76:	e003      	b.n	8004c80 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c7c:	e000      	b.n	8004c80 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004c7e:	bf00      	nop
  }

  return status;
 8004c80:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3718      	adds	r7, #24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
	...

08004c8c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b087      	sub	sp, #28
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
 8004c98:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	f023 0201 	bic.w	r2, r3, #1
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6a1b      	ldr	r3, [r3, #32]
 8004cb0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	4a24      	ldr	r2, [pc, #144]	; (8004d48 <TIM_TI1_SetConfig+0xbc>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d013      	beq.n	8004ce2 <TIM_TI1_SetConfig+0x56>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc0:	d00f      	beq.n	8004ce2 <TIM_TI1_SetConfig+0x56>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	4a21      	ldr	r2, [pc, #132]	; (8004d4c <TIM_TI1_SetConfig+0xc0>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d00b      	beq.n	8004ce2 <TIM_TI1_SetConfig+0x56>
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	4a20      	ldr	r2, [pc, #128]	; (8004d50 <TIM_TI1_SetConfig+0xc4>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d007      	beq.n	8004ce2 <TIM_TI1_SetConfig+0x56>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	4a1f      	ldr	r2, [pc, #124]	; (8004d54 <TIM_TI1_SetConfig+0xc8>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d003      	beq.n	8004ce2 <TIM_TI1_SetConfig+0x56>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	4a1e      	ldr	r2, [pc, #120]	; (8004d58 <TIM_TI1_SetConfig+0xcc>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d101      	bne.n	8004ce6 <TIM_TI1_SetConfig+0x5a>
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e000      	b.n	8004ce8 <TIM_TI1_SetConfig+0x5c>
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d008      	beq.n	8004cfe <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	f023 0303 	bic.w	r3, r3, #3
 8004cf2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	617b      	str	r3, [r7, #20]
 8004cfc:	e003      	b.n	8004d06 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	f043 0301 	orr.w	r3, r3, #1
 8004d04:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	011b      	lsls	r3, r3, #4
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	f023 030a 	bic.w	r3, r3, #10
 8004d20:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	f003 030a 	and.w	r3, r3, #10
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	621a      	str	r2, [r3, #32]
}
 8004d3a:	bf00      	nop
 8004d3c:	371c      	adds	r7, #28
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	40010000 	.word	0x40010000
 8004d4c:	40000400 	.word	0x40000400
 8004d50:	40000800 	.word	0x40000800
 8004d54:	40000c00 	.word	0x40000c00
 8004d58:	40014000 	.word	0x40014000

08004d5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b087      	sub	sp, #28
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6a1b      	ldr	r3, [r3, #32]
 8004d6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	f023 0201 	bic.w	r2, r3, #1
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	011b      	lsls	r3, r3, #4
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f023 030a 	bic.w	r3, r3, #10
 8004d98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	621a      	str	r2, [r3, #32]
}
 8004dae:	bf00      	nop
 8004db0:	371c      	adds	r7, #28
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr

08004dba <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b087      	sub	sp, #28
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	60f8      	str	r0, [r7, #12]
 8004dc2:	60b9      	str	r1, [r7, #8]
 8004dc4:	607a      	str	r2, [r7, #4]
 8004dc6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	f023 0210 	bic.w	r2, r3, #16
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004de6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	021b      	lsls	r3, r3, #8
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004df8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	031b      	lsls	r3, r3, #12
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e0c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	011b      	lsls	r3, r3, #4
 8004e12:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	621a      	str	r2, [r3, #32]
}
 8004e28:	bf00      	nop
 8004e2a:	371c      	adds	r7, #28
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b087      	sub	sp, #28
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6a1b      	ldr	r3, [r3, #32]
 8004e44:	f023 0210 	bic.w	r2, r3, #16
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e5e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	031b      	lsls	r3, r3, #12
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	011b      	lsls	r3, r3, #4
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	621a      	str	r2, [r3, #32]
}
 8004e88:	bf00      	nop
 8004e8a:	371c      	adds	r7, #28
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b087      	sub	sp, #28
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
 8004ea0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6a1b      	ldr	r3, [r3, #32]
 8004eb8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f023 0303 	bic.w	r3, r3, #3
 8004ec0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ed0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	011b      	lsls	r3, r3, #4
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004ee4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	021b      	lsls	r3, r3, #8
 8004eea:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	621a      	str	r2, [r3, #32]
}
 8004f00:	bf00      	nop
 8004f02:	371c      	adds	r7, #28
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b087      	sub	sp, #28
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
 8004f18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f38:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	021b      	lsls	r3, r3, #8
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f4a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	031b      	lsls	r3, r3, #12
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004f5e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	031b      	lsls	r3, r3, #12
 8004f64:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	621a      	str	r2, [r3, #32]
}
 8004f7a:	bf00      	nop
 8004f7c:	371c      	adds	r7, #28
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b085      	sub	sp, #20
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
 8004f8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	f043 0307 	orr.w	r3, r3, #7
 8004fa8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	609a      	str	r2, [r3, #8]
}
 8004fb0:	bf00      	nop
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b087      	sub	sp, #28
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
 8004fc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	021a      	lsls	r2, r3, #8
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	431a      	orrs	r2, r3
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	609a      	str	r2, [r3, #8]
}
 8004ff0:	bf00      	nop
 8004ff2:	371c      	adds	r7, #28
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b087      	sub	sp, #28
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	f003 031f 	and.w	r3, r3, #31
 800500e:	2201      	movs	r2, #1
 8005010:	fa02 f303 	lsl.w	r3, r2, r3
 8005014:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6a1a      	ldr	r2, [r3, #32]
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	43db      	mvns	r3, r3
 800501e:	401a      	ands	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6a1a      	ldr	r2, [r3, #32]
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	f003 031f 	and.w	r3, r3, #31
 800502e:	6879      	ldr	r1, [r7, #4]
 8005030:	fa01 f303 	lsl.w	r3, r1, r3
 8005034:	431a      	orrs	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	621a      	str	r2, [r3, #32]
}
 800503a:	bf00      	nop
 800503c:	371c      	adds	r7, #28
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
	...

08005048 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005058:	2b01      	cmp	r3, #1
 800505a:	d101      	bne.n	8005060 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800505c:	2302      	movs	r3, #2
 800505e:	e050      	b.n	8005102 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2202      	movs	r2, #2
 800506c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005086:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	4313      	orrs	r3, r2
 8005090:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a1c      	ldr	r2, [pc, #112]	; (8005110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d018      	beq.n	80050d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ac:	d013      	beq.n	80050d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a18      	ldr	r2, [pc, #96]	; (8005114 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d00e      	beq.n	80050d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a16      	ldr	r2, [pc, #88]	; (8005118 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d009      	beq.n	80050d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a15      	ldr	r2, [pc, #84]	; (800511c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d004      	beq.n	80050d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a13      	ldr	r2, [pc, #76]	; (8005120 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d10c      	bne.n	80050f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68ba      	ldr	r2, [r7, #8]
 80050ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3714      	adds	r7, #20
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	40010000 	.word	0x40010000
 8005114:	40000400 	.word	0x40000400
 8005118:	40000800 	.word	0x40000800
 800511c:	40000c00 	.word	0x40000c00
 8005120:	40014000 	.word	0x40014000

08005124 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e03f      	b.n	80051b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d106      	bne.n	8005150 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f7fc fe86 	bl	8001e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2224      	movs	r2, #36	; 0x24
 8005154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68da      	ldr	r2, [r3, #12]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005166:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 f829 	bl	80051c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	691a      	ldr	r2, [r3, #16]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800517c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	695a      	ldr	r2, [r3, #20]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800518c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68da      	ldr	r2, [r3, #12]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800519c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2220      	movs	r2, #32
 80051a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2220      	movs	r2, #32
 80051b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
	...

080051c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051c4:	b0c0      	sub	sp, #256	; 0x100
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80051d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051dc:	68d9      	ldr	r1, [r3, #12]
 80051de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	ea40 0301 	orr.w	r3, r0, r1
 80051e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80051ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ee:	689a      	ldr	r2, [r3, #8]
 80051f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	431a      	orrs	r2, r3
 80051f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	431a      	orrs	r2, r3
 8005200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005204:	69db      	ldr	r3, [r3, #28]
 8005206:	4313      	orrs	r3, r2
 8005208:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800520c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005218:	f021 010c 	bic.w	r1, r1, #12
 800521c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005226:	430b      	orrs	r3, r1
 8005228:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800522a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800523a:	6999      	ldr	r1, [r3, #24]
 800523c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	ea40 0301 	orr.w	r3, r0, r1
 8005246:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	4b8f      	ldr	r3, [pc, #572]	; (800548c <UART_SetConfig+0x2cc>)
 8005250:	429a      	cmp	r2, r3
 8005252:	d005      	beq.n	8005260 <UART_SetConfig+0xa0>
 8005254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	4b8d      	ldr	r3, [pc, #564]	; (8005490 <UART_SetConfig+0x2d0>)
 800525c:	429a      	cmp	r2, r3
 800525e:	d104      	bne.n	800526a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005260:	f7fe fdf6 	bl	8003e50 <HAL_RCC_GetPCLK2Freq>
 8005264:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005268:	e003      	b.n	8005272 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800526a:	f7fe fddd 	bl	8003e28 <HAL_RCC_GetPCLK1Freq>
 800526e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800527c:	f040 810c 	bne.w	8005498 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005280:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005284:	2200      	movs	r2, #0
 8005286:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800528a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800528e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005292:	4622      	mov	r2, r4
 8005294:	462b      	mov	r3, r5
 8005296:	1891      	adds	r1, r2, r2
 8005298:	65b9      	str	r1, [r7, #88]	; 0x58
 800529a:	415b      	adcs	r3, r3
 800529c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800529e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80052a2:	4621      	mov	r1, r4
 80052a4:	eb12 0801 	adds.w	r8, r2, r1
 80052a8:	4629      	mov	r1, r5
 80052aa:	eb43 0901 	adc.w	r9, r3, r1
 80052ae:	f04f 0200 	mov.w	r2, #0
 80052b2:	f04f 0300 	mov.w	r3, #0
 80052b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052c2:	4690      	mov	r8, r2
 80052c4:	4699      	mov	r9, r3
 80052c6:	4623      	mov	r3, r4
 80052c8:	eb18 0303 	adds.w	r3, r8, r3
 80052cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80052d0:	462b      	mov	r3, r5
 80052d2:	eb49 0303 	adc.w	r3, r9, r3
 80052d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80052da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80052e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80052ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80052ee:	460b      	mov	r3, r1
 80052f0:	18db      	adds	r3, r3, r3
 80052f2:	653b      	str	r3, [r7, #80]	; 0x50
 80052f4:	4613      	mov	r3, r2
 80052f6:	eb42 0303 	adc.w	r3, r2, r3
 80052fa:	657b      	str	r3, [r7, #84]	; 0x54
 80052fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005300:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005304:	f7fb fbde 	bl	8000ac4 <__aeabi_uldivmod>
 8005308:	4602      	mov	r2, r0
 800530a:	460b      	mov	r3, r1
 800530c:	4b61      	ldr	r3, [pc, #388]	; (8005494 <UART_SetConfig+0x2d4>)
 800530e:	fba3 2302 	umull	r2, r3, r3, r2
 8005312:	095b      	lsrs	r3, r3, #5
 8005314:	011c      	lsls	r4, r3, #4
 8005316:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800531a:	2200      	movs	r2, #0
 800531c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005320:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005324:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005328:	4642      	mov	r2, r8
 800532a:	464b      	mov	r3, r9
 800532c:	1891      	adds	r1, r2, r2
 800532e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005330:	415b      	adcs	r3, r3
 8005332:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005334:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005338:	4641      	mov	r1, r8
 800533a:	eb12 0a01 	adds.w	sl, r2, r1
 800533e:	4649      	mov	r1, r9
 8005340:	eb43 0b01 	adc.w	fp, r3, r1
 8005344:	f04f 0200 	mov.w	r2, #0
 8005348:	f04f 0300 	mov.w	r3, #0
 800534c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005350:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005354:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005358:	4692      	mov	sl, r2
 800535a:	469b      	mov	fp, r3
 800535c:	4643      	mov	r3, r8
 800535e:	eb1a 0303 	adds.w	r3, sl, r3
 8005362:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005366:	464b      	mov	r3, r9
 8005368:	eb4b 0303 	adc.w	r3, fp, r3
 800536c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800537c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005380:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005384:	460b      	mov	r3, r1
 8005386:	18db      	adds	r3, r3, r3
 8005388:	643b      	str	r3, [r7, #64]	; 0x40
 800538a:	4613      	mov	r3, r2
 800538c:	eb42 0303 	adc.w	r3, r2, r3
 8005390:	647b      	str	r3, [r7, #68]	; 0x44
 8005392:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005396:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800539a:	f7fb fb93 	bl	8000ac4 <__aeabi_uldivmod>
 800539e:	4602      	mov	r2, r0
 80053a0:	460b      	mov	r3, r1
 80053a2:	4611      	mov	r1, r2
 80053a4:	4b3b      	ldr	r3, [pc, #236]	; (8005494 <UART_SetConfig+0x2d4>)
 80053a6:	fba3 2301 	umull	r2, r3, r3, r1
 80053aa:	095b      	lsrs	r3, r3, #5
 80053ac:	2264      	movs	r2, #100	; 0x64
 80053ae:	fb02 f303 	mul.w	r3, r2, r3
 80053b2:	1acb      	subs	r3, r1, r3
 80053b4:	00db      	lsls	r3, r3, #3
 80053b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80053ba:	4b36      	ldr	r3, [pc, #216]	; (8005494 <UART_SetConfig+0x2d4>)
 80053bc:	fba3 2302 	umull	r2, r3, r3, r2
 80053c0:	095b      	lsrs	r3, r3, #5
 80053c2:	005b      	lsls	r3, r3, #1
 80053c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053c8:	441c      	add	r4, r3
 80053ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053ce:	2200      	movs	r2, #0
 80053d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80053d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80053d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80053dc:	4642      	mov	r2, r8
 80053de:	464b      	mov	r3, r9
 80053e0:	1891      	adds	r1, r2, r2
 80053e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80053e4:	415b      	adcs	r3, r3
 80053e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80053ec:	4641      	mov	r1, r8
 80053ee:	1851      	adds	r1, r2, r1
 80053f0:	6339      	str	r1, [r7, #48]	; 0x30
 80053f2:	4649      	mov	r1, r9
 80053f4:	414b      	adcs	r3, r1
 80053f6:	637b      	str	r3, [r7, #52]	; 0x34
 80053f8:	f04f 0200 	mov.w	r2, #0
 80053fc:	f04f 0300 	mov.w	r3, #0
 8005400:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005404:	4659      	mov	r1, fp
 8005406:	00cb      	lsls	r3, r1, #3
 8005408:	4651      	mov	r1, sl
 800540a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800540e:	4651      	mov	r1, sl
 8005410:	00ca      	lsls	r2, r1, #3
 8005412:	4610      	mov	r0, r2
 8005414:	4619      	mov	r1, r3
 8005416:	4603      	mov	r3, r0
 8005418:	4642      	mov	r2, r8
 800541a:	189b      	adds	r3, r3, r2
 800541c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005420:	464b      	mov	r3, r9
 8005422:	460a      	mov	r2, r1
 8005424:	eb42 0303 	adc.w	r3, r2, r3
 8005428:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800542c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005438:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800543c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005440:	460b      	mov	r3, r1
 8005442:	18db      	adds	r3, r3, r3
 8005444:	62bb      	str	r3, [r7, #40]	; 0x28
 8005446:	4613      	mov	r3, r2
 8005448:	eb42 0303 	adc.w	r3, r2, r3
 800544c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800544e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005452:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005456:	f7fb fb35 	bl	8000ac4 <__aeabi_uldivmod>
 800545a:	4602      	mov	r2, r0
 800545c:	460b      	mov	r3, r1
 800545e:	4b0d      	ldr	r3, [pc, #52]	; (8005494 <UART_SetConfig+0x2d4>)
 8005460:	fba3 1302 	umull	r1, r3, r3, r2
 8005464:	095b      	lsrs	r3, r3, #5
 8005466:	2164      	movs	r1, #100	; 0x64
 8005468:	fb01 f303 	mul.w	r3, r1, r3
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	00db      	lsls	r3, r3, #3
 8005470:	3332      	adds	r3, #50	; 0x32
 8005472:	4a08      	ldr	r2, [pc, #32]	; (8005494 <UART_SetConfig+0x2d4>)
 8005474:	fba2 2303 	umull	r2, r3, r2, r3
 8005478:	095b      	lsrs	r3, r3, #5
 800547a:	f003 0207 	and.w	r2, r3, #7
 800547e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4422      	add	r2, r4
 8005486:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005488:	e105      	b.n	8005696 <UART_SetConfig+0x4d6>
 800548a:	bf00      	nop
 800548c:	40011000 	.word	0x40011000
 8005490:	40011400 	.word	0x40011400
 8005494:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005498:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800549c:	2200      	movs	r2, #0
 800549e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80054a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80054a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80054aa:	4642      	mov	r2, r8
 80054ac:	464b      	mov	r3, r9
 80054ae:	1891      	adds	r1, r2, r2
 80054b0:	6239      	str	r1, [r7, #32]
 80054b2:	415b      	adcs	r3, r3
 80054b4:	627b      	str	r3, [r7, #36]	; 0x24
 80054b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80054ba:	4641      	mov	r1, r8
 80054bc:	1854      	adds	r4, r2, r1
 80054be:	4649      	mov	r1, r9
 80054c0:	eb43 0501 	adc.w	r5, r3, r1
 80054c4:	f04f 0200 	mov.w	r2, #0
 80054c8:	f04f 0300 	mov.w	r3, #0
 80054cc:	00eb      	lsls	r3, r5, #3
 80054ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054d2:	00e2      	lsls	r2, r4, #3
 80054d4:	4614      	mov	r4, r2
 80054d6:	461d      	mov	r5, r3
 80054d8:	4643      	mov	r3, r8
 80054da:	18e3      	adds	r3, r4, r3
 80054dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80054e0:	464b      	mov	r3, r9
 80054e2:	eb45 0303 	adc.w	r3, r5, r3
 80054e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80054ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80054f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80054fa:	f04f 0200 	mov.w	r2, #0
 80054fe:	f04f 0300 	mov.w	r3, #0
 8005502:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005506:	4629      	mov	r1, r5
 8005508:	008b      	lsls	r3, r1, #2
 800550a:	4621      	mov	r1, r4
 800550c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005510:	4621      	mov	r1, r4
 8005512:	008a      	lsls	r2, r1, #2
 8005514:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005518:	f7fb fad4 	bl	8000ac4 <__aeabi_uldivmod>
 800551c:	4602      	mov	r2, r0
 800551e:	460b      	mov	r3, r1
 8005520:	4b60      	ldr	r3, [pc, #384]	; (80056a4 <UART_SetConfig+0x4e4>)
 8005522:	fba3 2302 	umull	r2, r3, r3, r2
 8005526:	095b      	lsrs	r3, r3, #5
 8005528:	011c      	lsls	r4, r3, #4
 800552a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800552e:	2200      	movs	r2, #0
 8005530:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005534:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005538:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800553c:	4642      	mov	r2, r8
 800553e:	464b      	mov	r3, r9
 8005540:	1891      	adds	r1, r2, r2
 8005542:	61b9      	str	r1, [r7, #24]
 8005544:	415b      	adcs	r3, r3
 8005546:	61fb      	str	r3, [r7, #28]
 8005548:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800554c:	4641      	mov	r1, r8
 800554e:	1851      	adds	r1, r2, r1
 8005550:	6139      	str	r1, [r7, #16]
 8005552:	4649      	mov	r1, r9
 8005554:	414b      	adcs	r3, r1
 8005556:	617b      	str	r3, [r7, #20]
 8005558:	f04f 0200 	mov.w	r2, #0
 800555c:	f04f 0300 	mov.w	r3, #0
 8005560:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005564:	4659      	mov	r1, fp
 8005566:	00cb      	lsls	r3, r1, #3
 8005568:	4651      	mov	r1, sl
 800556a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800556e:	4651      	mov	r1, sl
 8005570:	00ca      	lsls	r2, r1, #3
 8005572:	4610      	mov	r0, r2
 8005574:	4619      	mov	r1, r3
 8005576:	4603      	mov	r3, r0
 8005578:	4642      	mov	r2, r8
 800557a:	189b      	adds	r3, r3, r2
 800557c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005580:	464b      	mov	r3, r9
 8005582:	460a      	mov	r2, r1
 8005584:	eb42 0303 	adc.w	r3, r2, r3
 8005588:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800558c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	67bb      	str	r3, [r7, #120]	; 0x78
 8005596:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005598:	f04f 0200 	mov.w	r2, #0
 800559c:	f04f 0300 	mov.w	r3, #0
 80055a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80055a4:	4649      	mov	r1, r9
 80055a6:	008b      	lsls	r3, r1, #2
 80055a8:	4641      	mov	r1, r8
 80055aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055ae:	4641      	mov	r1, r8
 80055b0:	008a      	lsls	r2, r1, #2
 80055b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80055b6:	f7fb fa85 	bl	8000ac4 <__aeabi_uldivmod>
 80055ba:	4602      	mov	r2, r0
 80055bc:	460b      	mov	r3, r1
 80055be:	4b39      	ldr	r3, [pc, #228]	; (80056a4 <UART_SetConfig+0x4e4>)
 80055c0:	fba3 1302 	umull	r1, r3, r3, r2
 80055c4:	095b      	lsrs	r3, r3, #5
 80055c6:	2164      	movs	r1, #100	; 0x64
 80055c8:	fb01 f303 	mul.w	r3, r1, r3
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	011b      	lsls	r3, r3, #4
 80055d0:	3332      	adds	r3, #50	; 0x32
 80055d2:	4a34      	ldr	r2, [pc, #208]	; (80056a4 <UART_SetConfig+0x4e4>)
 80055d4:	fba2 2303 	umull	r2, r3, r2, r3
 80055d8:	095b      	lsrs	r3, r3, #5
 80055da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055de:	441c      	add	r4, r3
 80055e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055e4:	2200      	movs	r2, #0
 80055e6:	673b      	str	r3, [r7, #112]	; 0x70
 80055e8:	677a      	str	r2, [r7, #116]	; 0x74
 80055ea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80055ee:	4642      	mov	r2, r8
 80055f0:	464b      	mov	r3, r9
 80055f2:	1891      	adds	r1, r2, r2
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	415b      	adcs	r3, r3
 80055f8:	60fb      	str	r3, [r7, #12]
 80055fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055fe:	4641      	mov	r1, r8
 8005600:	1851      	adds	r1, r2, r1
 8005602:	6039      	str	r1, [r7, #0]
 8005604:	4649      	mov	r1, r9
 8005606:	414b      	adcs	r3, r1
 8005608:	607b      	str	r3, [r7, #4]
 800560a:	f04f 0200 	mov.w	r2, #0
 800560e:	f04f 0300 	mov.w	r3, #0
 8005612:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005616:	4659      	mov	r1, fp
 8005618:	00cb      	lsls	r3, r1, #3
 800561a:	4651      	mov	r1, sl
 800561c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005620:	4651      	mov	r1, sl
 8005622:	00ca      	lsls	r2, r1, #3
 8005624:	4610      	mov	r0, r2
 8005626:	4619      	mov	r1, r3
 8005628:	4603      	mov	r3, r0
 800562a:	4642      	mov	r2, r8
 800562c:	189b      	adds	r3, r3, r2
 800562e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005630:	464b      	mov	r3, r9
 8005632:	460a      	mov	r2, r1
 8005634:	eb42 0303 	adc.w	r3, r2, r3
 8005638:	66fb      	str	r3, [r7, #108]	; 0x6c
 800563a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	663b      	str	r3, [r7, #96]	; 0x60
 8005644:	667a      	str	r2, [r7, #100]	; 0x64
 8005646:	f04f 0200 	mov.w	r2, #0
 800564a:	f04f 0300 	mov.w	r3, #0
 800564e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005652:	4649      	mov	r1, r9
 8005654:	008b      	lsls	r3, r1, #2
 8005656:	4641      	mov	r1, r8
 8005658:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800565c:	4641      	mov	r1, r8
 800565e:	008a      	lsls	r2, r1, #2
 8005660:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005664:	f7fb fa2e 	bl	8000ac4 <__aeabi_uldivmod>
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	4b0d      	ldr	r3, [pc, #52]	; (80056a4 <UART_SetConfig+0x4e4>)
 800566e:	fba3 1302 	umull	r1, r3, r3, r2
 8005672:	095b      	lsrs	r3, r3, #5
 8005674:	2164      	movs	r1, #100	; 0x64
 8005676:	fb01 f303 	mul.w	r3, r1, r3
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	011b      	lsls	r3, r3, #4
 800567e:	3332      	adds	r3, #50	; 0x32
 8005680:	4a08      	ldr	r2, [pc, #32]	; (80056a4 <UART_SetConfig+0x4e4>)
 8005682:	fba2 2303 	umull	r2, r3, r2, r3
 8005686:	095b      	lsrs	r3, r3, #5
 8005688:	f003 020f 	and.w	r2, r3, #15
 800568c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4422      	add	r2, r4
 8005694:	609a      	str	r2, [r3, #8]
}
 8005696:	bf00      	nop
 8005698:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800569c:	46bd      	mov	sp, r7
 800569e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056a2:	bf00      	nop
 80056a4:	51eb851f 	.word	0x51eb851f

080056a8 <__libc_init_array>:
 80056a8:	b570      	push	{r4, r5, r6, lr}
 80056aa:	4d0d      	ldr	r5, [pc, #52]	; (80056e0 <__libc_init_array+0x38>)
 80056ac:	4c0d      	ldr	r4, [pc, #52]	; (80056e4 <__libc_init_array+0x3c>)
 80056ae:	1b64      	subs	r4, r4, r5
 80056b0:	10a4      	asrs	r4, r4, #2
 80056b2:	2600      	movs	r6, #0
 80056b4:	42a6      	cmp	r6, r4
 80056b6:	d109      	bne.n	80056cc <__libc_init_array+0x24>
 80056b8:	4d0b      	ldr	r5, [pc, #44]	; (80056e8 <__libc_init_array+0x40>)
 80056ba:	4c0c      	ldr	r4, [pc, #48]	; (80056ec <__libc_init_array+0x44>)
 80056bc:	f000 f820 	bl	8005700 <_init>
 80056c0:	1b64      	subs	r4, r4, r5
 80056c2:	10a4      	asrs	r4, r4, #2
 80056c4:	2600      	movs	r6, #0
 80056c6:	42a6      	cmp	r6, r4
 80056c8:	d105      	bne.n	80056d6 <__libc_init_array+0x2e>
 80056ca:	bd70      	pop	{r4, r5, r6, pc}
 80056cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80056d0:	4798      	blx	r3
 80056d2:	3601      	adds	r6, #1
 80056d4:	e7ee      	b.n	80056b4 <__libc_init_array+0xc>
 80056d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80056da:	4798      	blx	r3
 80056dc:	3601      	adds	r6, #1
 80056de:	e7f2      	b.n	80056c6 <__libc_init_array+0x1e>
 80056e0:	08005738 	.word	0x08005738
 80056e4:	08005738 	.word	0x08005738
 80056e8:	08005738 	.word	0x08005738
 80056ec:	0800573c 	.word	0x0800573c

080056f0 <memset>:
 80056f0:	4402      	add	r2, r0
 80056f2:	4603      	mov	r3, r0
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d100      	bne.n	80056fa <memset+0xa>
 80056f8:	4770      	bx	lr
 80056fa:	f803 1b01 	strb.w	r1, [r3], #1
 80056fe:	e7f9      	b.n	80056f4 <memset+0x4>

08005700 <_init>:
 8005700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005702:	bf00      	nop
 8005704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005706:	bc08      	pop	{r3}
 8005708:	469e      	mov	lr, r3
 800570a:	4770      	bx	lr

0800570c <_fini>:
 800570c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800570e:	bf00      	nop
 8005710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005712:	bc08      	pop	{r3}
 8005714:	469e      	mov	lr, r3
 8005716:	4770      	bx	lr
