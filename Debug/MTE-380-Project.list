
MTE-380-Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b94  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005d2c  08005d2c  00015d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d44  08005d44  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08005d44  08005d44  00015d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d4c  08005d4c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d4c  08005d4c  00015d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d50  08005d50  00015d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005d54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  20000018  08005d68  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  08005d68  000202c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000118c4  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000221d  00000000  00000000  00031908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  00033b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e78  00000000  00000000  00034a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016345  00000000  00000000  000358d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000123f5  00000000  00000000  0004bc1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c0a6  00000000  00000000  0005e012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ea0b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042b4  00000000  00000000  000ea108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000018 	.word	0x20000018
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005d14 	.word	0x08005d14

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000001c 	.word	0x2000001c
 80001d4:	08005d14 	.word	0x08005d14

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2uiz>:
 8000a84:	004a      	lsls	r2, r1, #1
 8000a86:	d211      	bcs.n	8000aac <__aeabi_d2uiz+0x28>
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d211      	bcs.n	8000ab2 <__aeabi_d2uiz+0x2e>
 8000a8e:	d50d      	bpl.n	8000aac <__aeabi_d2uiz+0x28>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d40e      	bmi.n	8000ab8 <__aeabi_d2uiz+0x34>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_d2uiz+0x3a>
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0000 	mov.w	r0, #0
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b974 	b.w	8000e64 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9d08      	ldr	r5, [sp, #32]
 8000b9a:	4604      	mov	r4, r0
 8000b9c:	468e      	mov	lr, r1
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d14d      	bne.n	8000c3e <__udivmoddi4+0xaa>
 8000ba2:	428a      	cmp	r2, r1
 8000ba4:	4694      	mov	ip, r2
 8000ba6:	d969      	bls.n	8000c7c <__udivmoddi4+0xe8>
 8000ba8:	fab2 f282 	clz	r2, r2
 8000bac:	b152      	cbz	r2, 8000bc4 <__udivmoddi4+0x30>
 8000bae:	fa01 f302 	lsl.w	r3, r1, r2
 8000bb2:	f1c2 0120 	rsb	r1, r2, #32
 8000bb6:	fa20 f101 	lsr.w	r1, r0, r1
 8000bba:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bbe:	ea41 0e03 	orr.w	lr, r1, r3
 8000bc2:	4094      	lsls	r4, r2
 8000bc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc8:	0c21      	lsrs	r1, r4, #16
 8000bca:	fbbe f6f8 	udiv	r6, lr, r8
 8000bce:	fa1f f78c 	uxth.w	r7, ip
 8000bd2:	fb08 e316 	mls	r3, r8, r6, lr
 8000bd6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bda:	fb06 f107 	mul.w	r1, r6, r7
 8000bde:	4299      	cmp	r1, r3
 8000be0:	d90a      	bls.n	8000bf8 <__udivmoddi4+0x64>
 8000be2:	eb1c 0303 	adds.w	r3, ip, r3
 8000be6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bea:	f080 811f 	bcs.w	8000e2c <__udivmoddi4+0x298>
 8000bee:	4299      	cmp	r1, r3
 8000bf0:	f240 811c 	bls.w	8000e2c <__udivmoddi4+0x298>
 8000bf4:	3e02      	subs	r6, #2
 8000bf6:	4463      	add	r3, ip
 8000bf8:	1a5b      	subs	r3, r3, r1
 8000bfa:	b2a4      	uxth	r4, r4
 8000bfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c00:	fb08 3310 	mls	r3, r8, r0, r3
 8000c04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c08:	fb00 f707 	mul.w	r7, r0, r7
 8000c0c:	42a7      	cmp	r7, r4
 8000c0e:	d90a      	bls.n	8000c26 <__udivmoddi4+0x92>
 8000c10:	eb1c 0404 	adds.w	r4, ip, r4
 8000c14:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c18:	f080 810a 	bcs.w	8000e30 <__udivmoddi4+0x29c>
 8000c1c:	42a7      	cmp	r7, r4
 8000c1e:	f240 8107 	bls.w	8000e30 <__udivmoddi4+0x29c>
 8000c22:	4464      	add	r4, ip
 8000c24:	3802      	subs	r0, #2
 8000c26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2a:	1be4      	subs	r4, r4, r7
 8000c2c:	2600      	movs	r6, #0
 8000c2e:	b11d      	cbz	r5, 8000c38 <__udivmoddi4+0xa4>
 8000c30:	40d4      	lsrs	r4, r2
 8000c32:	2300      	movs	r3, #0
 8000c34:	e9c5 4300 	strd	r4, r3, [r5]
 8000c38:	4631      	mov	r1, r6
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d909      	bls.n	8000c56 <__udivmoddi4+0xc2>
 8000c42:	2d00      	cmp	r5, #0
 8000c44:	f000 80ef 	beq.w	8000e26 <__udivmoddi4+0x292>
 8000c48:	2600      	movs	r6, #0
 8000c4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000c4e:	4630      	mov	r0, r6
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	fab3 f683 	clz	r6, r3
 8000c5a:	2e00      	cmp	r6, #0
 8000c5c:	d14a      	bne.n	8000cf4 <__udivmoddi4+0x160>
 8000c5e:	428b      	cmp	r3, r1
 8000c60:	d302      	bcc.n	8000c68 <__udivmoddi4+0xd4>
 8000c62:	4282      	cmp	r2, r0
 8000c64:	f200 80f9 	bhi.w	8000e5a <__udivmoddi4+0x2c6>
 8000c68:	1a84      	subs	r4, r0, r2
 8000c6a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c6e:	2001      	movs	r0, #1
 8000c70:	469e      	mov	lr, r3
 8000c72:	2d00      	cmp	r5, #0
 8000c74:	d0e0      	beq.n	8000c38 <__udivmoddi4+0xa4>
 8000c76:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c7a:	e7dd      	b.n	8000c38 <__udivmoddi4+0xa4>
 8000c7c:	b902      	cbnz	r2, 8000c80 <__udivmoddi4+0xec>
 8000c7e:	deff      	udf	#255	; 0xff
 8000c80:	fab2 f282 	clz	r2, r2
 8000c84:	2a00      	cmp	r2, #0
 8000c86:	f040 8092 	bne.w	8000dae <__udivmoddi4+0x21a>
 8000c8a:	eba1 010c 	sub.w	r1, r1, ip
 8000c8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c92:	fa1f fe8c 	uxth.w	lr, ip
 8000c96:	2601      	movs	r6, #1
 8000c98:	0c20      	lsrs	r0, r4, #16
 8000c9a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c9e:	fb07 1113 	mls	r1, r7, r3, r1
 8000ca2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ca6:	fb0e f003 	mul.w	r0, lr, r3
 8000caa:	4288      	cmp	r0, r1
 8000cac:	d908      	bls.n	8000cc0 <__udivmoddi4+0x12c>
 8000cae:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0x12a>
 8000cb8:	4288      	cmp	r0, r1
 8000cba:	f200 80cb 	bhi.w	8000e54 <__udivmoddi4+0x2c0>
 8000cbe:	4643      	mov	r3, r8
 8000cc0:	1a09      	subs	r1, r1, r0
 8000cc2:	b2a4      	uxth	r4, r4
 8000cc4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cc8:	fb07 1110 	mls	r1, r7, r0, r1
 8000ccc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cd0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cd4:	45a6      	cmp	lr, r4
 8000cd6:	d908      	bls.n	8000cea <__udivmoddi4+0x156>
 8000cd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cdc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ce0:	d202      	bcs.n	8000ce8 <__udivmoddi4+0x154>
 8000ce2:	45a6      	cmp	lr, r4
 8000ce4:	f200 80bb 	bhi.w	8000e5e <__udivmoddi4+0x2ca>
 8000ce8:	4608      	mov	r0, r1
 8000cea:	eba4 040e 	sub.w	r4, r4, lr
 8000cee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cf2:	e79c      	b.n	8000c2e <__udivmoddi4+0x9a>
 8000cf4:	f1c6 0720 	rsb	r7, r6, #32
 8000cf8:	40b3      	lsls	r3, r6
 8000cfa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cfe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d02:	fa20 f407 	lsr.w	r4, r0, r7
 8000d06:	fa01 f306 	lsl.w	r3, r1, r6
 8000d0a:	431c      	orrs	r4, r3
 8000d0c:	40f9      	lsrs	r1, r7
 8000d0e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d12:	fa00 f306 	lsl.w	r3, r0, r6
 8000d16:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d1a:	0c20      	lsrs	r0, r4, #16
 8000d1c:	fa1f fe8c 	uxth.w	lr, ip
 8000d20:	fb09 1118 	mls	r1, r9, r8, r1
 8000d24:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d28:	fb08 f00e 	mul.w	r0, r8, lr
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	fa02 f206 	lsl.w	r2, r2, r6
 8000d32:	d90b      	bls.n	8000d4c <__udivmoddi4+0x1b8>
 8000d34:	eb1c 0101 	adds.w	r1, ip, r1
 8000d38:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d3c:	f080 8088 	bcs.w	8000e50 <__udivmoddi4+0x2bc>
 8000d40:	4288      	cmp	r0, r1
 8000d42:	f240 8085 	bls.w	8000e50 <__udivmoddi4+0x2bc>
 8000d46:	f1a8 0802 	sub.w	r8, r8, #2
 8000d4a:	4461      	add	r1, ip
 8000d4c:	1a09      	subs	r1, r1, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d54:	fb09 1110 	mls	r1, r9, r0, r1
 8000d58:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d60:	458e      	cmp	lr, r1
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x1e2>
 8000d64:	eb1c 0101 	adds.w	r1, ip, r1
 8000d68:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d6c:	d26c      	bcs.n	8000e48 <__udivmoddi4+0x2b4>
 8000d6e:	458e      	cmp	lr, r1
 8000d70:	d96a      	bls.n	8000e48 <__udivmoddi4+0x2b4>
 8000d72:	3802      	subs	r0, #2
 8000d74:	4461      	add	r1, ip
 8000d76:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d7a:	fba0 9402 	umull	r9, r4, r0, r2
 8000d7e:	eba1 010e 	sub.w	r1, r1, lr
 8000d82:	42a1      	cmp	r1, r4
 8000d84:	46c8      	mov	r8, r9
 8000d86:	46a6      	mov	lr, r4
 8000d88:	d356      	bcc.n	8000e38 <__udivmoddi4+0x2a4>
 8000d8a:	d053      	beq.n	8000e34 <__udivmoddi4+0x2a0>
 8000d8c:	b15d      	cbz	r5, 8000da6 <__udivmoddi4+0x212>
 8000d8e:	ebb3 0208 	subs.w	r2, r3, r8
 8000d92:	eb61 010e 	sbc.w	r1, r1, lr
 8000d96:	fa01 f707 	lsl.w	r7, r1, r7
 8000d9a:	fa22 f306 	lsr.w	r3, r2, r6
 8000d9e:	40f1      	lsrs	r1, r6
 8000da0:	431f      	orrs	r7, r3
 8000da2:	e9c5 7100 	strd	r7, r1, [r5]
 8000da6:	2600      	movs	r6, #0
 8000da8:	4631      	mov	r1, r6
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	f1c2 0320 	rsb	r3, r2, #32
 8000db2:	40d8      	lsrs	r0, r3
 8000db4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000db8:	fa21 f303 	lsr.w	r3, r1, r3
 8000dbc:	4091      	lsls	r1, r2
 8000dbe:	4301      	orrs	r1, r0
 8000dc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc4:	fa1f fe8c 	uxth.w	lr, ip
 8000dc8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000dcc:	fb07 3610 	mls	r6, r7, r0, r3
 8000dd0:	0c0b      	lsrs	r3, r1, #16
 8000dd2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dd6:	fb00 f60e 	mul.w	r6, r0, lr
 8000dda:	429e      	cmp	r6, r3
 8000ddc:	fa04 f402 	lsl.w	r4, r4, r2
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x260>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dea:	d22f      	bcs.n	8000e4c <__udivmoddi4+0x2b8>
 8000dec:	429e      	cmp	r6, r3
 8000dee:	d92d      	bls.n	8000e4c <__udivmoddi4+0x2b8>
 8000df0:	3802      	subs	r0, #2
 8000df2:	4463      	add	r3, ip
 8000df4:	1b9b      	subs	r3, r3, r6
 8000df6:	b289      	uxth	r1, r1
 8000df8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000dfc:	fb07 3316 	mls	r3, r7, r6, r3
 8000e00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e04:	fb06 f30e 	mul.w	r3, r6, lr
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x28a>
 8000e0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e10:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e14:	d216      	bcs.n	8000e44 <__udivmoddi4+0x2b0>
 8000e16:	428b      	cmp	r3, r1
 8000e18:	d914      	bls.n	8000e44 <__udivmoddi4+0x2b0>
 8000e1a:	3e02      	subs	r6, #2
 8000e1c:	4461      	add	r1, ip
 8000e1e:	1ac9      	subs	r1, r1, r3
 8000e20:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e24:	e738      	b.n	8000c98 <__udivmoddi4+0x104>
 8000e26:	462e      	mov	r6, r5
 8000e28:	4628      	mov	r0, r5
 8000e2a:	e705      	b.n	8000c38 <__udivmoddi4+0xa4>
 8000e2c:	4606      	mov	r6, r0
 8000e2e:	e6e3      	b.n	8000bf8 <__udivmoddi4+0x64>
 8000e30:	4618      	mov	r0, r3
 8000e32:	e6f8      	b.n	8000c26 <__udivmoddi4+0x92>
 8000e34:	454b      	cmp	r3, r9
 8000e36:	d2a9      	bcs.n	8000d8c <__udivmoddi4+0x1f8>
 8000e38:	ebb9 0802 	subs.w	r8, r9, r2
 8000e3c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e40:	3801      	subs	r0, #1
 8000e42:	e7a3      	b.n	8000d8c <__udivmoddi4+0x1f8>
 8000e44:	4646      	mov	r6, r8
 8000e46:	e7ea      	b.n	8000e1e <__udivmoddi4+0x28a>
 8000e48:	4620      	mov	r0, r4
 8000e4a:	e794      	b.n	8000d76 <__udivmoddi4+0x1e2>
 8000e4c:	4640      	mov	r0, r8
 8000e4e:	e7d1      	b.n	8000df4 <__udivmoddi4+0x260>
 8000e50:	46d0      	mov	r8, sl
 8000e52:	e77b      	b.n	8000d4c <__udivmoddi4+0x1b8>
 8000e54:	3b02      	subs	r3, #2
 8000e56:	4461      	add	r1, ip
 8000e58:	e732      	b.n	8000cc0 <__udivmoddi4+0x12c>
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	e709      	b.n	8000c72 <__udivmoddi4+0xde>
 8000e5e:	4464      	add	r4, ip
 8000e60:	3802      	subs	r0, #2
 8000e62:	e742      	b.n	8000cea <__udivmoddi4+0x156>

08000e64 <__aeabi_idiv0>:
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <hcsr04_init>:
 */
// Include files

#include "HCSR04.h"

HAL_StatusTypeDef hcsr04_init(TIM_HandleTypeDef *timer) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef ret = HAL_TIM_Base_Start(timer);
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f003 fb5b 	bl	800452c <HAL_TIM_Base_Start>
 8000e76:	4603      	mov	r3, r0
 8000e78:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e80:	4803      	ldr	r0, [pc, #12]	; (8000e90 <hcsr04_init+0x28>)
 8000e82:	f001 febb 	bl	8002bfc <HAL_GPIO_WritePin>

	return ret;
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40020000 	.word	0x40020000
 8000e94:	00000000 	.word	0x00000000

08000e98 <hcsr04_get_distance>:


void hcsr04_get_distance(HCSR04_HandleTypeDef *dev, TIM_HandleTypeDef *timer) {
 8000e98:	b590      	push	{r4, r7, lr}
 8000e9a:	b087      	sub	sp, #28
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]

	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ea8:	4835      	ldr	r0, [pc, #212]	; (8000f80 <hcsr04_get_distance+0xe8>)
 8000eaa:	f001 fea7 	bl	8002bfc <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(timer, 0);
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(timer) < 5);  // wait for 5 us
 8000eb6:	bf00      	nop
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ebe:	2b04      	cmp	r3, #4
 8000ec0:	d9fa      	bls.n	8000eb8 <hcsr04_get_distance+0x20>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ec8:	482d      	ldr	r0, [pc, #180]	; (8000f80 <hcsr04_get_distance+0xe8>)
 8000eca:	f001 fe97 	bl	8002bfc <HAL_GPIO_WritePin>

	uint32_t current_time = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8000ece:	f001 fbe3 	bl	8002698 <HAL_GetTick>
 8000ed2:	6178      	str	r0, [r7, #20]
	// wait for the echo pin to go high
	while (!(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN)) && current_time + 10 >  HAL_GetTick());
 8000ed4:	bf00      	nop
 8000ed6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eda:	482a      	ldr	r0, [pc, #168]	; (8000f84 <hcsr04_get_distance+0xec>)
 8000edc:	f001 fe76 	bl	8002bcc <HAL_GPIO_ReadPin>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d107      	bne.n	8000ef6 <hcsr04_get_distance+0x5e>
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	f103 040a 	add.w	r4, r3, #10
 8000eec:	f001 fbd4 	bl	8002698 <HAL_GetTick>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	429c      	cmp	r4, r3
 8000ef4:	d8ef      	bhi.n	8000ed6 <hcsr04_get_distance+0x3e>
	uint32_t init_value = __HAL_TIM_GET_COUNTER(timer);
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efc:	613b      	str	r3, [r7, #16]

	current_time = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8000efe:	f001 fbcb 	bl	8002698 <HAL_GetTick>
 8000f02:	6178      	str	r0, [r7, #20]
	// wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN)) && current_time + 10 > HAL_GetTick());
 8000f04:	bf00      	nop
 8000f06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f0a:	481e      	ldr	r0, [pc, #120]	; (8000f84 <hcsr04_get_distance+0xec>)
 8000f0c:	f001 fe5e 	bl	8002bcc <HAL_GPIO_ReadPin>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d007      	beq.n	8000f26 <hcsr04_get_distance+0x8e>
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	f103 040a 	add.w	r4, r3, #10
 8000f1c:	f001 fbbc 	bl	8002698 <HAL_GetTick>
 8000f20:	4603      	mov	r3, r0
 8000f22:	429c      	cmp	r4, r3
 8000f24:	d8ef      	bhi.n	8000f06 <hcsr04_get_distance+0x6e>
	uint32_t final_value = __HAL_TIM_GET_COUNTER(timer);
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2c:	60fb      	str	r3, [r7, #12]

	 dev->distance = (final_value - init_value) * 0.034/2;
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fa91 	bl	800045c <__aeabi_ui2d>
 8000f3a:	a30f      	add	r3, pc, #60	; (adr r3, 8000f78 <hcsr04_get_distance+0xe0>)
 8000f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f40:	f7ff fb06 	bl	8000550 <__aeabi_dmul>
 8000f44:	4602      	mov	r2, r0
 8000f46:	460b      	mov	r3, r1
 8000f48:	4610      	mov	r0, r2
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	f04f 0200 	mov.w	r2, #0
 8000f50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f54:	f7ff fc26 	bl	80007a4 <__aeabi_ddiv>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	4619      	mov	r1, r3
 8000f60:	f7ff fd90 	bl	8000a84 <__aeabi_d2uiz>
 8000f64:	4602      	mov	r2, r0
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	601a      	str	r2, [r3, #0]
}
 8000f6a:	bf00      	nop
 8000f6c:	371c      	adds	r7, #28
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd90      	pop	{r4, r7, pc}
 8000f72:	bf00      	nop
 8000f74:	f3af 8000 	nop.w
 8000f78:	b020c49c 	.word	0xb020c49c
 8000f7c:	3fa16872 	.word	0x3fa16872
 8000f80:	40020000 	.word	0x40020000
 8000f84:	40020800 	.word	0x40020800

08000f88 <l298n_init>:
 *      Author: ahuja
 */

#include "L298N.h"

HAL_StatusTypeDef l298n_init(TIM_HandleTypeDef *timer) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef ret = HAL_TIM_PWM_Start(timer, LEFT_MOTOR_CHANNEL);
 8000f90:	2104      	movs	r1, #4
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f003 fb74 	bl	8004680 <HAL_TIM_PWM_Start>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	73fb      	strb	r3, [r7, #15]

	ret = HAL_TIM_PWM_Start(timer, RIGHT_MOTOR_CHANNEL);
 8000f9c:	2108      	movs	r1, #8
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f003 fb6e 	bl	8004680 <HAL_TIM_PWM_Start>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	73fb      	strb	r3, [r7, #15]

	return ret;
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]

}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <l298n_brake>:

void l298n_brake(L298N_HandleTypeDef *dev) {
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]

	dev->left_duty = 0;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
	dev->right_duty = 0;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	605a      	str	r2, [r3, #4]

	set_motor_gpios(GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_RESET);
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2100      	movs	r1, #0
 8000fcc:	2000      	movs	r0, #0
 8000fce:	f000 f907 	bl	80011e0 <set_motor_gpios>

}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <l298n_drive_forward>:

void l298n_drive_forward(L298N_HandleTypeDef *dev, TIM_HandleTypeDef *timer, int duty_left, int duty_right) {
 8000fdc:	b590      	push	{r4, r7, lr}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
 8000fe8:	603b      	str	r3, [r7, #0]

	dev->left_duty = duty_left;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	601a      	str	r2, [r3, #0]
	dev->right_duty = duty_right;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	683a      	ldr	r2, [r7, #0]
 8000ff4:	605a      	str	r2, [r3, #4]

	set_motor_gpios(GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_SET, GPIO_PIN_RESET);
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f000 f8ef 	bl	80011e0 <set_motor_gpios>

	__HAL_TIM_SET_COMPARE(timer, LEFT_MOTOR_CHANNEL, ((double)dev->left_duty / 100) * COUNTER_PERIOD);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff fa38 	bl	800047c <__aeabi_i2d>
 800100c:	f04f 0200 	mov.w	r2, #0
 8001010:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <l298n_drive_forward+0xa4>)
 8001012:	f7ff fbc7 	bl	80007a4 <__aeabi_ddiv>
 8001016:	4602      	mov	r2, r0
 8001018:	460b      	mov	r3, r1
 800101a:	4610      	mov	r0, r2
 800101c:	4619      	mov	r1, r3
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	4b18      	ldr	r3, [pc, #96]	; (8001084 <l298n_drive_forward+0xa8>)
 8001024:	f7ff fa94 	bl	8000550 <__aeabi_dmul>
 8001028:	4602      	mov	r2, r0
 800102a:	460b      	mov	r3, r1
 800102c:	4610      	mov	r0, r2
 800102e:	4619      	mov	r1, r3
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	681c      	ldr	r4, [r3, #0]
 8001034:	f7ff fd26 	bl	8000a84 <__aeabi_d2uiz>
 8001038:	4603      	mov	r3, r0
 800103a:	63a3      	str	r3, [r4, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(timer, RIGHT_MOTOR_CHANNEL, ((double)dev->right_duty / 100) * COUNTER_PERIOD);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff fa1b 	bl	800047c <__aeabi_i2d>
 8001046:	f04f 0200 	mov.w	r2, #0
 800104a:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <l298n_drive_forward+0xa4>)
 800104c:	f7ff fbaa 	bl	80007a4 <__aeabi_ddiv>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4610      	mov	r0, r2
 8001056:	4619      	mov	r1, r3
 8001058:	f04f 0200 	mov.w	r2, #0
 800105c:	4b09      	ldr	r3, [pc, #36]	; (8001084 <l298n_drive_forward+0xa8>)
 800105e:	f7ff fa77 	bl	8000550 <__aeabi_dmul>
 8001062:	4602      	mov	r2, r0
 8001064:	460b      	mov	r3, r1
 8001066:	4610      	mov	r0, r2
 8001068:	4619      	mov	r1, r3
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	681c      	ldr	r4, [r3, #0]
 800106e:	f7ff fd09 	bl	8000a84 <__aeabi_d2uiz>
 8001072:	4603      	mov	r3, r0
 8001074:	63e3      	str	r3, [r4, #60]	; 0x3c

}
 8001076:	bf00      	nop
 8001078:	3714      	adds	r7, #20
 800107a:	46bd      	mov	sp, r7
 800107c:	bd90      	pop	{r4, r7, pc}
 800107e:	bf00      	nop
 8001080:	40590000 	.word	0x40590000
 8001084:	40838800 	.word	0x40838800

08001088 <l298n_drive_reverse>:

void l298n_drive_reverse(L298N_HandleTypeDef *dev, TIM_HandleTypeDef *timer, int duty_left, int duty_right) {
 8001088:	b590      	push	{r4, r7, lr}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
 8001094:	603b      	str	r3, [r7, #0]

	dev->left_duty = duty_left;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	601a      	str	r2, [r3, #0]
	dev->right_duty = duty_right;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	605a      	str	r2, [r3, #4]

	set_motor_gpios(GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_RESET, GPIO_PIN_SET);
 80010a2:	2301      	movs	r3, #1
 80010a4:	2200      	movs	r2, #0
 80010a6:	2100      	movs	r1, #0
 80010a8:	2001      	movs	r0, #1
 80010aa:	f000 f899 	bl	80011e0 <set_motor_gpios>

	__HAL_TIM_SET_COMPARE(timer, LEFT_MOTOR_CHANNEL, ((double)dev->left_duty / 100) * COUNTER_PERIOD);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff f9e2 	bl	800047c <__aeabi_i2d>
 80010b8:	f04f 0200 	mov.w	r2, #0
 80010bc:	4b1b      	ldr	r3, [pc, #108]	; (800112c <l298n_drive_reverse+0xa4>)
 80010be:	f7ff fb71 	bl	80007a4 <__aeabi_ddiv>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	4610      	mov	r0, r2
 80010c8:	4619      	mov	r1, r3
 80010ca:	f04f 0200 	mov.w	r2, #0
 80010ce:	4b18      	ldr	r3, [pc, #96]	; (8001130 <l298n_drive_reverse+0xa8>)
 80010d0:	f7ff fa3e 	bl	8000550 <__aeabi_dmul>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4610      	mov	r0, r2
 80010da:	4619      	mov	r1, r3
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	681c      	ldr	r4, [r3, #0]
 80010e0:	f7ff fcd0 	bl	8000a84 <__aeabi_d2uiz>
 80010e4:	4603      	mov	r3, r0
 80010e6:	63a3      	str	r3, [r4, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(timer, RIGHT_MOTOR_CHANNEL, ((double)dev->right_duty / 100) * COUNTER_PERIOD);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff f9c5 	bl	800047c <__aeabi_i2d>
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	4b0d      	ldr	r3, [pc, #52]	; (800112c <l298n_drive_reverse+0xa4>)
 80010f8:	f7ff fb54 	bl	80007a4 <__aeabi_ddiv>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	4610      	mov	r0, r2
 8001102:	4619      	mov	r1, r3
 8001104:	f04f 0200 	mov.w	r2, #0
 8001108:	4b09      	ldr	r3, [pc, #36]	; (8001130 <l298n_drive_reverse+0xa8>)
 800110a:	f7ff fa21 	bl	8000550 <__aeabi_dmul>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	4610      	mov	r0, r2
 8001114:	4619      	mov	r1, r3
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	681c      	ldr	r4, [r3, #0]
 800111a:	f7ff fcb3 	bl	8000a84 <__aeabi_d2uiz>
 800111e:	4603      	mov	r3, r0
 8001120:	63e3      	str	r3, [r4, #60]	; 0x3c

}
 8001122:	bf00      	nop
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	bd90      	pop	{r4, r7, pc}
 800112a:	bf00      	nop
 800112c:	40590000 	.word	0x40590000
 8001130:	40838800 	.word	0x40838800

08001134 <l298n_rotate_counter>:
	__HAL_TIM_SET_COMPARE(timer, LEFT_MOTOR_CHANNEL, ((double)dev->left_duty / 100) * COUNTER_PERIOD);
	__HAL_TIM_SET_COMPARE(timer, RIGHT_MOTOR_CHANNEL, ((double)dev->right_duty / 100) * COUNTER_PERIOD);

}

void l298n_rotate_counter(L298N_HandleTypeDef *dev, TIM_HandleTypeDef *timer, int duty_left, int duty_right) {
 8001134:	b590      	push	{r4, r7, lr}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
 8001140:	603b      	str	r3, [r7, #0]

	dev->left_duty = duty_left;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	601a      	str	r2, [r3, #0]
	dev->right_duty = duty_right;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	683a      	ldr	r2, [r7, #0]
 800114c:	605a      	str	r2, [r3, #4]

	set_motor_gpios(GPIO_PIN_SET, GPIO_PIN_RESET, GPIO_PIN_SET, GPIO_PIN_RESET);
 800114e:	2300      	movs	r3, #0
 8001150:	2201      	movs	r2, #1
 8001152:	2100      	movs	r1, #0
 8001154:	2001      	movs	r0, #1
 8001156:	f000 f843 	bl	80011e0 <set_motor_gpios>

	__HAL_TIM_SET_COMPARE(timer, LEFT_MOTOR_CHANNEL, ((double)dev->left_duty / 100) * COUNTER_PERIOD);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff f98c 	bl	800047c <__aeabi_i2d>
 8001164:	f04f 0200 	mov.w	r2, #0
 8001168:	4b1b      	ldr	r3, [pc, #108]	; (80011d8 <l298n_rotate_counter+0xa4>)
 800116a:	f7ff fb1b 	bl	80007a4 <__aeabi_ddiv>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4610      	mov	r0, r2
 8001174:	4619      	mov	r1, r3
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	4b18      	ldr	r3, [pc, #96]	; (80011dc <l298n_rotate_counter+0xa8>)
 800117c:	f7ff f9e8 	bl	8000550 <__aeabi_dmul>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4610      	mov	r0, r2
 8001186:	4619      	mov	r1, r3
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	681c      	ldr	r4, [r3, #0]
 800118c:	f7ff fc7a 	bl	8000a84 <__aeabi_d2uiz>
 8001190:	4603      	mov	r3, r0
 8001192:	63a3      	str	r3, [r4, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(timer, RIGHT_MOTOR_CHANNEL, ((double)dev->right_duty / 100) * COUNTER_PERIOD);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff f96f 	bl	800047c <__aeabi_i2d>
 800119e:	f04f 0200 	mov.w	r2, #0
 80011a2:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <l298n_rotate_counter+0xa4>)
 80011a4:	f7ff fafe 	bl	80007a4 <__aeabi_ddiv>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	4610      	mov	r0, r2
 80011ae:	4619      	mov	r1, r3
 80011b0:	f04f 0200 	mov.w	r2, #0
 80011b4:	4b09      	ldr	r3, [pc, #36]	; (80011dc <l298n_rotate_counter+0xa8>)
 80011b6:	f7ff f9cb 	bl	8000550 <__aeabi_dmul>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	4610      	mov	r0, r2
 80011c0:	4619      	mov	r1, r3
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	681c      	ldr	r4, [r3, #0]
 80011c6:	f7ff fc5d 	bl	8000a84 <__aeabi_d2uiz>
 80011ca:	4603      	mov	r3, r0
 80011cc:	63e3      	str	r3, [r4, #60]	; 0x3c

}
 80011ce:	bf00      	nop
 80011d0:	3714      	adds	r7, #20
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd90      	pop	{r4, r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40590000 	.word	0x40590000
 80011dc:	40838800 	.word	0x40838800

080011e0 <set_motor_gpios>:

void set_motor_gpios(GPIO_PinState in1, GPIO_PinState in2, GPIO_PinState in3, GPIO_PinState in4) {
 80011e0:	b590      	push	{r4, r7, lr}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4604      	mov	r4, r0
 80011e8:	4608      	mov	r0, r1
 80011ea:	4611      	mov	r1, r2
 80011ec:	461a      	mov	r2, r3
 80011ee:	4623      	mov	r3, r4
 80011f0:	71fb      	strb	r3, [r7, #7]
 80011f2:	4603      	mov	r3, r0
 80011f4:	71bb      	strb	r3, [r7, #6]
 80011f6:	460b      	mov	r3, r1
 80011f8:	717b      	strb	r3, [r7, #5]
 80011fa:	4613      	mov	r3, r2
 80011fc:	713b      	strb	r3, [r7, #4]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, in1);
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	461a      	mov	r2, r3
 8001202:	2180      	movs	r1, #128	; 0x80
 8001204:	480c      	ldr	r0, [pc, #48]	; (8001238 <set_motor_gpios+0x58>)
 8001206:	f001 fcf9 	bl	8002bfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, in2);
 800120a:	79bb      	ldrb	r3, [r7, #6]
 800120c:	461a      	mov	r2, r3
 800120e:	2120      	movs	r1, #32
 8001210:	480a      	ldr	r0, [pc, #40]	; (800123c <set_motor_gpios+0x5c>)
 8001212:	f001 fcf3 	bl	8002bfc <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, in3);
 8001216:	797b      	ldrb	r3, [r7, #5]
 8001218:	461a      	mov	r2, r3
 800121a:	2102      	movs	r1, #2
 800121c:	4808      	ldr	r0, [pc, #32]	; (8001240 <set_motor_gpios+0x60>)
 800121e:	f001 fced 	bl	8002bfc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, in4);
 8001222:	793b      	ldrb	r3, [r7, #4]
 8001224:	461a      	mov	r2, r3
 8001226:	2104      	movs	r1, #4
 8001228:	4805      	ldr	r0, [pc, #20]	; (8001240 <set_motor_gpios+0x60>)
 800122a:	f001 fce7 	bl	8002bfc <HAL_GPIO_WritePin>

}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	bd90      	pop	{r4, r7, pc}
 8001236:	bf00      	nop
 8001238:	40020000 	.word	0x40020000
 800123c:	40020800 	.word	0x40020800
 8001240:	40020400 	.word	0x40020400

08001244 <sg90_init>:
 *  Created on: Nov 10, 2023
 *      Author: avane
 */
#include "SG90.h"

HAL_StatusTypeDef sg90_init(TIM_HandleTypeDef *timer) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef ret = HAL_TIM_Base_Start(timer);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f003 f96d 	bl	800452c <HAL_TIM_Base_Start>
 8001252:	4603      	mov	r3, r0
 8001254:	73fb      	strb	r3, [r7, #15]

	ret = HAL_TIM_PWM_Start(timer, SERVO_CHANNEL);
 8001256:	2104      	movs	r1, #4
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f003 fa11 	bl	8004680 <HAL_TIM_PWM_Start>
 800125e:	4603      	mov	r3, r0
 8001260:	73fb      	strb	r3, [r7, #15]

	return ret;
 8001262:	7bfb      	ldrb	r3, [r7, #15]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <sg90_close>:

void sg90_close(SG90_HandleTypeDef *dev, TIM_HandleTypeDef *timer) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]

	for(int i = 775; i < 1750; i += 35){
 8001276:	f240 3307 	movw	r3, #775	; 0x307
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	e009      	b.n	8001292 <sg90_close+0x26>

	__HAL_TIM_SET_COMPARE(timer, SERVO_CHANNEL, i);
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	639a      	str	r2, [r3, #56]	; 0x38

	HAL_Delay(20);
 8001286:	2014      	movs	r0, #20
 8001288:	f001 fa12 	bl	80026b0 <HAL_Delay>
	for(int i = 775; i < 1750; i += 35){
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	3323      	adds	r3, #35	; 0x23
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	f240 62d5 	movw	r2, #1749	; 0x6d5
 8001298:	4293      	cmp	r3, r2
 800129a:	ddf0      	ble.n	800127e <sg90_close+0x12>

	}

	dev->position = 1;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2201      	movs	r2, #1
 80012a0:	601a      	str	r2, [r3, #0]
}
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <sg90_open>:

void sg90_open(SG90_HandleTypeDef *dev, TIM_HandleTypeDef *timer) {
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b084      	sub	sp, #16
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
 80012b2:	6039      	str	r1, [r7, #0]

	for(int i = 1750; i > 775; i -= 35){
 80012b4:	f240 63d6 	movw	r3, #1750	; 0x6d6
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	e009      	b.n	80012d0 <sg90_open+0x26>

	__HAL_TIM_SET_COMPARE(timer, SERVO_CHANNEL, i);
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	68fa      	ldr	r2, [r7, #12]
 80012c2:	639a      	str	r2, [r3, #56]	; 0x38

	HAL_Delay(20);
 80012c4:	2014      	movs	r0, #20
 80012c6:	f001 f9f3 	bl	80026b0 <HAL_Delay>
	for(int i = 1750; i > 775; i -= 35){
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	3b23      	subs	r3, #35	; 0x23
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f5b3 7f42 	cmp.w	r3, #776	; 0x308
 80012d6:	daf1      	bge.n	80012bc <sg90_open+0x12>

	}

	dev->position = 0;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
}
 80012de:	bf00      	nop
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <tcs34725_get_data>:

// Include files

#include "tcs34725.h"

HAL_StatusTypeDef tcs34725_get_data(TCS34725_HandleTypeDef *dev, I2C_HandleTypeDef *hi2c_device) {
 80012e6:	b5b0      	push	{r4, r5, r7, lr}
 80012e8:	b08a      	sub	sp, #40	; 0x28
 80012ea:	af02      	add	r7, sp, #8
 80012ec:	6078      	str	r0, [r7, #4]
 80012ee:	6039      	str	r1, [r7, #0]

    // TODO: Check status to see if data is valid and RGBC cycle has completed

	uint8_t val[8] = {0};
 80012f0:	2300      	movs	r3, #0
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]
	uint8_t command = TCS34725_ITER_COMM | TCS34725_RGBC_REG;
 80012f8:	23b4      	movs	r3, #180	; 0xb4
 80012fa:	73fb      	strb	r3, [r7, #15]

	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c_device, TCS34725_DEV_ADDR << 1, (uint8_t*)&command, 1, 1000);
 80012fc:	f107 020f 	add.w	r2, r7, #15
 8001300:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	2301      	movs	r3, #1
 8001308:	2152      	movs	r1, #82	; 0x52
 800130a:	6838      	ldr	r0, [r7, #0]
 800130c:	f001 fdd4 	bl	8002eb8 <HAL_I2C_Master_Transmit>
 8001310:	4603      	mov	r3, r0
 8001312:	77fb      	strb	r3, [r7, #31]

	ret = HAL_I2C_Master_Receive(hi2c_device, TCS34725_DEV_ADDR << 1, (uint8_t*)&val, 8, 1000);
 8001314:	f107 0210 	add.w	r2, r7, #16
 8001318:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	2308      	movs	r3, #8
 8001320:	2152      	movs	r1, #82	; 0x52
 8001322:	6838      	ldr	r0, [r7, #0]
 8001324:	f001 fec6 	bl	80030b4 <HAL_I2C_Master_Receive>
 8001328:	4603      	mov	r3, r0
 800132a:	77fb      	strb	r3, [r7, #31]

	dev->clear = TO_16_BIT(val[1], val[0]);
 800132c:	7c7b      	ldrb	r3, [r7, #17]
 800132e:	021b      	lsls	r3, r3, #8
 8001330:	b21a      	sxth	r2, r3
 8001332:	7c3b      	ldrb	r3, [r7, #16]
 8001334:	b21b      	sxth	r3, r3
 8001336:	4313      	orrs	r3, r2
 8001338:	b21b      	sxth	r3, r3
 800133a:	b29a      	uxth	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	809a      	strh	r2, [r3, #4]
	dev->red = TO_16_BIT(val[3], val[2]);
 8001340:	7cfb      	ldrb	r3, [r7, #19]
 8001342:	021b      	lsls	r3, r3, #8
 8001344:	b21a      	sxth	r2, r3
 8001346:	7cbb      	ldrb	r3, [r7, #18]
 8001348:	b21b      	sxth	r3, r3
 800134a:	4313      	orrs	r3, r2
 800134c:	b21b      	sxth	r3, r3
 800134e:	b29a      	uxth	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	80da      	strh	r2, [r3, #6]
	dev->green = TO_16_BIT(val[5], val[4]);
 8001354:	7d7b      	ldrb	r3, [r7, #21]
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	b21a      	sxth	r2, r3
 800135a:	7d3b      	ldrb	r3, [r7, #20]
 800135c:	b21b      	sxth	r3, r3
 800135e:	4313      	orrs	r3, r2
 8001360:	b21b      	sxth	r3, r3
 8001362:	b29a      	uxth	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	811a      	strh	r2, [r3, #8]
	dev->blue = TO_16_BIT(val[7], val[6]);
 8001368:	7dfb      	ldrb	r3, [r7, #23]
 800136a:	021b      	lsls	r3, r3, #8
 800136c:	b21a      	sxth	r2, r3
 800136e:	7dbb      	ldrb	r3, [r7, #22]
 8001370:	b21b      	sxth	r3, r3
 8001372:	4313      	orrs	r3, r2
 8001374:	b21b      	sxth	r3, r3
 8001376:	b29a      	uxth	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	815a      	strh	r2, [r3, #10]

	uint32_t sum = dev->red + dev->green + dev->blue;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	88db      	ldrh	r3, [r3, #6]
 8001380:	461a      	mov	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	891b      	ldrh	r3, [r3, #8]
 8001386:	4413      	add	r3, r2
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	8952      	ldrh	r2, [r2, #10]
 800138c:	4413      	add	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]

	dev->r_ratio = (double)dev->red / sum;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	88db      	ldrh	r3, [r3, #6]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff f861 	bl	800045c <__aeabi_ui2d>
 800139a:	4604      	mov	r4, r0
 800139c:	460d      	mov	r5, r1
 800139e:	69b8      	ldr	r0, [r7, #24]
 80013a0:	f7ff f85c 	bl	800045c <__aeabi_ui2d>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4620      	mov	r0, r4
 80013aa:	4629      	mov	r1, r5
 80013ac:	f7ff f9fa 	bl	80007a4 <__aeabi_ddiv>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	6879      	ldr	r1, [r7, #4]
 80013b6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dev->g_ratio = (double)dev->green / sum;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	891b      	ldrh	r3, [r3, #8]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff f84c 	bl	800045c <__aeabi_ui2d>
 80013c4:	4604      	mov	r4, r0
 80013c6:	460d      	mov	r5, r1
 80013c8:	69b8      	ldr	r0, [r7, #24]
 80013ca:	f7ff f847 	bl	800045c <__aeabi_ui2d>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4620      	mov	r0, r4
 80013d4:	4629      	mov	r1, r5
 80013d6:	f7ff f9e5 	bl	80007a4 <__aeabi_ddiv>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	e9c1 2306 	strd	r2, r3, [r1, #24]
	dev->b_ratio = (double)dev->blue / sum;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	895b      	ldrh	r3, [r3, #10]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff f837 	bl	800045c <__aeabi_ui2d>
 80013ee:	4604      	mov	r4, r0
 80013f0:	460d      	mov	r5, r1
 80013f2:	69b8      	ldr	r0, [r7, #24]
 80013f4:	f7ff f832 	bl	800045c <__aeabi_ui2d>
 80013f8:	4602      	mov	r2, r0
 80013fa:	460b      	mov	r3, r1
 80013fc:	4620      	mov	r0, r4
 80013fe:	4629      	mov	r1, r5
 8001400:	f7ff f9d0 	bl	80007a4 <__aeabi_ddiv>
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	6879      	ldr	r1, [r7, #4]
 800140a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    return ret;
 800140e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3720      	adds	r7, #32
 8001414:	46bd      	mov	sp, r7
 8001416:	bdb0      	pop	{r4, r5, r7, pc}

08001418 <tcs34725_get_device_id>:

HAL_StatusTypeDef tcs34725_get_device_id(TCS34725_HandleTypeDef *dev, I2C_HandleTypeDef *hi2c_device) {
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af02      	add	r7, sp, #8
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]

	uint8_t val = 0x00;
 8001422:	2300      	movs	r3, #0
 8001424:	73bb      	strb	r3, [r7, #14]
	uint8_t command = TCS34725_COMM_BIT | TCS34725_DEVICE_ID_REG;
 8001426:	2392      	movs	r3, #146	; 0x92
 8001428:	737b      	strb	r3, [r7, #13]

	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c_device, TCS34725_DEV_ADDR << 1, (uint8_t*)&command, 1, 1000);
 800142a:	f107 020d 	add.w	r2, r7, #13
 800142e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	2301      	movs	r3, #1
 8001436:	2152      	movs	r1, #82	; 0x52
 8001438:	6838      	ldr	r0, [r7, #0]
 800143a:	f001 fd3d 	bl	8002eb8 <HAL_I2C_Master_Transmit>
 800143e:	4603      	mov	r3, r0
 8001440:	73fb      	strb	r3, [r7, #15]

	ret = HAL_I2C_Master_Receive(hi2c_device, TCS34725_DEV_ADDR << 1, (uint8_t*)&val, 1, 1000);
 8001442:	f107 020e 	add.w	r2, r7, #14
 8001446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	2301      	movs	r3, #1
 800144e:	2152      	movs	r1, #82	; 0x52
 8001450:	6838      	ldr	r0, [r7, #0]
 8001452:	f001 fe2f 	bl	80030b4 <HAL_I2C_Master_Receive>
 8001456:	4603      	mov	r3, r0
 8001458:	73fb      	strb	r3, [r7, #15]


	dev->device_id = val;
 800145a:	7bba      	ldrb	r2, [r7, #14]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	731a      	strb	r2, [r3, #12]

	return ret;
 8001460:	7bfb      	ldrb	r3, [r7, #15]
}
 8001462:	4618      	mov	r0, r3
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <tcs34725_set_enable_reg>:

HAL_StatusTypeDef tcs34725_set_enable_reg(TCS34725_HandleTypeDef *dev, I2C_HandleTypeDef *hi2c_device) {
 800146a:	b580      	push	{r7, lr}
 800146c:	b086      	sub	sp, #24
 800146e:	af02      	add	r7, sp, #8
 8001470:	6078      	str	r0, [r7, #4]
 8001472:	6039      	str	r1, [r7, #0]

	uint8_t val = 0x00;
 8001474:	2300      	movs	r3, #0
 8001476:	73bb      	strb	r3, [r7, #14]
	uint8_t command[2] = {TCS34725_COMM_BIT | TCS34725_ENABLE_REG, 0x01};
 8001478:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800147c:	81bb      	strh	r3, [r7, #12]


	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c_device, TCS34725_DEV_ADDR << 1, (uint8_t*)&command, 2, 1000);
 800147e:	f107 020c 	add.w	r2, r7, #12
 8001482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	2302      	movs	r3, #2
 800148a:	2152      	movs	r1, #82	; 0x52
 800148c:	6838      	ldr	r0, [r7, #0]
 800148e:	f001 fd13 	bl	8002eb8 <HAL_I2C_Master_Transmit>
 8001492:	4603      	mov	r3, r0
 8001494:	73fb      	strb	r3, [r7, #15]

	command[1] = 0x03;
 8001496:	2303      	movs	r3, #3
 8001498:	737b      	strb	r3, [r7, #13]

	ret = HAL_I2C_Master_Transmit(hi2c_device, TCS34725_DEV_ADDR << 1, (uint8_t*)&command, 2, 1000);
 800149a:	f107 020c 	add.w	r2, r7, #12
 800149e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	2302      	movs	r3, #2
 80014a6:	2152      	movs	r1, #82	; 0x52
 80014a8:	6838      	ldr	r0, [r7, #0]
 80014aa:	f001 fd05 	bl	8002eb8 <HAL_I2C_Master_Transmit>
 80014ae:	4603      	mov	r3, r0
 80014b0:	73fb      	strb	r3, [r7, #15]

	ret = HAL_I2C_Master_Receive(hi2c_device, TCS34725_DEV_ADDR << 1, (uint8_t*)&val, 1, 1000);
 80014b2:	f107 020e 	add.w	r2, r7, #14
 80014b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	2301      	movs	r3, #1
 80014be:	2152      	movs	r1, #82	; 0x52
 80014c0:	6838      	ldr	r0, [r7, #0]
 80014c2:	f001 fdf7 	bl	80030b4 <HAL_I2C_Master_Receive>
 80014c6:	4603      	mov	r3, r0
 80014c8:	73fb      	strb	r3, [r7, #15]

	dev->enable_reg = val;
 80014ca:	7bba      	ldrb	r2, [r7, #14]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	735a      	strb	r2, [r3, #13]

	return ret;
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <tcs34725_set_timing_reg>:

HAL_StatusTypeDef tcs34725_set_timing_reg(TCS34725_HandleTypeDef *dev, I2C_HandleTypeDef *hi2c_device) {
 80014da:	b580      	push	{r7, lr}
 80014dc:	b086      	sub	sp, #24
 80014de:	af02      	add	r7, sp, #8
 80014e0:	6078      	str	r0, [r7, #4]
 80014e2:	6039      	str	r1, [r7, #0]

	uint8_t val = 0x00;
 80014e4:	2300      	movs	r3, #0
 80014e6:	73bb      	strb	r3, [r7, #14]
	uint8_t command[2] = {TCS34725_COMM_BIT | TCS34725_TIMING_REG, 0xFF};
 80014e8:	f64f 7381 	movw	r3, #65409	; 0xff81
 80014ec:	81bb      	strh	r3, [r7, #12]

	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c_device, TCS34725_DEV_ADDR << 1, (uint8_t*)&command, 2, 1000);
 80014ee:	f107 020c 	add.w	r2, r7, #12
 80014f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	2302      	movs	r3, #2
 80014fa:	2152      	movs	r1, #82	; 0x52
 80014fc:	6838      	ldr	r0, [r7, #0]
 80014fe:	f001 fcdb 	bl	8002eb8 <HAL_I2C_Master_Transmit>
 8001502:	4603      	mov	r3, r0
 8001504:	73fb      	strb	r3, [r7, #15]

	ret = HAL_I2C_Master_Receive(hi2c_device, TCS34725_DEV_ADDR << 1, (uint8_t*)&val, 1, 1000);
 8001506:	f107 020e 	add.w	r2, r7, #14
 800150a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	2301      	movs	r3, #1
 8001512:	2152      	movs	r1, #82	; 0x52
 8001514:	6838      	ldr	r0, [r7, #0]
 8001516:	f001 fdcd 	bl	80030b4 <HAL_I2C_Master_Receive>
 800151a:	4603      	mov	r3, r0
 800151c:	73fb      	strb	r3, [r7, #15]

	dev->device_id = val; // 0xFF
 800151e:	7bba      	ldrb	r2, [r7, #14]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	731a      	strb	r2, [r3, #12]

	return ret;
 8001524:	7bfb      	ldrb	r3, [r7, #15]
}
 8001526:	4618      	mov	r0, r3
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <getError>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

float getError() {
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef status1 = tcs34725_get_data(&rgb_sensor_left, &hi2c1);
 8001536:	491d      	ldr	r1, [pc, #116]	; (80015ac <getError+0x7c>)
 8001538:	481d      	ldr	r0, [pc, #116]	; (80015b0 <getError+0x80>)
 800153a:	f7ff fed4 	bl	80012e6 <tcs34725_get_data>
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status2 = tcs34725_get_data(&rgb_sensor_right, &hi2c3);
 8001542:	491c      	ldr	r1, [pc, #112]	; (80015b4 <getError+0x84>)
 8001544:	481c      	ldr	r0, [pc, #112]	; (80015b8 <getError+0x88>)
 8001546:	f7ff fece 	bl	80012e6 <tcs34725_get_data>
 800154a:	4603      	mov	r3, r0
 800154c:	71bb      	strb	r3, [r7, #6]

	if (status1 != HAL_OK || status2 != HAL_OK) {
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d102      	bne.n	800155a <getError+0x2a>
 8001554:	79bb      	ldrb	r3, [r7, #6]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d004      	beq.n	8001564 <getError+0x34>
		HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET);
 800155a:	2201      	movs	r2, #1
 800155c:	2120      	movs	r1, #32
 800155e:	4817      	ldr	r0, [pc, #92]	; (80015bc <getError+0x8c>)
 8001560:	f001 fb4c 	bl	8002bfc <HAL_GPIO_WritePin>
	}

    // Calculate the error based on the difference between sensor readings
    error = (rgb_sensor_left.r_ratio - rgb_sensor_right.r_ratio) * 100;
 8001564:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <getError+0x80>)
 8001566:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800156a:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <getError+0x88>)
 800156c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001570:	f7fe fe36 	bl	80001e0 <__aeabi_dsub>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4610      	mov	r0, r2
 800157a:	4619      	mov	r1, r3
 800157c:	f04f 0200 	mov.w	r2, #0
 8001580:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <getError+0x90>)
 8001582:	f7fe ffe5 	bl	8000550 <__aeabi_dmul>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	4610      	mov	r0, r2
 800158c:	4619      	mov	r1, r3
 800158e:	f7ff fa99 	bl	8000ac4 <__aeabi_d2f>
 8001592:	4603      	mov	r3, r0
 8001594:	4a0b      	ldr	r2, [pc, #44]	; (80015c4 <getError+0x94>)
 8001596:	6013      	str	r3, [r2, #0]

    return error;
 8001598:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <getError+0x94>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	ee07 3a90 	vmov	s15, r3
}
 80015a0:	eeb0 0a67 	vmov.f32	s0, s15
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	2000004c 	.word	0x2000004c
 80015b0:	20000260 	.word	0x20000260
 80015b4:	200000a0 	.word	0x200000a0
 80015b8:	20000288 	.word	0x20000288
 80015bc:	40020000 	.word	0x40020000
 80015c0:	40590000 	.word	0x40590000
 80015c4:	2000003c 	.word	0x2000003c

080015c8 <PID_Controller>:

void PID_Controller(PID_Controller_HandleTypeDef *pid) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
    // Get the proportional error
    float error = getError();
 80015d0:	f7ff ffae 	bl	8001530 <getError>
 80015d4:	ed87 0a05 	vstr	s0, [r7, #20]

    // Calculate the control signal
    float proportional = KP * error;
 80015d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80015dc:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80015e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015e4:	edc7 7a04 	vstr	s15, [r7, #16]
    float integral = KI * (error + pid->integral);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	ed93 7a01 	vldr	s14, [r3, #4]
 80015ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80015f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f6:	ee17 0a90 	vmov	r0, s15
 80015fa:	f7fe ff51 	bl	80004a0 <__aeabi_f2d>
 80015fe:	a346      	add	r3, pc, #280	; (adr r3, 8001718 <PID_Controller+0x150>)
 8001600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001604:	f7fe ffa4 	bl	8000550 <__aeabi_dmul>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	4610      	mov	r0, r2
 800160e:	4619      	mov	r1, r3
 8001610:	f7ff fa58 	bl	8000ac4 <__aeabi_d2f>
 8001614:	4603      	mov	r3, r0
 8001616:	60fb      	str	r3, [r7, #12]
    float derivative = KD * (error - pid->previous_error);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	edd3 7a00 	vldr	s15, [r3]
 800161e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001622:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001626:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800162a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800162e:	edc7 7a02 	vstr	s15, [r7, #8]

    // Calculate control signal
    control_signal = (int)(proportional + derivative + integral);
 8001632:	ed97 7a04 	vldr	s14, [r7, #16]
 8001636:	edd7 7a02 	vldr	s15, [r7, #8]
 800163a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800163e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001642:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001646:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800164a:	ee17 2a90 	vmov	r2, s15
 800164e:	4b2a      	ldr	r3, [pc, #168]	; (80016f8 <PID_Controller+0x130>)
 8001650:	601a      	str	r2, [r3, #0]

    // Update PID values for next iteration
    pid->previous_error = error;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	697a      	ldr	r2, [r7, #20]
 8001656:	601a      	str	r2, [r3, #0]
    pid->integral += error;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	ed93 7a01 	vldr	s14, [r3, #4]
 800165e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001662:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	edc3 7a01 	vstr	s15, [r3, #4]

    count++;
 800166c:	4b23      	ldr	r3, [pc, #140]	; (80016fc <PID_Controller+0x134>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	3301      	adds	r3, #1
 8001672:	4a22      	ldr	r2, [pc, #136]	; (80016fc <PID_Controller+0x134>)
 8001674:	6013      	str	r3, [r2, #0]

    if(count > 10) {
 8001676:	4b21      	ldr	r3, [pc, #132]	; (80016fc <PID_Controller+0x134>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2b0a      	cmp	r3, #10
 800167c:	dd06      	ble.n	800168c <PID_Controller+0xc4>
    	pid->integral = 0;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f04f 0200 	mov.w	r2, #0
 8001684:	605a      	str	r2, [r3, #4]
    	count = 0;
 8001686:	4b1d      	ldr	r3, [pc, #116]	; (80016fc <PID_Controller+0x134>)
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
    }

    // Adjust motor speeds based on control signal

    // Line is to the right, turn left
    left_speed = target_speed_left - control_signal;
 800168c:	4b1c      	ldr	r3, [pc, #112]	; (8001700 <PID_Controller+0x138>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <PID_Controller+0x130>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	4a1b      	ldr	r2, [pc, #108]	; (8001704 <PID_Controller+0x13c>)
 8001698:	6013      	str	r3, [r2, #0]
    right_speed = target_speed_right + control_signal;
 800169a:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <PID_Controller+0x140>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <PID_Controller+0x130>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4413      	add	r3, r2
 80016a4:	4a19      	ldr	r2, [pc, #100]	; (800170c <PID_Controller+0x144>)
 80016a6:	6013      	str	r3, [r2, #0]

    if (left_speed > 100) {
 80016a8:	4b16      	ldr	r3, [pc, #88]	; (8001704 <PID_Controller+0x13c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b64      	cmp	r3, #100	; 0x64
 80016ae:	dd02      	ble.n	80016b6 <PID_Controller+0xee>
    	left_speed = 100;
 80016b0:	4b14      	ldr	r3, [pc, #80]	; (8001704 <PID_Controller+0x13c>)
 80016b2:	2264      	movs	r2, #100	; 0x64
 80016b4:	601a      	str	r2, [r3, #0]
    }

    if (left_speed < 0) {
 80016b6:	4b13      	ldr	r3, [pc, #76]	; (8001704 <PID_Controller+0x13c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	da02      	bge.n	80016c4 <PID_Controller+0xfc>
    	left_speed = 0;
 80016be:	4b11      	ldr	r3, [pc, #68]	; (8001704 <PID_Controller+0x13c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
    }

    if (right_speed > 100) {
 80016c4:	4b11      	ldr	r3, [pc, #68]	; (800170c <PID_Controller+0x144>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b64      	cmp	r3, #100	; 0x64
 80016ca:	dd02      	ble.n	80016d2 <PID_Controller+0x10a>
    	right_speed = 100;
 80016cc:	4b0f      	ldr	r3, [pc, #60]	; (800170c <PID_Controller+0x144>)
 80016ce:	2264      	movs	r2, #100	; 0x64
 80016d0:	601a      	str	r2, [r3, #0]
    }

    if (right_speed < 0) {
 80016d2:	4b0e      	ldr	r3, [pc, #56]	; (800170c <PID_Controller+0x144>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	da02      	bge.n	80016e0 <PID_Controller+0x118>
    	right_speed = 0;
 80016da:	4b0c      	ldr	r3, [pc, #48]	; (800170c <PID_Controller+0x144>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
    }

    // Apply control to motors
    l298n_drive_forward(&motor_driver, &htim2, left_speed, right_speed);
 80016e0:	4b08      	ldr	r3, [pc, #32]	; (8001704 <PID_Controller+0x13c>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4b09      	ldr	r3, [pc, #36]	; (800170c <PID_Controller+0x144>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4909      	ldr	r1, [pc, #36]	; (8001710 <PID_Controller+0x148>)
 80016ea:	480a      	ldr	r0, [pc, #40]	; (8001714 <PID_Controller+0x14c>)
 80016ec:	f7ff fc76 	bl	8000fdc <l298n_drive_forward>

}
 80016f0:	bf00      	nop
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20000034 	.word	0x20000034
 80016fc:	20000038 	.word	0x20000038
 8001700:	20000000 	.word	0x20000000
 8001704:	20000040 	.word	0x20000040
 8001708:	20000004 	.word	0x20000004
 800170c:	20000044 	.word	0x20000044
 8001710:	2000013c 	.word	0x2000013c
 8001714:	200002b0 	.word	0x200002b0
 8001718:	47ae147b 	.word	0x47ae147b
 800171c:	3f947ae1 	.word	0x3f947ae1

08001720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001726:	f000 ff51 	bl	80025cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800172a:	f000 f997 	bl	8001a5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800172e:	f000 fc09 	bl	8001f44 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001732:	f000 fbdd 	bl	8001ef0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001736:	f000 fa59 	bl	8001bec <MX_TIM1_Init>
  MX_I2C1_Init();
 800173a:	f000 f9fb 	bl	8001b34 <MX_I2C1_Init>
  MX_I2C3_Init();
 800173e:	f000 fa27 	bl	8001b90 <MX_I2C3_Init>
  MX_TIM2_Init();
 8001742:	f000 fac9 	bl	8001cd8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001746:	f000 fb2b 	bl	8001da0 <MX_TIM3_Init>
  MX_TIM4_Init();
 800174a:	f000 fb83 	bl	8001e54 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  tcs34725_get_device_id(&rgb_sensor_left, &hi2c1);
 800174e:	49b4      	ldr	r1, [pc, #720]	; (8001a20 <main+0x300>)
 8001750:	48b4      	ldr	r0, [pc, #720]	; (8001a24 <main+0x304>)
 8001752:	f7ff fe61 	bl	8001418 <tcs34725_get_device_id>
  tcs34725_get_device_id(&rgb_sensor_right, &hi2c3);
 8001756:	49b4      	ldr	r1, [pc, #720]	; (8001a28 <main+0x308>)
 8001758:	48b4      	ldr	r0, [pc, #720]	; (8001a2c <main+0x30c>)
 800175a:	f7ff fe5d 	bl	8001418 <tcs34725_get_device_id>

  tcs34725_set_enable_reg(&rgb_sensor_left, &hi2c1);
 800175e:	49b0      	ldr	r1, [pc, #704]	; (8001a20 <main+0x300>)
 8001760:	48b0      	ldr	r0, [pc, #704]	; (8001a24 <main+0x304>)
 8001762:	f7ff fe82 	bl	800146a <tcs34725_set_enable_reg>
  tcs34725_set_enable_reg(&rgb_sensor_right, &hi2c3);
 8001766:	49b0      	ldr	r1, [pc, #704]	; (8001a28 <main+0x308>)
 8001768:	48b0      	ldr	r0, [pc, #704]	; (8001a2c <main+0x30c>)
 800176a:	f7ff fe7e 	bl	800146a <tcs34725_set_enable_reg>

  tcs34725_set_timing_reg(&rgb_sensor_left, &hi2c1);
 800176e:	49ac      	ldr	r1, [pc, #688]	; (8001a20 <main+0x300>)
 8001770:	48ac      	ldr	r0, [pc, #688]	; (8001a24 <main+0x304>)
 8001772:	f7ff feb2 	bl	80014da <tcs34725_set_timing_reg>
  tcs34725_set_timing_reg(&rgb_sensor_right, &hi2c3);
 8001776:	49ac      	ldr	r1, [pc, #688]	; (8001a28 <main+0x308>)
 8001778:	48ac      	ldr	r0, [pc, #688]	; (8001a2c <main+0x30c>)
 800177a:	f7ff feae 	bl	80014da <tcs34725_set_timing_reg>

  l298n_init(&htim2);
 800177e:	48ac      	ldr	r0, [pc, #688]	; (8001a30 <main+0x310>)
 8001780:	f7ff fc02 	bl	8000f88 <l298n_init>

  sg90_init(&htim3);
 8001784:	48ab      	ldr	r0, [pc, #684]	; (8001a34 <main+0x314>)
 8001786:	f7ff fd5d 	bl	8001244 <sg90_init>

  hcsr04_init(&htim4);
 800178a:	48ab      	ldr	r0, [pc, #684]	; (8001a38 <main+0x318>)
 800178c:	f7ff fb6c 	bl	8000e68 <hcsr04_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while(HAL_GPIO_ReadPin(GPIOC, B1_Pin));
 8001790:	bf00      	nop
 8001792:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001796:	48a9      	ldr	r0, [pc, #676]	; (8001a3c <main+0x31c>)
 8001798:	f001 fa18 	bl	8002bcc <HAL_GPIO_ReadPin>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1f7      	bne.n	8001792 <main+0x72>

  sg90_open(&gripper_servo, &htim3);
 80017a2:	49a4      	ldr	r1, [pc, #656]	; (8001a34 <main+0x314>)
 80017a4:	48a6      	ldr	r0, [pc, #664]	; (8001a40 <main+0x320>)
 80017a6:	f7ff fd80 	bl	80012aa <sg90_open>

  HAL_Delay(1000);
 80017aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017ae:	f000 ff7f 	bl	80026b0 <HAL_Delay>

  uint32_t start_time = HAL_GetTick();
 80017b2:	f000 ff71 	bl	8002698 <HAL_GetTick>
 80017b6:	6078      	str	r0, [r7, #4]

  l298n_drive_forward(&motor_driver, &htim2, 100, 100);
 80017b8:	2364      	movs	r3, #100	; 0x64
 80017ba:	2264      	movs	r2, #100	; 0x64
 80017bc:	499c      	ldr	r1, [pc, #624]	; (8001a30 <main+0x310>)
 80017be:	48a1      	ldr	r0, [pc, #644]	; (8001a44 <main+0x324>)
 80017c0:	f7ff fc0c 	bl	8000fdc <l298n_drive_forward>

  while (1)
  {

	  PID_Controller(&pid);
 80017c4:	48a0      	ldr	r0, [pc, #640]	; (8001a48 <main+0x328>)
 80017c6:	f7ff feff 	bl	80015c8 <PID_Controller>

	  if (HAL_GetTick() - start_time > 7000 && slowed == 0) {
 80017ca:	f000 ff65 	bl	8002698 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	f641 3258 	movw	r2, #7000	; 0x1b58
 80017d8:	4293      	cmp	r3, r2
 80017da:	d90c      	bls.n	80017f6 <main+0xd6>
 80017dc:	4b9b      	ldr	r3, [pc, #620]	; (8001a4c <main+0x32c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d108      	bne.n	80017f6 <main+0xd6>

		  target_speed_left = 33;
 80017e4:	4b9a      	ldr	r3, [pc, #616]	; (8001a50 <main+0x330>)
 80017e6:	2221      	movs	r2, #33	; 0x21
 80017e8:	601a      	str	r2, [r3, #0]
		  target_speed_right = 40;
 80017ea:	4b9a      	ldr	r3, [pc, #616]	; (8001a54 <main+0x334>)
 80017ec:	2228      	movs	r2, #40	; 0x28
 80017ee:	601a      	str	r2, [r3, #0]

		  slowed = 1;
 80017f0:	4b96      	ldr	r3, [pc, #600]	; (8001a4c <main+0x32c>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	601a      	str	r2, [r3, #0]
	  }

	  if (rgb_sensor_left.b_ratio > rgb_sensor_left.g_ratio || rgb_sensor_right.b_ratio > rgb_sensor_right.g_ratio) {
 80017f6:	4b8b      	ldr	r3, [pc, #556]	; (8001a24 <main+0x304>)
 80017f8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80017fc:	4b89      	ldr	r3, [pc, #548]	; (8001a24 <main+0x304>)
 80017fe:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001802:	f7ff f935 	bl	8000a70 <__aeabi_dcmpgt>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d10b      	bne.n	8001824 <main+0x104>
 800180c:	4b87      	ldr	r3, [pc, #540]	; (8001a2c <main+0x30c>)
 800180e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001812:	4b86      	ldr	r3, [pc, #536]	; (8001a2c <main+0x30c>)
 8001814:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001818:	f7ff f92a 	bl	8000a70 <__aeabi_dcmpgt>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	f000 80fd 	beq.w	8001a1e <main+0x2fe>

		  l298n_brake(&motor_driver);
 8001824:	4887      	ldr	r0, [pc, #540]	; (8001a44 <main+0x324>)
 8001826:	f7ff fbc4 	bl	8000fb2 <l298n_brake>
		  HAL_Delay(10);
 800182a:	200a      	movs	r0, #10
 800182c:	f000 ff40 	bl	80026b0 <HAL_Delay>


		  //First reverse after detecting blue
		  l298n_drive_reverse(&motor_driver, &htim2, 100, 100);
 8001830:	2364      	movs	r3, #100	; 0x64
 8001832:	2264      	movs	r2, #100	; 0x64
 8001834:	497e      	ldr	r1, [pc, #504]	; (8001a30 <main+0x310>)
 8001836:	4883      	ldr	r0, [pc, #524]	; (8001a44 <main+0x324>)
 8001838:	f7ff fc26 	bl	8001088 <l298n_drive_reverse>
		  HAL_Delay(30);
 800183c:	201e      	movs	r0, #30
 800183e:	f000 ff37 	bl	80026b0 <HAL_Delay>

		  l298n_drive_reverse(&motor_driver, &htim2, TARGET_SPEED_LEFT, TARGET_SPEED_RIGHT);
 8001842:	2330      	movs	r3, #48	; 0x30
 8001844:	2228      	movs	r2, #40	; 0x28
 8001846:	497a      	ldr	r1, [pc, #488]	; (8001a30 <main+0x310>)
 8001848:	487e      	ldr	r0, [pc, #504]	; (8001a44 <main+0x324>)
 800184a:	f7ff fc1d 	bl	8001088 <l298n_drive_reverse>
		  HAL_Delay(550);
 800184e:	f240 2026 	movw	r0, #550	; 0x226
 8001852:	f000 ff2d 	bl	80026b0 <HAL_Delay>

		  l298n_brake(&motor_driver);
 8001856:	487b      	ldr	r0, [pc, #492]	; (8001a44 <main+0x324>)
 8001858:	f7ff fbab 	bl	8000fb2 <l298n_brake>
		  HAL_Delay(10);
 800185c:	200a      	movs	r0, #10
 800185e:	f000 ff27 	bl	80026b0 <HAL_Delay>

		  hcsr04_get_distance(&ultrasonic_sensor, &htim3);
 8001862:	4974      	ldr	r1, [pc, #464]	; (8001a34 <main+0x314>)
 8001864:	487c      	ldr	r0, [pc, #496]	; (8001a58 <main+0x338>)
 8001866:	f7ff fb17 	bl	8000e98 <hcsr04_get_distance>

		  int counter = 0;
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]

		  while(!(ultrasonic_sensor.distance >= WALL_TURN_DISTANCE_MIN &&
 800186e:	e01e      	b.n	80018ae <main+0x18e>
				  ultrasonic_sensor.distance <= WALL_TURN_DISTANCE_MAX && counter >= 17)){

			  l298n_rotate_counter(&motor_driver, &htim2, 100, 100);
 8001870:	2364      	movs	r3, #100	; 0x64
 8001872:	2264      	movs	r2, #100	; 0x64
 8001874:	496e      	ldr	r1, [pc, #440]	; (8001a30 <main+0x310>)
 8001876:	4873      	ldr	r0, [pc, #460]	; (8001a44 <main+0x324>)
 8001878:	f7ff fc5c 	bl	8001134 <l298n_rotate_counter>
		      HAL_Delay(30);
 800187c:	201e      	movs	r0, #30
 800187e:	f000 ff17 	bl	80026b0 <HAL_Delay>

		      l298n_rotate_counter(&motor_driver, &htim2, 40, 48);
 8001882:	2330      	movs	r3, #48	; 0x30
 8001884:	2228      	movs	r2, #40	; 0x28
 8001886:	496a      	ldr	r1, [pc, #424]	; (8001a30 <main+0x310>)
 8001888:	486e      	ldr	r0, [pc, #440]	; (8001a44 <main+0x324>)
 800188a:	f7ff fc53 	bl	8001134 <l298n_rotate_counter>
		      HAL_Delay(50);
 800188e:	2032      	movs	r0, #50	; 0x32
 8001890:	f000 ff0e 	bl	80026b0 <HAL_Delay>

		      l298n_brake(&motor_driver);
 8001894:	486b      	ldr	r0, [pc, #428]	; (8001a44 <main+0x324>)
 8001896:	f7ff fb8c 	bl	8000fb2 <l298n_brake>
		      HAL_Delay(100);
 800189a:	2064      	movs	r0, #100	; 0x64
 800189c:	f000 ff08 	bl	80026b0 <HAL_Delay>

		      counter += 1;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	3301      	adds	r3, #1
 80018a4:	60fb      	str	r3, [r7, #12]

			  hcsr04_get_distance(&ultrasonic_sensor, &htim3);
 80018a6:	4963      	ldr	r1, [pc, #396]	; (8001a34 <main+0x314>)
 80018a8:	486b      	ldr	r0, [pc, #428]	; (8001a58 <main+0x338>)
 80018aa:	f7ff faf5 	bl	8000e98 <hcsr04_get_distance>
		  while(!(ultrasonic_sensor.distance >= WALL_TURN_DISTANCE_MIN &&
 80018ae:	4b6a      	ldr	r3, [pc, #424]	; (8001a58 <main+0x338>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2b15      	cmp	r3, #21
 80018b4:	d9dc      	bls.n	8001870 <main+0x150>
				  ultrasonic_sensor.distance <= WALL_TURN_DISTANCE_MAX && counter >= 17)){
 80018b6:	4b68      	ldr	r3, [pc, #416]	; (8001a58 <main+0x338>)
 80018b8:	681b      	ldr	r3, [r3, #0]
		  while(!(ultrasonic_sensor.distance >= WALL_TURN_DISTANCE_MIN &&
 80018ba:	2b1e      	cmp	r3, #30
 80018bc:	d8d8      	bhi.n	8001870 <main+0x150>
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2b10      	cmp	r3, #16
 80018c2:	ddd5      	ble.n	8001870 <main+0x150>

		  }

		  l298n_brake(&motor_driver);
 80018c4:	485f      	ldr	r0, [pc, #380]	; (8001a44 <main+0x324>)
 80018c6:	f7ff fb74 	bl	8000fb2 <l298n_brake>

		  HAL_Delay(10);
 80018ca:	200a      	movs	r0, #10
 80018cc:	f000 fef0 	bl	80026b0 <HAL_Delay>

		  while (ultrasonic_sensor.distance > 21) {
 80018d0:	e01b      	b.n	800190a <main+0x1ea>

			  l298n_drive_reverse(&motor_driver, &htim2, 100, 100);
 80018d2:	2364      	movs	r3, #100	; 0x64
 80018d4:	2264      	movs	r2, #100	; 0x64
 80018d6:	4956      	ldr	r1, [pc, #344]	; (8001a30 <main+0x310>)
 80018d8:	485a      	ldr	r0, [pc, #360]	; (8001a44 <main+0x324>)
 80018da:	f7ff fbd5 	bl	8001088 <l298n_drive_reverse>
			  HAL_Delay(30);
 80018de:	201e      	movs	r0, #30
 80018e0:	f000 fee6 	bl	80026b0 <HAL_Delay>

			  l298n_drive_reverse(&motor_driver, &htim2, 40, 48);
 80018e4:	2330      	movs	r3, #48	; 0x30
 80018e6:	2228      	movs	r2, #40	; 0x28
 80018e8:	4951      	ldr	r1, [pc, #324]	; (8001a30 <main+0x310>)
 80018ea:	4856      	ldr	r0, [pc, #344]	; (8001a44 <main+0x324>)
 80018ec:	f7ff fbcc 	bl	8001088 <l298n_drive_reverse>
			  HAL_Delay(50);
 80018f0:	2032      	movs	r0, #50	; 0x32
 80018f2:	f000 fedd 	bl	80026b0 <HAL_Delay>

			  l298n_brake(&motor_driver);
 80018f6:	4853      	ldr	r0, [pc, #332]	; (8001a44 <main+0x324>)
 80018f8:	f7ff fb5b 	bl	8000fb2 <l298n_brake>
			  HAL_Delay(100);
 80018fc:	2064      	movs	r0, #100	; 0x64
 80018fe:	f000 fed7 	bl	80026b0 <HAL_Delay>

			  hcsr04_get_distance(&ultrasonic_sensor, &htim3);
 8001902:	494c      	ldr	r1, [pc, #304]	; (8001a34 <main+0x314>)
 8001904:	4854      	ldr	r0, [pc, #336]	; (8001a58 <main+0x338>)
 8001906:	f7ff fac7 	bl	8000e98 <hcsr04_get_distance>
		  while (ultrasonic_sensor.distance > 21) {
 800190a:	4b53      	ldr	r3, [pc, #332]	; (8001a58 <main+0x338>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2b15      	cmp	r3, #21
 8001910:	d8df      	bhi.n	80018d2 <main+0x1b2>
		  }

		  l298n_brake(&motor_driver);
 8001912:	484c      	ldr	r0, [pc, #304]	; (8001a44 <main+0x324>)
 8001914:	f7ff fb4d 	bl	8000fb2 <l298n_brake>

		  HAL_Delay(10);
 8001918:	200a      	movs	r0, #10
 800191a:	f000 fec9 	bl	80026b0 <HAL_Delay>

		  sg90_close(&gripper_servo, &htim3);
 800191e:	4945      	ldr	r1, [pc, #276]	; (8001a34 <main+0x314>)
 8001920:	4847      	ldr	r0, [pc, #284]	; (8001a40 <main+0x320>)
 8001922:	f7ff fca3 	bl	800126c <sg90_close>

		  HAL_Delay(10);
 8001926:	200a      	movs	r0, #10
 8001928:	f000 fec2 	bl	80026b0 <HAL_Delay>

		  l298n_drive_forward(&motor_driver, &htim2, 100, 100);
 800192c:	2364      	movs	r3, #100	; 0x64
 800192e:	2264      	movs	r2, #100	; 0x64
 8001930:	493f      	ldr	r1, [pc, #252]	; (8001a30 <main+0x310>)
 8001932:	4844      	ldr	r0, [pc, #272]	; (8001a44 <main+0x324>)
 8001934:	f7ff fb52 	bl	8000fdc <l298n_drive_forward>
		  HAL_Delay(30);
 8001938:	201e      	movs	r0, #30
 800193a:	f000 feb9 	bl	80026b0 <HAL_Delay>

		  l298n_drive_forward(&motor_driver, &htim2, 40, 48);
 800193e:	2330      	movs	r3, #48	; 0x30
 8001940:	2228      	movs	r2, #40	; 0x28
 8001942:	493b      	ldr	r1, [pc, #236]	; (8001a30 <main+0x310>)
 8001944:	483f      	ldr	r0, [pc, #252]	; (8001a44 <main+0x324>)
 8001946:	f7ff fb49 	bl	8000fdc <l298n_drive_forward>
		  HAL_Delay(430);
 800194a:	f44f 70d7 	mov.w	r0, #430	; 0x1ae
 800194e:	f000 feaf 	bl	80026b0 <HAL_Delay>

		  l298n_brake(&motor_driver);
 8001952:	483c      	ldr	r0, [pc, #240]	; (8001a44 <main+0x324>)
 8001954:	f7ff fb2d 	bl	8000fb2 <l298n_brake>

		  for (int i = 0; i < 10; i++) {
 8001958:	2300      	movs	r3, #0
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	e01a      	b.n	8001994 <main+0x274>

			  l298n_rotate_counter(&motor_driver, &htim2, 100, 100);
 800195e:	2364      	movs	r3, #100	; 0x64
 8001960:	2264      	movs	r2, #100	; 0x64
 8001962:	4933      	ldr	r1, [pc, #204]	; (8001a30 <main+0x310>)
 8001964:	4837      	ldr	r0, [pc, #220]	; (8001a44 <main+0x324>)
 8001966:	f7ff fbe5 	bl	8001134 <l298n_rotate_counter>
			  HAL_Delay(30);
 800196a:	201e      	movs	r0, #30
 800196c:	f000 fea0 	bl	80026b0 <HAL_Delay>

			  l298n_rotate_counter(&motor_driver, &htim2, 40, 48);
 8001970:	2330      	movs	r3, #48	; 0x30
 8001972:	2228      	movs	r2, #40	; 0x28
 8001974:	492e      	ldr	r1, [pc, #184]	; (8001a30 <main+0x310>)
 8001976:	4833      	ldr	r0, [pc, #204]	; (8001a44 <main+0x324>)
 8001978:	f7ff fbdc 	bl	8001134 <l298n_rotate_counter>
			  HAL_Delay(50);
 800197c:	2032      	movs	r0, #50	; 0x32
 800197e:	f000 fe97 	bl	80026b0 <HAL_Delay>

			  l298n_brake(&motor_driver);
 8001982:	4830      	ldr	r0, [pc, #192]	; (8001a44 <main+0x324>)
 8001984:	f7ff fb15 	bl	8000fb2 <l298n_brake>
			  HAL_Delay(100);
 8001988:	2064      	movs	r0, #100	; 0x64
 800198a:	f000 fe91 	bl	80026b0 <HAL_Delay>
		  for (int i = 0; i < 10; i++) {
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	3301      	adds	r3, #1
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	2b09      	cmp	r3, #9
 8001998:	dde1      	ble.n	800195e <main+0x23e>
		  }


		  l298n_drive_reverse(&motor_driver, &htim2, 100, 100);
 800199a:	2364      	movs	r3, #100	; 0x64
 800199c:	2264      	movs	r2, #100	; 0x64
 800199e:	4924      	ldr	r1, [pc, #144]	; (8001a30 <main+0x310>)
 80019a0:	4828      	ldr	r0, [pc, #160]	; (8001a44 <main+0x324>)
 80019a2:	f7ff fb71 	bl	8001088 <l298n_drive_reverse>
		  HAL_Delay(30);
 80019a6:	201e      	movs	r0, #30
 80019a8:	f000 fe82 	bl	80026b0 <HAL_Delay>

		  l298n_drive_reverse(&motor_driver, &htim2, 40, 48);
 80019ac:	2330      	movs	r3, #48	; 0x30
 80019ae:	2228      	movs	r2, #40	; 0x28
 80019b0:	491f      	ldr	r1, [pc, #124]	; (8001a30 <main+0x310>)
 80019b2:	4824      	ldr	r0, [pc, #144]	; (8001a44 <main+0x324>)
 80019b4:	f7ff fb68 	bl	8001088 <l298n_drive_reverse>
		  HAL_Delay(800);
 80019b8:	f44f 7048 	mov.w	r0, #800	; 0x320
 80019bc:	f000 fe78 	bl	80026b0 <HAL_Delay>

		  l298n_brake(&motor_driver);
 80019c0:	4820      	ldr	r0, [pc, #128]	; (8001a44 <main+0x324>)
 80019c2:	f7ff faf6 	bl	8000fb2 <l298n_brake>

		  HAL_Delay(10);
 80019c6:	200a      	movs	r0, #10
 80019c8:	f000 fe72 	bl	80026b0 <HAL_Delay>

		  sg90_open(&gripper_servo, &htim3);
 80019cc:	4919      	ldr	r1, [pc, #100]	; (8001a34 <main+0x314>)
 80019ce:	481c      	ldr	r0, [pc, #112]	; (8001a40 <main+0x320>)
 80019d0:	f7ff fc6b 	bl	80012aa <sg90_open>

		  HAL_Delay(500);
 80019d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019d8:	f000 fe6a 	bl	80026b0 <HAL_Delay>

		  l298n_drive_forward(&motor_driver, &htim2, 100, 100);
 80019dc:	2364      	movs	r3, #100	; 0x64
 80019de:	2264      	movs	r2, #100	; 0x64
 80019e0:	4913      	ldr	r1, [pc, #76]	; (8001a30 <main+0x310>)
 80019e2:	4818      	ldr	r0, [pc, #96]	; (8001a44 <main+0x324>)
 80019e4:	f7ff fafa 	bl	8000fdc <l298n_drive_forward>
		  HAL_Delay(30);
 80019e8:	201e      	movs	r0, #30
 80019ea:	f000 fe61 	bl	80026b0 <HAL_Delay>

		  l298n_drive_forward(&motor_driver, &htim2, 40, 48);
 80019ee:	2330      	movs	r3, #48	; 0x30
 80019f0:	2228      	movs	r2, #40	; 0x28
 80019f2:	490f      	ldr	r1, [pc, #60]	; (8001a30 <main+0x310>)
 80019f4:	4813      	ldr	r0, [pc, #76]	; (8001a44 <main+0x324>)
 80019f6:	f7ff faf1 	bl	8000fdc <l298n_drive_forward>
		  HAL_Delay(750);
 80019fa:	f240 20ee 	movw	r0, #750	; 0x2ee
 80019fe:	f000 fe57 	bl	80026b0 <HAL_Delay>

		  l298n_brake(&motor_driver);
 8001a02:	4810      	ldr	r0, [pc, #64]	; (8001a44 <main+0x324>)
 8001a04:	f7ff fad5 	bl	8000fb2 <l298n_brake>

		  HAL_Delay(500);
 8001a08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a0c:	f000 fe50 	bl	80026b0 <HAL_Delay>

		  target_speed_left = 40;
 8001a10:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <main+0x330>)
 8001a12:	2228      	movs	r2, #40	; 0x28
 8001a14:	601a      	str	r2, [r3, #0]
		  target_speed_right = 48;
 8001a16:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <main+0x334>)
 8001a18:	2230      	movs	r2, #48	; 0x30
 8001a1a:	601a      	str	r2, [r3, #0]

		  continue;
 8001a1c:	bf00      	nop
	  PID_Controller(&pid);
 8001a1e:	e6d1      	b.n	80017c4 <main+0xa4>
 8001a20:	2000004c 	.word	0x2000004c
 8001a24:	20000260 	.word	0x20000260
 8001a28:	200000a0 	.word	0x200000a0
 8001a2c:	20000288 	.word	0x20000288
 8001a30:	2000013c 	.word	0x2000013c
 8001a34:	20000184 	.word	0x20000184
 8001a38:	200001cc 	.word	0x200001cc
 8001a3c:	40020800 	.word	0x40020800
 8001a40:	200002b8 	.word	0x200002b8
 8001a44:	200002b0 	.word	0x200002b0
 8001a48:	20000258 	.word	0x20000258
 8001a4c:	20000048 	.word	0x20000048
 8001a50:	20000000 	.word	0x20000000
 8001a54:	20000004 	.word	0x20000004
 8001a58:	200002bc 	.word	0x200002bc

08001a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b094      	sub	sp, #80	; 0x50
 8001a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a62:	f107 0320 	add.w	r3, r7, #32
 8001a66:	2230      	movs	r2, #48	; 0x30
 8001a68:	2100      	movs	r1, #0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f004 f94a 	bl	8005d04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a70:	f107 030c 	add.w	r3, r7, #12
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a80:	2300      	movs	r3, #0
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	4b29      	ldr	r3, [pc, #164]	; (8001b2c <SystemClock_Config+0xd0>)
 8001a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a88:	4a28      	ldr	r2, [pc, #160]	; (8001b2c <SystemClock_Config+0xd0>)
 8001a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a90:	4b26      	ldr	r3, [pc, #152]	; (8001b2c <SystemClock_Config+0xd0>)
 8001a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	607b      	str	r3, [r7, #4]
 8001aa0:	4b23      	ldr	r3, [pc, #140]	; (8001b30 <SystemClock_Config+0xd4>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001aa8:	4a21      	ldr	r2, [pc, #132]	; (8001b30 <SystemClock_Config+0xd4>)
 8001aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aae:	6013      	str	r3, [r2, #0]
 8001ab0:	4b1f      	ldr	r3, [pc, #124]	; (8001b30 <SystemClock_Config+0xd4>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ab8:	607b      	str	r3, [r7, #4]
 8001aba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001abc:	2302      	movs	r3, #2
 8001abe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ac4:	2310      	movs	r3, #16
 8001ac6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001acc:	2300      	movs	r3, #0
 8001ace:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001ad0:	2310      	movs	r3, #16
 8001ad2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001ad4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001ad8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001ada:	2304      	movs	r3, #4
 8001adc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001ade:	2307      	movs	r3, #7
 8001ae0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ae2:	f107 0320 	add.w	r3, r7, #32
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f002 f838 	bl	8003b5c <HAL_RCC_OscConfig>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001af2:	f000 fadb 	bl	80020ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001af6:	230f      	movs	r3, #15
 8001af8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001afa:	2302      	movs	r3, #2
 8001afc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b0c:	f107 030c 	add.w	r3, r7, #12
 8001b10:	2102      	movs	r1, #2
 8001b12:	4618      	mov	r0, r3
 8001b14:	f002 fa9a 	bl	800404c <HAL_RCC_ClockConfig>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001b1e:	f000 fac5 	bl	80020ac <Error_Handler>
  }
}
 8001b22:	bf00      	nop
 8001b24:	3750      	adds	r7, #80	; 0x50
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40007000 	.word	0x40007000

08001b34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b38:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b3a:	4a13      	ldr	r2, [pc, #76]	; (8001b88 <MX_I2C1_Init+0x54>)
 8001b3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b3e:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b40:	4a12      	ldr	r2, [pc, #72]	; (8001b8c <MX_I2C1_Init+0x58>)
 8001b42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b44:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b4a:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b50:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b58:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b5e:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b64:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b70:	4804      	ldr	r0, [pc, #16]	; (8001b84 <MX_I2C1_Init+0x50>)
 8001b72:	f001 f85d 	bl	8002c30 <HAL_I2C_Init>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b7c:	f000 fa96 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	2000004c 	.word	0x2000004c
 8001b88:	40005400 	.word	0x40005400
 8001b8c:	000186a0 	.word	0x000186a0

08001b90 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001b94:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <MX_I2C3_Init+0x50>)
 8001b96:	4a13      	ldr	r2, [pc, #76]	; (8001be4 <MX_I2C3_Init+0x54>)
 8001b98:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001b9a:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <MX_I2C3_Init+0x50>)
 8001b9c:	4a12      	ldr	r2, [pc, #72]	; (8001be8 <MX_I2C3_Init+0x58>)
 8001b9e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ba0:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <MX_I2C3_Init+0x50>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001ba6:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <MX_I2C3_Init+0x50>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bac:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <MX_I2C3_Init+0x50>)
 8001bae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bb2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bb4:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <MX_I2C3_Init+0x50>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001bba:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <MX_I2C3_Init+0x50>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bc0:	4b07      	ldr	r3, [pc, #28]	; (8001be0 <MX_I2C3_Init+0x50>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bc6:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <MX_I2C3_Init+0x50>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001bcc:	4804      	ldr	r0, [pc, #16]	; (8001be0 <MX_I2C3_Init+0x50>)
 8001bce:	f001 f82f 	bl	8002c30 <HAL_I2C_Init>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001bd8:	f000 fa68 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	200000a0 	.word	0x200000a0
 8001be4:	40005c00 	.word	0x40005c00
 8001be8:	000186a0 	.word	0x000186a0

08001bec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08c      	sub	sp, #48	; 0x30
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001bf2:	f107 031c 	add.w	r3, r7, #28
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
 8001bfe:	60da      	str	r2, [r3, #12]
 8001c00:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c02:	f107 0314 	add.w	r3, r7, #20
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c0c:	1d3b      	adds	r3, r7, #4
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	605a      	str	r2, [r3, #4]
 8001c14:	609a      	str	r2, [r3, #8]
 8001c16:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c18:	4b2d      	ldr	r3, [pc, #180]	; (8001cd0 <MX_TIM1_Init+0xe4>)
 8001c1a:	4a2e      	ldr	r2, [pc, #184]	; (8001cd4 <MX_TIM1_Init+0xe8>)
 8001c1c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c1e:	4b2c      	ldr	r3, [pc, #176]	; (8001cd0 <MX_TIM1_Init+0xe4>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c24:	4b2a      	ldr	r3, [pc, #168]	; (8001cd0 <MX_TIM1_Init+0xe4>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001c2a:	4b29      	ldr	r3, [pc, #164]	; (8001cd0 <MX_TIM1_Init+0xe4>)
 8001c2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c30:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c32:	4b27      	ldr	r3, [pc, #156]	; (8001cd0 <MX_TIM1_Init+0xe4>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c38:	4b25      	ldr	r3, [pc, #148]	; (8001cd0 <MX_TIM1_Init+0xe4>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c3e:	4b24      	ldr	r3, [pc, #144]	; (8001cd0 <MX_TIM1_Init+0xe4>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c44:	4822      	ldr	r0, [pc, #136]	; (8001cd0 <MX_TIM1_Init+0xe4>)
 8001c46:	f002 fc21 	bl	800448c <HAL_TIM_Base_Init>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8001c50:	f000 fa2c 	bl	80020ac <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001c54:	481e      	ldr	r0, [pc, #120]	; (8001cd0 <MX_TIM1_Init+0xe4>)
 8001c56:	f002 fdc3 	bl	80047e0 <HAL_TIM_IC_Init>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001c60:	f000 fa24 	bl	80020ac <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001c64:	2307      	movs	r3, #7
 8001c66:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8001c68:	2310      	movs	r3, #16
 8001c6a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001c6c:	f107 031c 	add.w	r3, r7, #28
 8001c70:	4619      	mov	r1, r3
 8001c72:	4817      	ldr	r0, [pc, #92]	; (8001cd0 <MX_TIM1_Init+0xe4>)
 8001c74:	f003 f833 	bl	8004cde <HAL_TIM_SlaveConfigSynchro>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001c7e:	f000 fa15 	bl	80020ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c8a:	f107 0314 	add.w	r3, r7, #20
 8001c8e:	4619      	mov	r1, r3
 8001c90:	480f      	ldr	r0, [pc, #60]	; (8001cd0 <MX_TIM1_Init+0xe4>)
 8001c92:	f003 fce3 	bl	800565c <HAL_TIMEx_MasterConfigSynchronization>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8001c9c:	f000 fa06 	bl	80020ac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001cb0:	1d3b      	adds	r3, r7, #4
 8001cb2:	2208      	movs	r2, #8
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4806      	ldr	r0, [pc, #24]	; (8001cd0 <MX_TIM1_Init+0xe4>)
 8001cb8:	f002 fdeb 	bl	8004892 <HAL_TIM_IC_ConfigChannel>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8001cc2:	f000 f9f3 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001cc6:	bf00      	nop
 8001cc8:	3730      	adds	r7, #48	; 0x30
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	200000f4 	.word	0x200000f4
 8001cd4:	40010000 	.word	0x40010000

08001cd8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08a      	sub	sp, #40	; 0x28
 8001cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cde:	f107 0320 	add.w	r3, r7, #32
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ce8:	1d3b      	adds	r3, r7, #4
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]
 8001cf0:	609a      	str	r2, [r3, #8]
 8001cf2:	60da      	str	r2, [r3, #12]
 8001cf4:	611a      	str	r2, [r3, #16]
 8001cf6:	615a      	str	r2, [r3, #20]
 8001cf8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cfa:	4b28      	ldr	r3, [pc, #160]	; (8001d9c <MX_TIM2_Init+0xc4>)
 8001cfc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d00:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 127;
 8001d02:	4b26      	ldr	r3, [pc, #152]	; (8001d9c <MX_TIM2_Init+0xc4>)
 8001d04:	227f      	movs	r2, #127	; 0x7f
 8001d06:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d08:	4b24      	ldr	r3, [pc, #144]	; (8001d9c <MX_TIM2_Init+0xc4>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 625;
 8001d0e:	4b23      	ldr	r3, [pc, #140]	; (8001d9c <MX_TIM2_Init+0xc4>)
 8001d10:	f240 2271 	movw	r2, #625	; 0x271
 8001d14:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d16:	4b21      	ldr	r3, [pc, #132]	; (8001d9c <MX_TIM2_Init+0xc4>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d1c:	4b1f      	ldr	r3, [pc, #124]	; (8001d9c <MX_TIM2_Init+0xc4>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d22:	481e      	ldr	r0, [pc, #120]	; (8001d9c <MX_TIM2_Init+0xc4>)
 8001d24:	f002 fc5c 	bl	80045e0 <HAL_TIM_PWM_Init>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001d2e:	f000 f9bd 	bl	80020ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d32:	2300      	movs	r3, #0
 8001d34:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d3a:	f107 0320 	add.w	r3, r7, #32
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4816      	ldr	r0, [pc, #88]	; (8001d9c <MX_TIM2_Init+0xc4>)
 8001d42:	f003 fc8b 	bl	800565c <HAL_TIMEx_MasterConfigSynchronization>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001d4c:	f000 f9ae 	bl	80020ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d50:	2360      	movs	r3, #96	; 0x60
 8001d52:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d54:	2300      	movs	r3, #0
 8001d56:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d60:	1d3b      	adds	r3, r7, #4
 8001d62:	2204      	movs	r2, #4
 8001d64:	4619      	mov	r1, r3
 8001d66:	480d      	ldr	r0, [pc, #52]	; (8001d9c <MX_TIM2_Init+0xc4>)
 8001d68:	f002 fe30 	bl	80049cc <HAL_TIM_PWM_ConfigChannel>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001d72:	f000 f99b 	bl	80020ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d76:	1d3b      	adds	r3, r7, #4
 8001d78:	2208      	movs	r2, #8
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4807      	ldr	r0, [pc, #28]	; (8001d9c <MX_TIM2_Init+0xc4>)
 8001d7e:	f002 fe25 	bl	80049cc <HAL_TIM_PWM_ConfigChannel>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001d88:	f000 f990 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d8c:	4803      	ldr	r0, [pc, #12]	; (8001d9c <MX_TIM2_Init+0xc4>)
 8001d8e:	f000 faef 	bl	8002370 <HAL_TIM_MspPostInit>

}
 8001d92:	bf00      	nop
 8001d94:	3728      	adds	r7, #40	; 0x28
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	2000013c 	.word	0x2000013c

08001da0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b08a      	sub	sp, #40	; 0x28
 8001da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001da6:	f107 0320 	add.w	r3, r7, #32
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001db0:	1d3b      	adds	r3, r7, #4
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	605a      	str	r2, [r3, #4]
 8001db8:	609a      	str	r2, [r3, #8]
 8001dba:	60da      	str	r2, [r3, #12]
 8001dbc:	611a      	str	r2, [r3, #16]
 8001dbe:	615a      	str	r2, [r3, #20]
 8001dc0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001dc2:	4b22      	ldr	r3, [pc, #136]	; (8001e4c <MX_TIM3_Init+0xac>)
 8001dc4:	4a22      	ldr	r2, [pc, #136]	; (8001e50 <MX_TIM3_Init+0xb0>)
 8001dc6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8001dc8:	4b20      	ldr	r3, [pc, #128]	; (8001e4c <MX_TIM3_Init+0xac>)
 8001dca:	2253      	movs	r2, #83	; 0x53
 8001dcc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dce:	4b1f      	ldr	r3, [pc, #124]	; (8001e4c <MX_TIM3_Init+0xac>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8001dd4:	4b1d      	ldr	r3, [pc, #116]	; (8001e4c <MX_TIM3_Init+0xac>)
 8001dd6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001dda:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ddc:	4b1b      	ldr	r3, [pc, #108]	; (8001e4c <MX_TIM3_Init+0xac>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001de2:	4b1a      	ldr	r3, [pc, #104]	; (8001e4c <MX_TIM3_Init+0xac>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001de8:	4818      	ldr	r0, [pc, #96]	; (8001e4c <MX_TIM3_Init+0xac>)
 8001dea:	f002 fbf9 	bl	80045e0 <HAL_TIM_PWM_Init>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001df4:	f000 f95a 	bl	80020ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e00:	f107 0320 	add.w	r3, r7, #32
 8001e04:	4619      	mov	r1, r3
 8001e06:	4811      	ldr	r0, [pc, #68]	; (8001e4c <MX_TIM3_Init+0xac>)
 8001e08:	f003 fc28 	bl	800565c <HAL_TIMEx_MasterConfigSynchronization>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001e12:	f000 f94b 	bl	80020ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e16:	2360      	movs	r3, #96	; 0x60
 8001e18:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e26:	1d3b      	adds	r3, r7, #4
 8001e28:	2204      	movs	r2, #4
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4807      	ldr	r0, [pc, #28]	; (8001e4c <MX_TIM3_Init+0xac>)
 8001e2e:	f002 fdcd 	bl	80049cc <HAL_TIM_PWM_ConfigChannel>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001e38:	f000 f938 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e3c:	4803      	ldr	r0, [pc, #12]	; (8001e4c <MX_TIM3_Init+0xac>)
 8001e3e:	f000 fa97 	bl	8002370 <HAL_TIM_MspPostInit>

}
 8001e42:	bf00      	nop
 8001e44:	3728      	adds	r7, #40	; 0x28
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000184 	.word	0x20000184
 8001e50:	40000400 	.word	0x40000400

08001e54 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e5a:	f107 0308 	add.w	r3, r7, #8
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	605a      	str	r2, [r3, #4]
 8001e64:	609a      	str	r2, [r3, #8]
 8001e66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e68:	463b      	mov	r3, r7
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e70:	4b1d      	ldr	r3, [pc, #116]	; (8001ee8 <MX_TIM4_Init+0x94>)
 8001e72:	4a1e      	ldr	r2, [pc, #120]	; (8001eec <MX_TIM4_Init+0x98>)
 8001e74:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8001e76:	4b1c      	ldr	r3, [pc, #112]	; (8001ee8 <MX_TIM4_Init+0x94>)
 8001e78:	2247      	movs	r2, #71	; 0x47
 8001e7a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ee8 <MX_TIM4_Init+0x94>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001e82:	4b19      	ldr	r3, [pc, #100]	; (8001ee8 <MX_TIM4_Init+0x94>)
 8001e84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e88:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e8a:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <MX_TIM4_Init+0x94>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e90:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <MX_TIM4_Init+0x94>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001e96:	4814      	ldr	r0, [pc, #80]	; (8001ee8 <MX_TIM4_Init+0x94>)
 8001e98:	f002 faf8 	bl	800448c <HAL_TIM_Base_Init>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001ea2:	f000 f903 	bl	80020ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ea6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eaa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001eac:	f107 0308 	add.w	r3, r7, #8
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	480d      	ldr	r0, [pc, #52]	; (8001ee8 <MX_TIM4_Init+0x94>)
 8001eb4:	f002 fe4c 	bl	8004b50 <HAL_TIM_ConfigClockSource>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001ebe:	f000 f8f5 	bl	80020ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001eca:	463b      	mov	r3, r7
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4806      	ldr	r0, [pc, #24]	; (8001ee8 <MX_TIM4_Init+0x94>)
 8001ed0:	f003 fbc4 	bl	800565c <HAL_TIMEx_MasterConfigSynchronization>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001eda:	f000 f8e7 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ede:	bf00      	nop
 8001ee0:	3718      	adds	r7, #24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	200001cc 	.word	0x200001cc
 8001eec:	40000800 	.word	0x40000800

08001ef0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ef4:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <MX_USART2_UART_Init+0x4c>)
 8001ef6:	4a12      	ldr	r2, [pc, #72]	; (8001f40 <MX_USART2_UART_Init+0x50>)
 8001ef8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001efa:	4b10      	ldr	r3, [pc, #64]	; (8001f3c <MX_USART2_UART_Init+0x4c>)
 8001efc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f02:	4b0e      	ldr	r3, [pc, #56]	; (8001f3c <MX_USART2_UART_Init+0x4c>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f08:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <MX_USART2_UART_Init+0x4c>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f0e:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <MX_USART2_UART_Init+0x4c>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f14:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <MX_USART2_UART_Init+0x4c>)
 8001f16:	220c      	movs	r2, #12
 8001f18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f1a:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <MX_USART2_UART_Init+0x4c>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f20:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <MX_USART2_UART_Init+0x4c>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f26:	4805      	ldr	r0, [pc, #20]	; (8001f3c <MX_USART2_UART_Init+0x4c>)
 8001f28:	f003 fc06 	bl	8005738 <HAL_UART_Init>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f32:	f000 f8bb 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20000214 	.word	0x20000214
 8001f40:	40004400 	.word	0x40004400

08001f44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08a      	sub	sp, #40	; 0x28
 8001f48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4a:	f107 0314 	add.w	r3, r7, #20
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	605a      	str	r2, [r3, #4]
 8001f54:	609a      	str	r2, [r3, #8]
 8001f56:	60da      	str	r2, [r3, #12]
 8001f58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	613b      	str	r3, [r7, #16]
 8001f5e:	4b4f      	ldr	r3, [pc, #316]	; (800209c <MX_GPIO_Init+0x158>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	4a4e      	ldr	r2, [pc, #312]	; (800209c <MX_GPIO_Init+0x158>)
 8001f64:	f043 0304 	orr.w	r3, r3, #4
 8001f68:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6a:	4b4c      	ldr	r3, [pc, #304]	; (800209c <MX_GPIO_Init+0x158>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	f003 0304 	and.w	r3, r3, #4
 8001f72:	613b      	str	r3, [r7, #16]
 8001f74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	4b48      	ldr	r3, [pc, #288]	; (800209c <MX_GPIO_Init+0x158>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	4a47      	ldr	r2, [pc, #284]	; (800209c <MX_GPIO_Init+0x158>)
 8001f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f84:	6313      	str	r3, [r2, #48]	; 0x30
 8001f86:	4b45      	ldr	r3, [pc, #276]	; (800209c <MX_GPIO_Init+0x158>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	60bb      	str	r3, [r7, #8]
 8001f96:	4b41      	ldr	r3, [pc, #260]	; (800209c <MX_GPIO_Init+0x158>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	4a40      	ldr	r2, [pc, #256]	; (800209c <MX_GPIO_Init+0x158>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa2:	4b3e      	ldr	r3, [pc, #248]	; (800209c <MX_GPIO_Init+0x158>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	607b      	str	r3, [r7, #4]
 8001fb2:	4b3a      	ldr	r3, [pc, #232]	; (800209c <MX_GPIO_Init+0x158>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	4a39      	ldr	r2, [pc, #228]	; (800209c <MX_GPIO_Init+0x158>)
 8001fb8:	f043 0302 	orr.w	r3, r3, #2
 8001fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fbe:	4b37      	ldr	r3, [pc, #220]	; (800209c <MX_GPIO_Init+0x158>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	607b      	str	r3, [r7, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 8001fd0:	4833      	ldr	r0, [pc, #204]	; (80020a0 <MX_GPIO_Init+0x15c>)
 8001fd2:	f000 fe13 	bl	8002bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2120      	movs	r1, #32
 8001fda:	4832      	ldr	r0, [pc, #200]	; (80020a4 <MX_GPIO_Init+0x160>)
 8001fdc:	f000 fe0e 	bl	8002bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|S0_Pin|S1_Pin
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f24f 0106 	movw	r1, #61446	; 0xf006
 8001fe6:	4830      	ldr	r0, [pc, #192]	; (80020a8 <MX_GPIO_Init+0x164>)
 8001fe8:	f000 fe08 	bl	8002bfc <HAL_GPIO_WritePin>
                          |S2_Pin|S3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001fec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ff0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ff2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001ff6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	4619      	mov	r1, r3
 8002002:	4828      	ldr	r0, [pc, #160]	; (80020a4 <MX_GPIO_Init+0x160>)
 8002004:	f000 fc5e 	bl	80028c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7|GPIO_PIN_9;
 8002008:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 800200c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800200e:	2301      	movs	r3, #1
 8002010:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002016:	2300      	movs	r3, #0
 8002018:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201a:	f107 0314 	add.w	r3, r7, #20
 800201e:	4619      	mov	r1, r3
 8002020:	481f      	ldr	r0, [pc, #124]	; (80020a0 <MX_GPIO_Init+0x15c>)
 8002022:	f000 fc4f 	bl	80028c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002026:	2320      	movs	r3, #32
 8002028:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800202a:	2301      	movs	r3, #1
 800202c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002032:	2300      	movs	r3, #0
 8002034:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002036:	f107 0314 	add.w	r3, r7, #20
 800203a:	4619      	mov	r1, r3
 800203c:	4819      	ldr	r0, [pc, #100]	; (80020a4 <MX_GPIO_Init+0x160>)
 800203e:	f000 fc41 	bl	80028c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 S0_Pin S1_Pin
                           S2_Pin S3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|S0_Pin|S1_Pin
 8002042:	f24f 0306 	movw	r3, #61446	; 0xf006
 8002046:	617b      	str	r3, [r7, #20]
                          |S2_Pin|S3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002048:	2301      	movs	r3, #1
 800204a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002050:	2300      	movs	r3, #0
 8002052:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002054:	f107 0314 	add.w	r3, r7, #20
 8002058:	4619      	mov	r1, r3
 800205a:	4813      	ldr	r0, [pc, #76]	; (80020a8 <MX_GPIO_Init+0x164>)
 800205c:	f000 fc32 	bl	80028c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002060:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002064:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002066:	2300      	movs	r3, #0
 8002068:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800206e:	f107 0314 	add.w	r3, r7, #20
 8002072:	4619      	mov	r1, r3
 8002074:	480b      	ldr	r0, [pc, #44]	; (80020a4 <MX_GPIO_Init+0x160>)
 8002076:	f000 fc25 	bl	80028c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800207a:	2310      	movs	r3, #16
 800207c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800207e:	2300      	movs	r3, #0
 8002080:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	2300      	movs	r3, #0
 8002084:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002086:	f107 0314 	add.w	r3, r7, #20
 800208a:	4619      	mov	r1, r3
 800208c:	4806      	ldr	r0, [pc, #24]	; (80020a8 <MX_GPIO_Init+0x164>)
 800208e:	f000 fc19 	bl	80028c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002092:	bf00      	nop
 8002094:	3728      	adds	r7, #40	; 0x28
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40023800 	.word	0x40023800
 80020a0:	40020000 	.word	0x40020000
 80020a4:	40020800 	.word	0x40020800
 80020a8:	40020400 	.word	0x40020400

080020ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020b0:	b672      	cpsid	i
}
 80020b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020b4:	e7fe      	b.n	80020b4 <Error_Handler+0x8>
	...

080020b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	607b      	str	r3, [r7, #4]
 80020c2:	4b10      	ldr	r3, [pc, #64]	; (8002104 <HAL_MspInit+0x4c>)
 80020c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c6:	4a0f      	ldr	r2, [pc, #60]	; (8002104 <HAL_MspInit+0x4c>)
 80020c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020cc:	6453      	str	r3, [r2, #68]	; 0x44
 80020ce:	4b0d      	ldr	r3, [pc, #52]	; (8002104 <HAL_MspInit+0x4c>)
 80020d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020d6:	607b      	str	r3, [r7, #4]
 80020d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	603b      	str	r3, [r7, #0]
 80020de:	4b09      	ldr	r3, [pc, #36]	; (8002104 <HAL_MspInit+0x4c>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	4a08      	ldr	r2, [pc, #32]	; (8002104 <HAL_MspInit+0x4c>)
 80020e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ea:	4b06      	ldr	r3, [pc, #24]	; (8002104 <HAL_MspInit+0x4c>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f2:	603b      	str	r3, [r7, #0]
 80020f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80020f6:	2007      	movs	r0, #7
 80020f8:	f000 fbb0 	bl	800285c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020fc:	bf00      	nop
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40023800 	.word	0x40023800

08002108 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08c      	sub	sp, #48	; 0x30
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002110:	f107 031c 	add.w	r3, r7, #28
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	60da      	str	r2, [r3, #12]
 800211e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a42      	ldr	r2, [pc, #264]	; (8002230 <HAL_I2C_MspInit+0x128>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d12c      	bne.n	8002184 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	61bb      	str	r3, [r7, #24]
 800212e:	4b41      	ldr	r3, [pc, #260]	; (8002234 <HAL_I2C_MspInit+0x12c>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	4a40      	ldr	r2, [pc, #256]	; (8002234 <HAL_I2C_MspInit+0x12c>)
 8002134:	f043 0302 	orr.w	r3, r3, #2
 8002138:	6313      	str	r3, [r2, #48]	; 0x30
 800213a:	4b3e      	ldr	r3, [pc, #248]	; (8002234 <HAL_I2C_MspInit+0x12c>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	61bb      	str	r3, [r7, #24]
 8002144:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002146:	23c0      	movs	r3, #192	; 0xc0
 8002148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800214a:	2312      	movs	r3, #18
 800214c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002152:	2303      	movs	r3, #3
 8002154:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002156:	2304      	movs	r3, #4
 8002158:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800215a:	f107 031c 	add.w	r3, r7, #28
 800215e:	4619      	mov	r1, r3
 8002160:	4835      	ldr	r0, [pc, #212]	; (8002238 <HAL_I2C_MspInit+0x130>)
 8002162:	f000 fbaf 	bl	80028c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
 800216a:	4b32      	ldr	r3, [pc, #200]	; (8002234 <HAL_I2C_MspInit+0x12c>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	4a31      	ldr	r2, [pc, #196]	; (8002234 <HAL_I2C_MspInit+0x12c>)
 8002170:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002174:	6413      	str	r3, [r2, #64]	; 0x40
 8002176:	4b2f      	ldr	r3, [pc, #188]	; (8002234 <HAL_I2C_MspInit+0x12c>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800217e:	617b      	str	r3, [r7, #20]
 8002180:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002182:	e050      	b.n	8002226 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a2c      	ldr	r2, [pc, #176]	; (800223c <HAL_I2C_MspInit+0x134>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d14b      	bne.n	8002226 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	613b      	str	r3, [r7, #16]
 8002192:	4b28      	ldr	r3, [pc, #160]	; (8002234 <HAL_I2C_MspInit+0x12c>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	4a27      	ldr	r2, [pc, #156]	; (8002234 <HAL_I2C_MspInit+0x12c>)
 8002198:	f043 0304 	orr.w	r3, r3, #4
 800219c:	6313      	str	r3, [r2, #48]	; 0x30
 800219e:	4b25      	ldr	r3, [pc, #148]	; (8002234 <HAL_I2C_MspInit+0x12c>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	f003 0304 	and.w	r3, r3, #4
 80021a6:	613b      	str	r3, [r7, #16]
 80021a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	4b21      	ldr	r3, [pc, #132]	; (8002234 <HAL_I2C_MspInit+0x12c>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	4a20      	ldr	r2, [pc, #128]	; (8002234 <HAL_I2C_MspInit+0x12c>)
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ba:	4b1e      	ldr	r3, [pc, #120]	; (8002234 <HAL_I2C_MspInit+0x12c>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021cc:	2312      	movs	r3, #18
 80021ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d4:	2303      	movs	r3, #3
 80021d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80021d8:	2304      	movs	r3, #4
 80021da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021dc:	f107 031c 	add.w	r3, r7, #28
 80021e0:	4619      	mov	r1, r3
 80021e2:	4817      	ldr	r0, [pc, #92]	; (8002240 <HAL_I2C_MspInit+0x138>)
 80021e4:	f000 fb6e 	bl	80028c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80021e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021ee:	2312      	movs	r3, #18
 80021f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f6:	2303      	movs	r3, #3
 80021f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80021fa:	2304      	movs	r3, #4
 80021fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fe:	f107 031c 	add.w	r3, r7, #28
 8002202:	4619      	mov	r1, r3
 8002204:	480f      	ldr	r0, [pc, #60]	; (8002244 <HAL_I2C_MspInit+0x13c>)
 8002206:	f000 fb5d 	bl	80028c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	60bb      	str	r3, [r7, #8]
 800220e:	4b09      	ldr	r3, [pc, #36]	; (8002234 <HAL_I2C_MspInit+0x12c>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	4a08      	ldr	r2, [pc, #32]	; (8002234 <HAL_I2C_MspInit+0x12c>)
 8002214:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002218:	6413      	str	r3, [r2, #64]	; 0x40
 800221a:	4b06      	ldr	r3, [pc, #24]	; (8002234 <HAL_I2C_MspInit+0x12c>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002222:	60bb      	str	r3, [r7, #8]
 8002224:	68bb      	ldr	r3, [r7, #8]
}
 8002226:	bf00      	nop
 8002228:	3730      	adds	r7, #48	; 0x30
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40005400 	.word	0x40005400
 8002234:	40023800 	.word	0x40023800
 8002238:	40020400 	.word	0x40020400
 800223c:	40005c00 	.word	0x40005c00
 8002240:	40020800 	.word	0x40020800
 8002244:	40020000 	.word	0x40020000

08002248 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08a      	sub	sp, #40	; 0x28
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002250:	f107 0314 	add.w	r3, r7, #20
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]
 800225e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a23      	ldr	r2, [pc, #140]	; (80022f4 <HAL_TIM_Base_MspInit+0xac>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d12d      	bne.n	80022c6 <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	4b22      	ldr	r3, [pc, #136]	; (80022f8 <HAL_TIM_Base_MspInit+0xb0>)
 8002270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002272:	4a21      	ldr	r2, [pc, #132]	; (80022f8 <HAL_TIM_Base_MspInit+0xb0>)
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	6453      	str	r3, [r2, #68]	; 0x44
 800227a:	4b1f      	ldr	r3, [pc, #124]	; (80022f8 <HAL_TIM_Base_MspInit+0xb0>)
 800227c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	613b      	str	r3, [r7, #16]
 8002284:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <HAL_TIM_Base_MspInit+0xb0>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	4a1a      	ldr	r2, [pc, #104]	; (80022f8 <HAL_TIM_Base_MspInit+0xb0>)
 8002290:	f043 0301 	orr.w	r3, r3, #1
 8002294:	6313      	str	r3, [r2, #48]	; 0x30
 8002296:	4b18      	ldr	r3, [pc, #96]	; (80022f8 <HAL_TIM_Base_MspInit+0xb0>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80022a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a8:	2302      	movs	r3, #2
 80022aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b0:	2300      	movs	r3, #0
 80022b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022b4:	2301      	movs	r3, #1
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b8:	f107 0314 	add.w	r3, r7, #20
 80022bc:	4619      	mov	r1, r3
 80022be:	480f      	ldr	r0, [pc, #60]	; (80022fc <HAL_TIM_Base_MspInit+0xb4>)
 80022c0:	f000 fb00 	bl	80028c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80022c4:	e012      	b.n	80022ec <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM4)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a0d      	ldr	r2, [pc, #52]	; (8002300 <HAL_TIM_Base_MspInit+0xb8>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d10d      	bne.n	80022ec <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022d0:	2300      	movs	r3, #0
 80022d2:	60bb      	str	r3, [r7, #8]
 80022d4:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <HAL_TIM_Base_MspInit+0xb0>)
 80022d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d8:	4a07      	ldr	r2, [pc, #28]	; (80022f8 <HAL_TIM_Base_MspInit+0xb0>)
 80022da:	f043 0304 	orr.w	r3, r3, #4
 80022de:	6413      	str	r3, [r2, #64]	; 0x40
 80022e0:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <HAL_TIM_Base_MspInit+0xb0>)
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	60bb      	str	r3, [r7, #8]
 80022ea:	68bb      	ldr	r3, [r7, #8]
}
 80022ec:	bf00      	nop
 80022ee:	3728      	adds	r7, #40	; 0x28
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40010000 	.word	0x40010000
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40020000 	.word	0x40020000
 8002300:	40000800 	.word	0x40000800

08002304 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002314:	d10e      	bne.n	8002334 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	4b13      	ldr	r3, [pc, #76]	; (8002368 <HAL_TIM_PWM_MspInit+0x64>)
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	4a12      	ldr	r2, [pc, #72]	; (8002368 <HAL_TIM_PWM_MspInit+0x64>)
 8002320:	f043 0301 	orr.w	r3, r3, #1
 8002324:	6413      	str	r3, [r2, #64]	; 0x40
 8002326:	4b10      	ldr	r3, [pc, #64]	; (8002368 <HAL_TIM_PWM_MspInit+0x64>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002332:	e012      	b.n	800235a <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a0c      	ldr	r2, [pc, #48]	; (800236c <HAL_TIM_PWM_MspInit+0x68>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d10d      	bne.n	800235a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	60bb      	str	r3, [r7, #8]
 8002342:	4b09      	ldr	r3, [pc, #36]	; (8002368 <HAL_TIM_PWM_MspInit+0x64>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	4a08      	ldr	r2, [pc, #32]	; (8002368 <HAL_TIM_PWM_MspInit+0x64>)
 8002348:	f043 0302 	orr.w	r3, r3, #2
 800234c:	6413      	str	r3, [r2, #64]	; 0x40
 800234e:	4b06      	ldr	r3, [pc, #24]	; (8002368 <HAL_TIM_PWM_MspInit+0x64>)
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	60bb      	str	r3, [r7, #8]
 8002358:	68bb      	ldr	r3, [r7, #8]
}
 800235a:	bf00      	nop
 800235c:	3714      	adds	r7, #20
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	40023800 	.word	0x40023800
 800236c:	40000400 	.word	0x40000400

08002370 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b08a      	sub	sp, #40	; 0x28
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002378:	f107 0314 	add.w	r3, r7, #20
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	60da      	str	r2, [r3, #12]
 8002386:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002390:	d13d      	bne.n	800240e <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	613b      	str	r3, [r7, #16]
 8002396:	4b31      	ldr	r3, [pc, #196]	; (800245c <HAL_TIM_MspPostInit+0xec>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	4a30      	ldr	r2, [pc, #192]	; (800245c <HAL_TIM_MspPostInit+0xec>)
 800239c:	f043 0301 	orr.w	r3, r3, #1
 80023a0:	6313      	str	r3, [r2, #48]	; 0x30
 80023a2:	4b2e      	ldr	r3, [pc, #184]	; (800245c <HAL_TIM_MspPostInit+0xec>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	613b      	str	r3, [r7, #16]
 80023ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	4b2a      	ldr	r3, [pc, #168]	; (800245c <HAL_TIM_MspPostInit+0xec>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	4a29      	ldr	r2, [pc, #164]	; (800245c <HAL_TIM_MspPostInit+0xec>)
 80023b8:	f043 0302 	orr.w	r3, r3, #2
 80023bc:	6313      	str	r3, [r2, #48]	; 0x30
 80023be:	4b27      	ldr	r3, [pc, #156]	; (800245c <HAL_TIM_MspPostInit+0xec>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80023ca:	2302      	movs	r3, #2
 80023cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ce:	2302      	movs	r3, #2
 80023d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d6:	2300      	movs	r3, #0
 80023d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023da:	2301      	movs	r3, #1
 80023dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023de:	f107 0314 	add.w	r3, r7, #20
 80023e2:	4619      	mov	r1, r3
 80023e4:	481e      	ldr	r0, [pc, #120]	; (8002460 <HAL_TIM_MspPostInit+0xf0>)
 80023e6:	f000 fa6d 	bl	80028c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80023ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f0:	2302      	movs	r3, #2
 80023f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f8:	2300      	movs	r3, #0
 80023fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023fc:	2301      	movs	r3, #1
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002400:	f107 0314 	add.w	r3, r7, #20
 8002404:	4619      	mov	r1, r3
 8002406:	4817      	ldr	r0, [pc, #92]	; (8002464 <HAL_TIM_MspPostInit+0xf4>)
 8002408:	f000 fa5c 	bl	80028c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800240c:	e022      	b.n	8002454 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a15      	ldr	r2, [pc, #84]	; (8002468 <HAL_TIM_MspPostInit+0xf8>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d11d      	bne.n	8002454 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002418:	2300      	movs	r3, #0
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	4b0f      	ldr	r3, [pc, #60]	; (800245c <HAL_TIM_MspPostInit+0xec>)
 800241e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002420:	4a0e      	ldr	r2, [pc, #56]	; (800245c <HAL_TIM_MspPostInit+0xec>)
 8002422:	f043 0304 	orr.w	r3, r3, #4
 8002426:	6313      	str	r3, [r2, #48]	; 0x30
 8002428:	4b0c      	ldr	r3, [pc, #48]	; (800245c <HAL_TIM_MspPostInit+0xec>)
 800242a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	60bb      	str	r3, [r7, #8]
 8002432:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002434:	2380      	movs	r3, #128	; 0x80
 8002436:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002438:	2302      	movs	r3, #2
 800243a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243c:	2300      	movs	r3, #0
 800243e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002440:	2300      	movs	r3, #0
 8002442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002444:	2302      	movs	r3, #2
 8002446:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002448:	f107 0314 	add.w	r3, r7, #20
 800244c:	4619      	mov	r1, r3
 800244e:	4807      	ldr	r0, [pc, #28]	; (800246c <HAL_TIM_MspPostInit+0xfc>)
 8002450:	f000 fa38 	bl	80028c4 <HAL_GPIO_Init>
}
 8002454:	bf00      	nop
 8002456:	3728      	adds	r7, #40	; 0x28
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40023800 	.word	0x40023800
 8002460:	40020000 	.word	0x40020000
 8002464:	40020400 	.word	0x40020400
 8002468:	40000400 	.word	0x40000400
 800246c:	40020800 	.word	0x40020800

08002470 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b08a      	sub	sp, #40	; 0x28
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002478:	f107 0314 	add.w	r3, r7, #20
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a19      	ldr	r2, [pc, #100]	; (80024f4 <HAL_UART_MspInit+0x84>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d12b      	bne.n	80024ea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	613b      	str	r3, [r7, #16]
 8002496:	4b18      	ldr	r3, [pc, #96]	; (80024f8 <HAL_UART_MspInit+0x88>)
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	4a17      	ldr	r2, [pc, #92]	; (80024f8 <HAL_UART_MspInit+0x88>)
 800249c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024a0:	6413      	str	r3, [r2, #64]	; 0x40
 80024a2:	4b15      	ldr	r3, [pc, #84]	; (80024f8 <HAL_UART_MspInit+0x88>)
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ae:	2300      	movs	r3, #0
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	4b11      	ldr	r3, [pc, #68]	; (80024f8 <HAL_UART_MspInit+0x88>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	4a10      	ldr	r2, [pc, #64]	; (80024f8 <HAL_UART_MspInit+0x88>)
 80024b8:	f043 0301 	orr.w	r3, r3, #1
 80024bc:	6313      	str	r3, [r2, #48]	; 0x30
 80024be:	4b0e      	ldr	r3, [pc, #56]	; (80024f8 <HAL_UART_MspInit+0x88>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80024ca:	230c      	movs	r3, #12
 80024cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ce:	2302      	movs	r3, #2
 80024d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d6:	2300      	movs	r3, #0
 80024d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024da:	2307      	movs	r3, #7
 80024dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024de:	f107 0314 	add.w	r3, r7, #20
 80024e2:	4619      	mov	r1, r3
 80024e4:	4805      	ldr	r0, [pc, #20]	; (80024fc <HAL_UART_MspInit+0x8c>)
 80024e6:	f000 f9ed 	bl	80028c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024ea:	bf00      	nop
 80024ec:	3728      	adds	r7, #40	; 0x28
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40004400 	.word	0x40004400
 80024f8:	40023800 	.word	0x40023800
 80024fc:	40020000 	.word	0x40020000

08002500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002504:	e7fe      	b.n	8002504 <NMI_Handler+0x4>

08002506 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002506:	b480      	push	{r7}
 8002508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800250a:	e7fe      	b.n	800250a <HardFault_Handler+0x4>

0800250c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002510:	e7fe      	b.n	8002510 <MemManage_Handler+0x4>

08002512 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002512:	b480      	push	{r7}
 8002514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002516:	e7fe      	b.n	8002516 <BusFault_Handler+0x4>

08002518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800251c:	e7fe      	b.n	800251c <UsageFault_Handler+0x4>

0800251e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800251e:	b480      	push	{r7}
 8002520:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002522:	bf00      	nop
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002530:	bf00      	nop
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800253a:	b480      	push	{r7}
 800253c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800254c:	f000 f890 	bl	8002670 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002550:	bf00      	nop
 8002552:	bd80      	pop	{r7, pc}

08002554 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002558:	4b06      	ldr	r3, [pc, #24]	; (8002574 <SystemInit+0x20>)
 800255a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255e:	4a05      	ldr	r2, [pc, #20]	; (8002574 <SystemInit+0x20>)
 8002560:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002564:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002568:	bf00      	nop
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002578:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800257c:	480d      	ldr	r0, [pc, #52]	; (80025b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800257e:	490e      	ldr	r1, [pc, #56]	; (80025b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002580:	4a0e      	ldr	r2, [pc, #56]	; (80025bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002582:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002584:	e002      	b.n	800258c <LoopCopyDataInit>

08002586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800258a:	3304      	adds	r3, #4

0800258c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800258c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800258e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002590:	d3f9      	bcc.n	8002586 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002592:	4a0b      	ldr	r2, [pc, #44]	; (80025c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002594:	4c0b      	ldr	r4, [pc, #44]	; (80025c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002596:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002598:	e001      	b.n	800259e <LoopFillZerobss>

0800259a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800259a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800259c:	3204      	adds	r2, #4

0800259e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800259e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025a0:	d3fb      	bcc.n	800259a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025a2:	f7ff ffd7 	bl	8002554 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025a6:	f003 fb89 	bl	8005cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025aa:	f7ff f8b9 	bl	8001720 <main>
  bx  lr    
 80025ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80025b0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80025b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025b8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80025bc:	08005d54 	.word	0x08005d54
  ldr r2, =_sbss
 80025c0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80025c4:	200002c4 	.word	0x200002c4

080025c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025c8:	e7fe      	b.n	80025c8 <ADC_IRQHandler>
	...

080025cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025d0:	4b0e      	ldr	r3, [pc, #56]	; (800260c <HAL_Init+0x40>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a0d      	ldr	r2, [pc, #52]	; (800260c <HAL_Init+0x40>)
 80025d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025dc:	4b0b      	ldr	r3, [pc, #44]	; (800260c <HAL_Init+0x40>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a0a      	ldr	r2, [pc, #40]	; (800260c <HAL_Init+0x40>)
 80025e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025e8:	4b08      	ldr	r3, [pc, #32]	; (800260c <HAL_Init+0x40>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a07      	ldr	r2, [pc, #28]	; (800260c <HAL_Init+0x40>)
 80025ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025f4:	2003      	movs	r0, #3
 80025f6:	f000 f931 	bl	800285c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025fa:	2000      	movs	r0, #0
 80025fc:	f000 f808 	bl	8002610 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002600:	f7ff fd5a 	bl	80020b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40023c00 	.word	0x40023c00

08002610 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002618:	4b12      	ldr	r3, [pc, #72]	; (8002664 <HAL_InitTick+0x54>)
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	4b12      	ldr	r3, [pc, #72]	; (8002668 <HAL_InitTick+0x58>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	4619      	mov	r1, r3
 8002622:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002626:	fbb3 f3f1 	udiv	r3, r3, r1
 800262a:	fbb2 f3f3 	udiv	r3, r2, r3
 800262e:	4618      	mov	r0, r3
 8002630:	f000 f93b 	bl	80028aa <HAL_SYSTICK_Config>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e00e      	b.n	800265c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b0f      	cmp	r3, #15
 8002642:	d80a      	bhi.n	800265a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002644:	2200      	movs	r2, #0
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	f04f 30ff 	mov.w	r0, #4294967295
 800264c:	f000 f911 	bl	8002872 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002650:	4a06      	ldr	r2, [pc, #24]	; (800266c <HAL_InitTick+0x5c>)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002656:	2300      	movs	r3, #0
 8002658:	e000      	b.n	800265c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
}
 800265c:	4618      	mov	r0, r3
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20000008 	.word	0x20000008
 8002668:	20000010 	.word	0x20000010
 800266c:	2000000c 	.word	0x2000000c

08002670 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002674:	4b06      	ldr	r3, [pc, #24]	; (8002690 <HAL_IncTick+0x20>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	461a      	mov	r2, r3
 800267a:	4b06      	ldr	r3, [pc, #24]	; (8002694 <HAL_IncTick+0x24>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4413      	add	r3, r2
 8002680:	4a04      	ldr	r2, [pc, #16]	; (8002694 <HAL_IncTick+0x24>)
 8002682:	6013      	str	r3, [r2, #0]
}
 8002684:	bf00      	nop
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	20000010 	.word	0x20000010
 8002694:	200002c0 	.word	0x200002c0

08002698 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  return uwTick;
 800269c:	4b03      	ldr	r3, [pc, #12]	; (80026ac <HAL_GetTick+0x14>)
 800269e:	681b      	ldr	r3, [r3, #0]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	200002c0 	.word	0x200002c0

080026b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026b8:	f7ff ffee 	bl	8002698 <HAL_GetTick>
 80026bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c8:	d005      	beq.n	80026d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026ca:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <HAL_Delay+0x44>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	461a      	mov	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4413      	add	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026d6:	bf00      	nop
 80026d8:	f7ff ffde 	bl	8002698 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d8f7      	bhi.n	80026d8 <HAL_Delay+0x28>
  {
  }
}
 80026e8:	bf00      	nop
 80026ea:	bf00      	nop
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20000010 	.word	0x20000010

080026f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002708:	4b0c      	ldr	r3, [pc, #48]	; (800273c <__NVIC_SetPriorityGrouping+0x44>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800270e:	68ba      	ldr	r2, [r7, #8]
 8002710:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002714:	4013      	ands	r3, r2
 8002716:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002720:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800272a:	4a04      	ldr	r2, [pc, #16]	; (800273c <__NVIC_SetPriorityGrouping+0x44>)
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	60d3      	str	r3, [r2, #12]
}
 8002730:	bf00      	nop
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	e000ed00 	.word	0xe000ed00

08002740 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002744:	4b04      	ldr	r3, [pc, #16]	; (8002758 <__NVIC_GetPriorityGrouping+0x18>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	0a1b      	lsrs	r3, r3, #8
 800274a:	f003 0307 	and.w	r3, r3, #7
}
 800274e:	4618      	mov	r0, r3
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	e000ed00 	.word	0xe000ed00

0800275c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	4603      	mov	r3, r0
 8002764:	6039      	str	r1, [r7, #0]
 8002766:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276c:	2b00      	cmp	r3, #0
 800276e:	db0a      	blt.n	8002786 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	b2da      	uxtb	r2, r3
 8002774:	490c      	ldr	r1, [pc, #48]	; (80027a8 <__NVIC_SetPriority+0x4c>)
 8002776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277a:	0112      	lsls	r2, r2, #4
 800277c:	b2d2      	uxtb	r2, r2
 800277e:	440b      	add	r3, r1
 8002780:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002784:	e00a      	b.n	800279c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	b2da      	uxtb	r2, r3
 800278a:	4908      	ldr	r1, [pc, #32]	; (80027ac <__NVIC_SetPriority+0x50>)
 800278c:	79fb      	ldrb	r3, [r7, #7]
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	3b04      	subs	r3, #4
 8002794:	0112      	lsls	r2, r2, #4
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	440b      	add	r3, r1
 800279a:	761a      	strb	r2, [r3, #24]
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	e000e100 	.word	0xe000e100
 80027ac:	e000ed00 	.word	0xe000ed00

080027b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b089      	sub	sp, #36	; 0x24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f003 0307 	and.w	r3, r3, #7
 80027c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	f1c3 0307 	rsb	r3, r3, #7
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	bf28      	it	cs
 80027ce:	2304      	movcs	r3, #4
 80027d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	3304      	adds	r3, #4
 80027d6:	2b06      	cmp	r3, #6
 80027d8:	d902      	bls.n	80027e0 <NVIC_EncodePriority+0x30>
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	3b03      	subs	r3, #3
 80027de:	e000      	b.n	80027e2 <NVIC_EncodePriority+0x32>
 80027e0:	2300      	movs	r3, #0
 80027e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e4:	f04f 32ff 	mov.w	r2, #4294967295
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	43da      	mvns	r2, r3
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	401a      	ands	r2, r3
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027f8:	f04f 31ff 	mov.w	r1, #4294967295
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002802:	43d9      	mvns	r1, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002808:	4313      	orrs	r3, r2
         );
}
 800280a:	4618      	mov	r0, r3
 800280c:	3724      	adds	r7, #36	; 0x24
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
	...

08002818 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3b01      	subs	r3, #1
 8002824:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002828:	d301      	bcc.n	800282e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800282a:	2301      	movs	r3, #1
 800282c:	e00f      	b.n	800284e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800282e:	4a0a      	ldr	r2, [pc, #40]	; (8002858 <SysTick_Config+0x40>)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3b01      	subs	r3, #1
 8002834:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002836:	210f      	movs	r1, #15
 8002838:	f04f 30ff 	mov.w	r0, #4294967295
 800283c:	f7ff ff8e 	bl	800275c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002840:	4b05      	ldr	r3, [pc, #20]	; (8002858 <SysTick_Config+0x40>)
 8002842:	2200      	movs	r2, #0
 8002844:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002846:	4b04      	ldr	r3, [pc, #16]	; (8002858 <SysTick_Config+0x40>)
 8002848:	2207      	movs	r2, #7
 800284a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	e000e010 	.word	0xe000e010

0800285c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f7ff ff47 	bl	80026f8 <__NVIC_SetPriorityGrouping>
}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002872:	b580      	push	{r7, lr}
 8002874:	b086      	sub	sp, #24
 8002876:	af00      	add	r7, sp, #0
 8002878:	4603      	mov	r3, r0
 800287a:	60b9      	str	r1, [r7, #8]
 800287c:	607a      	str	r2, [r7, #4]
 800287e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002884:	f7ff ff5c 	bl	8002740 <__NVIC_GetPriorityGrouping>
 8002888:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	68b9      	ldr	r1, [r7, #8]
 800288e:	6978      	ldr	r0, [r7, #20]
 8002890:	f7ff ff8e 	bl	80027b0 <NVIC_EncodePriority>
 8002894:	4602      	mov	r2, r0
 8002896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800289a:	4611      	mov	r1, r2
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff ff5d 	bl	800275c <__NVIC_SetPriority>
}
 80028a2:	bf00      	nop
 80028a4:	3718      	adds	r7, #24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7ff ffb0 	bl	8002818 <SysTick_Config>
 80028b8:	4603      	mov	r3, r0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b089      	sub	sp, #36	; 0x24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028ce:	2300      	movs	r3, #0
 80028d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028d2:	2300      	movs	r3, #0
 80028d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028d6:	2300      	movs	r3, #0
 80028d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028da:	2300      	movs	r3, #0
 80028dc:	61fb      	str	r3, [r7, #28]
 80028de:	e159      	b.n	8002b94 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028e0:	2201      	movs	r2, #1
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	4013      	ands	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	f040 8148 	bne.w	8002b8e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	2b01      	cmp	r3, #1
 8002908:	d005      	beq.n	8002916 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002912:	2b02      	cmp	r3, #2
 8002914:	d130      	bne.n	8002978 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	2203      	movs	r2, #3
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	43db      	mvns	r3, r3
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	4013      	ands	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4313      	orrs	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800294c:	2201      	movs	r2, #1
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	43db      	mvns	r3, r3
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	4013      	ands	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	091b      	lsrs	r3, r3, #4
 8002962:	f003 0201 	and.w	r2, r3, #1
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4313      	orrs	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 0303 	and.w	r3, r3, #3
 8002980:	2b03      	cmp	r3, #3
 8002982:	d017      	beq.n	80029b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	2203      	movs	r2, #3
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	43db      	mvns	r3, r3
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	4013      	ands	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 0303 	and.w	r3, r3, #3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d123      	bne.n	8002a08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	08da      	lsrs	r2, r3, #3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3208      	adds	r2, #8
 80029c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	220f      	movs	r2, #15
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4013      	ands	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	691a      	ldr	r2, [r3, #16]
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	f003 0307 	and.w	r3, r3, #7
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	08da      	lsrs	r2, r3, #3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	3208      	adds	r2, #8
 8002a02:	69b9      	ldr	r1, [r7, #24]
 8002a04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	2203      	movs	r2, #3
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f003 0203 	and.w	r2, r3, #3
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 80a2 	beq.w	8002b8e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	4b57      	ldr	r3, [pc, #348]	; (8002bac <HAL_GPIO_Init+0x2e8>)
 8002a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a52:	4a56      	ldr	r2, [pc, #344]	; (8002bac <HAL_GPIO_Init+0x2e8>)
 8002a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a58:	6453      	str	r3, [r2, #68]	; 0x44
 8002a5a:	4b54      	ldr	r3, [pc, #336]	; (8002bac <HAL_GPIO_Init+0x2e8>)
 8002a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a66:	4a52      	ldr	r2, [pc, #328]	; (8002bb0 <HAL_GPIO_Init+0x2ec>)
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	089b      	lsrs	r3, r3, #2
 8002a6c:	3302      	adds	r3, #2
 8002a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	f003 0303 	and.w	r3, r3, #3
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	220f      	movs	r2, #15
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	43db      	mvns	r3, r3
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	4013      	ands	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a49      	ldr	r2, [pc, #292]	; (8002bb4 <HAL_GPIO_Init+0x2f0>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d019      	beq.n	8002ac6 <HAL_GPIO_Init+0x202>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a48      	ldr	r2, [pc, #288]	; (8002bb8 <HAL_GPIO_Init+0x2f4>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d013      	beq.n	8002ac2 <HAL_GPIO_Init+0x1fe>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a47      	ldr	r2, [pc, #284]	; (8002bbc <HAL_GPIO_Init+0x2f8>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d00d      	beq.n	8002abe <HAL_GPIO_Init+0x1fa>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a46      	ldr	r2, [pc, #280]	; (8002bc0 <HAL_GPIO_Init+0x2fc>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d007      	beq.n	8002aba <HAL_GPIO_Init+0x1f6>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a45      	ldr	r2, [pc, #276]	; (8002bc4 <HAL_GPIO_Init+0x300>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d101      	bne.n	8002ab6 <HAL_GPIO_Init+0x1f2>
 8002ab2:	2304      	movs	r3, #4
 8002ab4:	e008      	b.n	8002ac8 <HAL_GPIO_Init+0x204>
 8002ab6:	2307      	movs	r3, #7
 8002ab8:	e006      	b.n	8002ac8 <HAL_GPIO_Init+0x204>
 8002aba:	2303      	movs	r3, #3
 8002abc:	e004      	b.n	8002ac8 <HAL_GPIO_Init+0x204>
 8002abe:	2302      	movs	r3, #2
 8002ac0:	e002      	b.n	8002ac8 <HAL_GPIO_Init+0x204>
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e000      	b.n	8002ac8 <HAL_GPIO_Init+0x204>
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	69fa      	ldr	r2, [r7, #28]
 8002aca:	f002 0203 	and.w	r2, r2, #3
 8002ace:	0092      	lsls	r2, r2, #2
 8002ad0:	4093      	lsls	r3, r2
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ad8:	4935      	ldr	r1, [pc, #212]	; (8002bb0 <HAL_GPIO_Init+0x2ec>)
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	089b      	lsrs	r3, r3, #2
 8002ade:	3302      	adds	r3, #2
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ae6:	4b38      	ldr	r3, [pc, #224]	; (8002bc8 <HAL_GPIO_Init+0x304>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	43db      	mvns	r3, r3
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	4013      	ands	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b0a:	4a2f      	ldr	r2, [pc, #188]	; (8002bc8 <HAL_GPIO_Init+0x304>)
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b10:	4b2d      	ldr	r3, [pc, #180]	; (8002bc8 <HAL_GPIO_Init+0x304>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b34:	4a24      	ldr	r2, [pc, #144]	; (8002bc8 <HAL_GPIO_Init+0x304>)
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b3a:	4b23      	ldr	r3, [pc, #140]	; (8002bc8 <HAL_GPIO_Init+0x304>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	43db      	mvns	r3, r3
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	4013      	ands	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b5e:	4a1a      	ldr	r2, [pc, #104]	; (8002bc8 <HAL_GPIO_Init+0x304>)
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b64:	4b18      	ldr	r3, [pc, #96]	; (8002bc8 <HAL_GPIO_Init+0x304>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4013      	ands	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b88:	4a0f      	ldr	r2, [pc, #60]	; (8002bc8 <HAL_GPIO_Init+0x304>)
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	3301      	adds	r3, #1
 8002b92:	61fb      	str	r3, [r7, #28]
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	2b0f      	cmp	r3, #15
 8002b98:	f67f aea2 	bls.w	80028e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b9c:	bf00      	nop
 8002b9e:	bf00      	nop
 8002ba0:	3724      	adds	r7, #36	; 0x24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	40013800 	.word	0x40013800
 8002bb4:	40020000 	.word	0x40020000
 8002bb8:	40020400 	.word	0x40020400
 8002bbc:	40020800 	.word	0x40020800
 8002bc0:	40020c00 	.word	0x40020c00
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	40013c00 	.word	0x40013c00

08002bcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	691a      	ldr	r2, [r3, #16]
 8002bdc:	887b      	ldrh	r3, [r7, #2]
 8002bde:	4013      	ands	r3, r2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d002      	beq.n	8002bea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002be4:	2301      	movs	r3, #1
 8002be6:	73fb      	strb	r3, [r7, #15]
 8002be8:	e001      	b.n	8002bee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bea:	2300      	movs	r3, #0
 8002bec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3714      	adds	r7, #20
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	460b      	mov	r3, r1
 8002c06:	807b      	strh	r3, [r7, #2]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c0c:	787b      	ldrb	r3, [r7, #1]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c12:	887a      	ldrh	r2, [r7, #2]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c18:	e003      	b.n	8002c22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c1a:	887b      	ldrh	r3, [r7, #2]
 8002c1c:	041a      	lsls	r2, r3, #16
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	619a      	str	r2, [r3, #24]
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
	...

08002c30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e12b      	b.n	8002e9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d106      	bne.n	8002c5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7ff fa56 	bl	8002108 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2224      	movs	r2, #36	; 0x24
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0201 	bic.w	r2, r2, #1
 8002c72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c94:	f001 fbd2 	bl	800443c <HAL_RCC_GetPCLK1Freq>
 8002c98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	4a81      	ldr	r2, [pc, #516]	; (8002ea4 <HAL_I2C_Init+0x274>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d807      	bhi.n	8002cb4 <HAL_I2C_Init+0x84>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4a80      	ldr	r2, [pc, #512]	; (8002ea8 <HAL_I2C_Init+0x278>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	bf94      	ite	ls
 8002cac:	2301      	movls	r3, #1
 8002cae:	2300      	movhi	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	e006      	b.n	8002cc2 <HAL_I2C_Init+0x92>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4a7d      	ldr	r2, [pc, #500]	; (8002eac <HAL_I2C_Init+0x27c>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	bf94      	ite	ls
 8002cbc:	2301      	movls	r3, #1
 8002cbe:	2300      	movhi	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e0e7      	b.n	8002e9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	4a78      	ldr	r2, [pc, #480]	; (8002eb0 <HAL_I2C_Init+0x280>)
 8002cce:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd2:	0c9b      	lsrs	r3, r3, #18
 8002cd4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	4a6a      	ldr	r2, [pc, #424]	; (8002ea4 <HAL_I2C_Init+0x274>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d802      	bhi.n	8002d04 <HAL_I2C_Init+0xd4>
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	3301      	adds	r3, #1
 8002d02:	e009      	b.n	8002d18 <HAL_I2C_Init+0xe8>
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d0a:	fb02 f303 	mul.w	r3, r2, r3
 8002d0e:	4a69      	ldr	r2, [pc, #420]	; (8002eb4 <HAL_I2C_Init+0x284>)
 8002d10:	fba2 2303 	umull	r2, r3, r2, r3
 8002d14:	099b      	lsrs	r3, r3, #6
 8002d16:	3301      	adds	r3, #1
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	6812      	ldr	r2, [r2, #0]
 8002d1c:	430b      	orrs	r3, r1
 8002d1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	495c      	ldr	r1, [pc, #368]	; (8002ea4 <HAL_I2C_Init+0x274>)
 8002d34:	428b      	cmp	r3, r1
 8002d36:	d819      	bhi.n	8002d6c <HAL_I2C_Init+0x13c>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	1e59      	subs	r1, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d46:	1c59      	adds	r1, r3, #1
 8002d48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d4c:	400b      	ands	r3, r1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00a      	beq.n	8002d68 <HAL_I2C_Init+0x138>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	1e59      	subs	r1, r3, #1
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d60:	3301      	adds	r3, #1
 8002d62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d66:	e051      	b.n	8002e0c <HAL_I2C_Init+0x1dc>
 8002d68:	2304      	movs	r3, #4
 8002d6a:	e04f      	b.n	8002e0c <HAL_I2C_Init+0x1dc>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d111      	bne.n	8002d98 <HAL_I2C_Init+0x168>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	1e58      	subs	r0, r3, #1
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6859      	ldr	r1, [r3, #4]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	440b      	add	r3, r1
 8002d82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d86:	3301      	adds	r3, #1
 8002d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	bf0c      	ite	eq
 8002d90:	2301      	moveq	r3, #1
 8002d92:	2300      	movne	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	e012      	b.n	8002dbe <HAL_I2C_Init+0x18e>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	1e58      	subs	r0, r3, #1
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6859      	ldr	r1, [r3, #4]
 8002da0:	460b      	mov	r3, r1
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	0099      	lsls	r1, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dae:	3301      	adds	r3, #1
 8002db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	bf0c      	ite	eq
 8002db8:	2301      	moveq	r3, #1
 8002dba:	2300      	movne	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_I2C_Init+0x196>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e022      	b.n	8002e0c <HAL_I2C_Init+0x1dc>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10e      	bne.n	8002dec <HAL_I2C_Init+0x1bc>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	1e58      	subs	r0, r3, #1
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6859      	ldr	r1, [r3, #4]
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	440b      	add	r3, r1
 8002ddc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002de0:	3301      	adds	r3, #1
 8002de2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dea:	e00f      	b.n	8002e0c <HAL_I2C_Init+0x1dc>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	1e58      	subs	r0, r3, #1
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6859      	ldr	r1, [r3, #4]
 8002df4:	460b      	mov	r3, r1
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	0099      	lsls	r1, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e02:	3301      	adds	r3, #1
 8002e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	6809      	ldr	r1, [r1, #0]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69da      	ldr	r2, [r3, #28]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6911      	ldr	r1, [r2, #16]
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	68d2      	ldr	r2, [r2, #12]
 8002e46:	4311      	orrs	r1, r2
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6812      	ldr	r2, [r2, #0]
 8002e4c:	430b      	orrs	r3, r1
 8002e4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695a      	ldr	r2, [r3, #20]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0201 	orr.w	r2, r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2220      	movs	r2, #32
 8002e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	000186a0 	.word	0x000186a0
 8002ea8:	001e847f 	.word	0x001e847f
 8002eac:	003d08ff 	.word	0x003d08ff
 8002eb0:	431bde83 	.word	0x431bde83
 8002eb4:	10624dd3 	.word	0x10624dd3

08002eb8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b088      	sub	sp, #32
 8002ebc:	af02      	add	r7, sp, #8
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	607a      	str	r2, [r7, #4]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	817b      	strh	r3, [r7, #10]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ecc:	f7ff fbe4 	bl	8002698 <HAL_GetTick>
 8002ed0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b20      	cmp	r3, #32
 8002edc:	f040 80e0 	bne.w	80030a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	2319      	movs	r3, #25
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	4970      	ldr	r1, [pc, #448]	; (80030ac <HAL_I2C_Master_Transmit+0x1f4>)
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 fc58 	bl	80037a0 <I2C_WaitOnFlagUntilTimeout>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	e0d3      	b.n	80030a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <HAL_I2C_Master_Transmit+0x50>
 8002f04:	2302      	movs	r3, #2
 8002f06:	e0cc      	b.n	80030a2 <HAL_I2C_Master_Transmit+0x1ea>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d007      	beq.n	8002f2e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f042 0201 	orr.w	r2, r2, #1
 8002f2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f3c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2221      	movs	r2, #33	; 0x21
 8002f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2210      	movs	r2, #16
 8002f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	893a      	ldrh	r2, [r7, #8]
 8002f5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	4a50      	ldr	r2, [pc, #320]	; (80030b0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002f6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f70:	8979      	ldrh	r1, [r7, #10]
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	6a3a      	ldr	r2, [r7, #32]
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 fac2 	bl	8003500 <I2C_MasterRequestWrite>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e08d      	b.n	80030a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f86:	2300      	movs	r3, #0
 8002f88:	613b      	str	r3, [r7, #16]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	613b      	str	r3, [r7, #16]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	613b      	str	r3, [r7, #16]
 8002f9a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f9c:	e066      	b.n	800306c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	6a39      	ldr	r1, [r7, #32]
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 fcd2 	bl	800394c <I2C_WaitOnTXEFlagUntilTimeout>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00d      	beq.n	8002fca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d107      	bne.n	8002fc6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fc4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e06b      	b.n	80030a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fce:	781a      	ldrb	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	2b04      	cmp	r3, #4
 8003006:	d11b      	bne.n	8003040 <HAL_I2C_Master_Transmit+0x188>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800300c:	2b00      	cmp	r3, #0
 800300e:	d017      	beq.n	8003040 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	781a      	ldrb	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	1c5a      	adds	r2, r3, #1
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302a:	b29b      	uxth	r3, r3
 800302c:	3b01      	subs	r3, #1
 800302e:	b29a      	uxth	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003038:	3b01      	subs	r3, #1
 800303a:	b29a      	uxth	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	6a39      	ldr	r1, [r7, #32]
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f000 fcc2 	bl	80039ce <I2C_WaitOnBTFFlagUntilTimeout>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00d      	beq.n	800306c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003054:	2b04      	cmp	r3, #4
 8003056:	d107      	bne.n	8003068 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003066:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e01a      	b.n	80030a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003070:	2b00      	cmp	r3, #0
 8003072:	d194      	bne.n	8002f9e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003082:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2220      	movs	r2, #32
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800309c:	2300      	movs	r3, #0
 800309e:	e000      	b.n	80030a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80030a0:	2302      	movs	r3, #2
  }
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	00100002 	.word	0x00100002
 80030b0:	ffff0000 	.word	0xffff0000

080030b4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b08c      	sub	sp, #48	; 0x30
 80030b8:	af02      	add	r7, sp, #8
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	607a      	str	r2, [r7, #4]
 80030be:	461a      	mov	r2, r3
 80030c0:	460b      	mov	r3, r1
 80030c2:	817b      	strh	r3, [r7, #10]
 80030c4:	4613      	mov	r3, r2
 80030c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030c8:	f7ff fae6 	bl	8002698 <HAL_GetTick>
 80030cc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b20      	cmp	r3, #32
 80030d8:	f040 820b 	bne.w	80034f2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	2319      	movs	r3, #25
 80030e2:	2201      	movs	r2, #1
 80030e4:	497c      	ldr	r1, [pc, #496]	; (80032d8 <HAL_I2C_Master_Receive+0x224>)
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f000 fb5a 	bl	80037a0 <I2C_WaitOnFlagUntilTimeout>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80030f2:	2302      	movs	r3, #2
 80030f4:	e1fe      	b.n	80034f4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d101      	bne.n	8003104 <HAL_I2C_Master_Receive+0x50>
 8003100:	2302      	movs	r3, #2
 8003102:	e1f7      	b.n	80034f4 <HAL_I2C_Master_Receive+0x440>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b01      	cmp	r3, #1
 8003118:	d007      	beq.n	800312a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f042 0201 	orr.w	r2, r2, #1
 8003128:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003138:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2222      	movs	r2, #34	; 0x22
 800313e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2210      	movs	r2, #16
 8003146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	893a      	ldrh	r2, [r7, #8]
 800315a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003160:	b29a      	uxth	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	4a5c      	ldr	r2, [pc, #368]	; (80032dc <HAL_I2C_Master_Receive+0x228>)
 800316a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800316c:	8979      	ldrh	r1, [r7, #10]
 800316e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f000 fa46 	bl	8003604 <I2C_MasterRequestRead>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e1b8      	b.n	80034f4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003186:	2b00      	cmp	r3, #0
 8003188:	d113      	bne.n	80031b2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800318a:	2300      	movs	r3, #0
 800318c:	623b      	str	r3, [r7, #32]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	623b      	str	r3, [r7, #32]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	623b      	str	r3, [r7, #32]
 800319e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ae:	601a      	str	r2, [r3, #0]
 80031b0:	e18c      	b.n	80034cc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d11b      	bne.n	80031f2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ca:	2300      	movs	r3, #0
 80031cc:	61fb      	str	r3, [r7, #28]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	61fb      	str	r3, [r7, #28]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	61fb      	str	r3, [r7, #28]
 80031de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	e16c      	b.n	80034cc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d11b      	bne.n	8003232 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003208:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003218:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800321a:	2300      	movs	r3, #0
 800321c:	61bb      	str	r3, [r7, #24]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	61bb      	str	r3, [r7, #24]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	61bb      	str	r3, [r7, #24]
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	e14c      	b.n	80034cc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003240:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003242:	2300      	movs	r3, #0
 8003244:	617b      	str	r3, [r7, #20]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	617b      	str	r3, [r7, #20]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	617b      	str	r3, [r7, #20]
 8003256:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003258:	e138      	b.n	80034cc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800325e:	2b03      	cmp	r3, #3
 8003260:	f200 80f1 	bhi.w	8003446 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003268:	2b01      	cmp	r3, #1
 800326a:	d123      	bne.n	80032b4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800326c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800326e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 fbed 	bl	8003a50 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e139      	b.n	80034f4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691a      	ldr	r2, [r3, #16]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	1c5a      	adds	r2, r3, #1
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800329c:	3b01      	subs	r3, #1
 800329e:	b29a      	uxth	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	3b01      	subs	r3, #1
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032b2:	e10b      	b.n	80034cc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d14e      	bne.n	800335a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c2:	2200      	movs	r2, #0
 80032c4:	4906      	ldr	r1, [pc, #24]	; (80032e0 <HAL_I2C_Master_Receive+0x22c>)
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f000 fa6a 	bl	80037a0 <I2C_WaitOnFlagUntilTimeout>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d008      	beq.n	80032e4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e10e      	b.n	80034f4 <HAL_I2C_Master_Receive+0x440>
 80032d6:	bf00      	nop
 80032d8:	00100002 	.word	0x00100002
 80032dc:	ffff0000 	.word	0xffff0000
 80032e0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	691a      	ldr	r2, [r3, #16]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	1c5a      	adds	r2, r3, #1
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003310:	3b01      	subs	r3, #1
 8003312:	b29a      	uxth	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331c:	b29b      	uxth	r3, r3
 800331e:	3b01      	subs	r3, #1
 8003320:	b29a      	uxth	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	691a      	ldr	r2, [r3, #16]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003330:	b2d2      	uxtb	r2, r2
 8003332:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	1c5a      	adds	r2, r3, #1
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003342:	3b01      	subs	r3, #1
 8003344:	b29a      	uxth	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334e:	b29b      	uxth	r3, r3
 8003350:	3b01      	subs	r3, #1
 8003352:	b29a      	uxth	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003358:	e0b8      	b.n	80034cc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003360:	2200      	movs	r2, #0
 8003362:	4966      	ldr	r1, [pc, #408]	; (80034fc <HAL_I2C_Master_Receive+0x448>)
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f000 fa1b 	bl	80037a0 <I2C_WaitOnFlagUntilTimeout>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e0bf      	b.n	80034f4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003382:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	691a      	ldr	r2, [r3, #16]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	b2d2      	uxtb	r2, r2
 8003390:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003396:	1c5a      	adds	r2, r3, #1
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a0:	3b01      	subs	r3, #1
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	3b01      	subs	r3, #1
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033bc:	2200      	movs	r2, #0
 80033be:	494f      	ldr	r1, [pc, #316]	; (80034fc <HAL_I2C_Master_Receive+0x448>)
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 f9ed 	bl	80037a0 <I2C_WaitOnFlagUntilTimeout>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e091      	b.n	80034f4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	691a      	ldr	r2, [r3, #16]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	b2d2      	uxtb	r2, r2
 80033ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	1c5a      	adds	r2, r3, #1
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fc:	3b01      	subs	r3, #1
 80033fe:	b29a      	uxth	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003408:	b29b      	uxth	r3, r3
 800340a:	3b01      	subs	r3, #1
 800340c:	b29a      	uxth	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	691a      	ldr	r2, [r3, #16]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341c:	b2d2      	uxtb	r2, r2
 800341e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	1c5a      	adds	r2, r3, #1
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800342e:	3b01      	subs	r3, #1
 8003430:	b29a      	uxth	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800343a:	b29b      	uxth	r3, r3
 800343c:	3b01      	subs	r3, #1
 800343e:	b29a      	uxth	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003444:	e042      	b.n	80034cc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003448:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 fb00 	bl	8003a50 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e04c      	b.n	80034f4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	691a      	ldr	r2, [r3, #16]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003464:	b2d2      	uxtb	r2, r2
 8003466:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	1c5a      	adds	r2, r3, #1
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003476:	3b01      	subs	r3, #1
 8003478:	b29a      	uxth	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003482:	b29b      	uxth	r3, r3
 8003484:	3b01      	subs	r3, #1
 8003486:	b29a      	uxth	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	f003 0304 	and.w	r3, r3, #4
 8003496:	2b04      	cmp	r3, #4
 8003498:	d118      	bne.n	80034cc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	691a      	ldr	r2, [r3, #16]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a4:	b2d2      	uxtb	r2, r2
 80034a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	1c5a      	adds	r2, r3, #1
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b6:	3b01      	subs	r3, #1
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	3b01      	subs	r3, #1
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f47f aec2 	bne.w	800325a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2220      	movs	r2, #32
 80034da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034ee:	2300      	movs	r3, #0
 80034f0:	e000      	b.n	80034f4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80034f2:	2302      	movs	r3, #2
  }
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3728      	adds	r7, #40	; 0x28
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	00010004 	.word	0x00010004

08003500 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b088      	sub	sp, #32
 8003504:	af02      	add	r7, sp, #8
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	607a      	str	r2, [r7, #4]
 800350a:	603b      	str	r3, [r7, #0]
 800350c:	460b      	mov	r3, r1
 800350e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003514:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	2b08      	cmp	r3, #8
 800351a:	d006      	beq.n	800352a <I2C_MasterRequestWrite+0x2a>
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d003      	beq.n	800352a <I2C_MasterRequestWrite+0x2a>
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003528:	d108      	bne.n	800353c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	e00b      	b.n	8003554 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003540:	2b12      	cmp	r3, #18
 8003542:	d107      	bne.n	8003554 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003552:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 f91d 	bl	80037a0 <I2C_WaitOnFlagUntilTimeout>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00d      	beq.n	8003588 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800357a:	d103      	bne.n	8003584 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003582:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e035      	b.n	80035f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003590:	d108      	bne.n	80035a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003592:	897b      	ldrh	r3, [r7, #10]
 8003594:	b2db      	uxtb	r3, r3
 8003596:	461a      	mov	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035a0:	611a      	str	r2, [r3, #16]
 80035a2:	e01b      	b.n	80035dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80035a4:	897b      	ldrh	r3, [r7, #10]
 80035a6:	11db      	asrs	r3, r3, #7
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	f003 0306 	and.w	r3, r3, #6
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	f063 030f 	orn	r3, r3, #15
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	490e      	ldr	r1, [pc, #56]	; (80035fc <I2C_MasterRequestWrite+0xfc>)
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f000 f943 	bl	800384e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e010      	b.n	80035f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035d2:	897b      	ldrh	r3, [r7, #10]
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	4907      	ldr	r1, [pc, #28]	; (8003600 <I2C_MasterRequestWrite+0x100>)
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f000 f933 	bl	800384e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e000      	b.n	80035f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3718      	adds	r7, #24
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	00010008 	.word	0x00010008
 8003600:	00010002 	.word	0x00010002

08003604 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b088      	sub	sp, #32
 8003608:	af02      	add	r7, sp, #8
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	607a      	str	r2, [r7, #4]
 800360e:	603b      	str	r3, [r7, #0]
 8003610:	460b      	mov	r3, r1
 8003612:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003618:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003628:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	2b08      	cmp	r3, #8
 800362e:	d006      	beq.n	800363e <I2C_MasterRequestRead+0x3a>
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d003      	beq.n	800363e <I2C_MasterRequestRead+0x3a>
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800363c:	d108      	bne.n	8003650 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	e00b      	b.n	8003668 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003654:	2b11      	cmp	r3, #17
 8003656:	d107      	bne.n	8003668 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003666:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f000 f893 	bl	80037a0 <I2C_WaitOnFlagUntilTimeout>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00d      	beq.n	800369c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800368e:	d103      	bne.n	8003698 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003696:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e079      	b.n	8003790 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036a4:	d108      	bne.n	80036b8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80036a6:	897b      	ldrh	r3, [r7, #10]
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	f043 0301 	orr.w	r3, r3, #1
 80036ae:	b2da      	uxtb	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	611a      	str	r2, [r3, #16]
 80036b6:	e05f      	b.n	8003778 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80036b8:	897b      	ldrh	r3, [r7, #10]
 80036ba:	11db      	asrs	r3, r3, #7
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	f003 0306 	and.w	r3, r3, #6
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	f063 030f 	orn	r3, r3, #15
 80036c8:	b2da      	uxtb	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	4930      	ldr	r1, [pc, #192]	; (8003798 <I2C_MasterRequestRead+0x194>)
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 f8b9 	bl	800384e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e054      	b.n	8003790 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80036e6:	897b      	ldrh	r3, [r7, #10]
 80036e8:	b2da      	uxtb	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	4929      	ldr	r1, [pc, #164]	; (800379c <I2C_MasterRequestRead+0x198>)
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 f8a9 	bl	800384e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e044      	b.n	8003790 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003706:	2300      	movs	r3, #0
 8003708:	613b      	str	r3, [r7, #16]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	695b      	ldr	r3, [r3, #20]
 8003710:	613b      	str	r3, [r7, #16]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	613b      	str	r3, [r7, #16]
 800371a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800372a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 f831 	bl	80037a0 <I2C_WaitOnFlagUntilTimeout>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00d      	beq.n	8003760 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003752:	d103      	bne.n	800375c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800375a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e017      	b.n	8003790 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003760:	897b      	ldrh	r3, [r7, #10]
 8003762:	11db      	asrs	r3, r3, #7
 8003764:	b2db      	uxtb	r3, r3
 8003766:	f003 0306 	and.w	r3, r3, #6
 800376a:	b2db      	uxtb	r3, r3
 800376c:	f063 030e 	orn	r3, r3, #14
 8003770:	b2da      	uxtb	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	4907      	ldr	r1, [pc, #28]	; (800379c <I2C_MasterRequestRead+0x198>)
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 f865 	bl	800384e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e000      	b.n	8003790 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3718      	adds	r7, #24
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	00010008 	.word	0x00010008
 800379c:	00010002 	.word	0x00010002

080037a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	603b      	str	r3, [r7, #0]
 80037ac:	4613      	mov	r3, r2
 80037ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037b0:	e025      	b.n	80037fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b8:	d021      	beq.n	80037fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ba:	f7fe ff6d 	bl	8002698 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d302      	bcc.n	80037d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d116      	bne.n	80037fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2220      	movs	r2, #32
 80037da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ea:	f043 0220 	orr.w	r2, r3, #32
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e023      	b.n	8003846 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	0c1b      	lsrs	r3, r3, #16
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b01      	cmp	r3, #1
 8003806:	d10d      	bne.n	8003824 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	43da      	mvns	r2, r3
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	4013      	ands	r3, r2
 8003814:	b29b      	uxth	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	bf0c      	ite	eq
 800381a:	2301      	moveq	r3, #1
 800381c:	2300      	movne	r3, #0
 800381e:	b2db      	uxtb	r3, r3
 8003820:	461a      	mov	r2, r3
 8003822:	e00c      	b.n	800383e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	43da      	mvns	r2, r3
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	4013      	ands	r3, r2
 8003830:	b29b      	uxth	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	bf0c      	ite	eq
 8003836:	2301      	moveq	r3, #1
 8003838:	2300      	movne	r3, #0
 800383a:	b2db      	uxtb	r3, r3
 800383c:	461a      	mov	r2, r3
 800383e:	79fb      	ldrb	r3, [r7, #7]
 8003840:	429a      	cmp	r2, r3
 8003842:	d0b6      	beq.n	80037b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b084      	sub	sp, #16
 8003852:	af00      	add	r7, sp, #0
 8003854:	60f8      	str	r0, [r7, #12]
 8003856:	60b9      	str	r1, [r7, #8]
 8003858:	607a      	str	r2, [r7, #4]
 800385a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800385c:	e051      	b.n	8003902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800386c:	d123      	bne.n	80038b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800387c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003886:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2220      	movs	r2, #32
 8003892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	f043 0204 	orr.w	r2, r3, #4
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e046      	b.n	8003944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038bc:	d021      	beq.n	8003902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038be:	f7fe feeb 	bl	8002698 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d302      	bcc.n	80038d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d116      	bne.n	8003902 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2220      	movs	r2, #32
 80038de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	f043 0220 	orr.w	r2, r3, #32
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e020      	b.n	8003944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	0c1b      	lsrs	r3, r3, #16
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b01      	cmp	r3, #1
 800390a:	d10c      	bne.n	8003926 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	43da      	mvns	r2, r3
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	4013      	ands	r3, r2
 8003918:	b29b      	uxth	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	bf14      	ite	ne
 800391e:	2301      	movne	r3, #1
 8003920:	2300      	moveq	r3, #0
 8003922:	b2db      	uxtb	r3, r3
 8003924:	e00b      	b.n	800393e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	43da      	mvns	r2, r3
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	4013      	ands	r3, r2
 8003932:	b29b      	uxth	r3, r3
 8003934:	2b00      	cmp	r3, #0
 8003936:	bf14      	ite	ne
 8003938:	2301      	movne	r3, #1
 800393a:	2300      	moveq	r3, #0
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d18d      	bne.n	800385e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003958:	e02d      	b.n	80039b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 f8ce 	bl	8003afc <I2C_IsAcknowledgeFailed>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e02d      	b.n	80039c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003970:	d021      	beq.n	80039b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003972:	f7fe fe91 	bl	8002698 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	68ba      	ldr	r2, [r7, #8]
 800397e:	429a      	cmp	r2, r3
 8003980:	d302      	bcc.n	8003988 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d116      	bne.n	80039b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2220      	movs	r2, #32
 8003992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	f043 0220 	orr.w	r2, r3, #32
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e007      	b.n	80039c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	695b      	ldr	r3, [r3, #20]
 80039bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c0:	2b80      	cmp	r3, #128	; 0x80
 80039c2:	d1ca      	bne.n	800395a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b084      	sub	sp, #16
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	60f8      	str	r0, [r7, #12]
 80039d6:	60b9      	str	r1, [r7, #8]
 80039d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039da:	e02d      	b.n	8003a38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 f88d 	bl	8003afc <I2C_IsAcknowledgeFailed>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e02d      	b.n	8003a48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f2:	d021      	beq.n	8003a38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039f4:	f7fe fe50 	bl	8002698 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d302      	bcc.n	8003a0a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d116      	bne.n	8003a38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2220      	movs	r2, #32
 8003a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a24:	f043 0220 	orr.w	r2, r3, #32
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e007      	b.n	8003a48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	f003 0304 	and.w	r3, r3, #4
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	d1ca      	bne.n	80039dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a5c:	e042      	b.n	8003ae4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	f003 0310 	and.w	r3, r3, #16
 8003a68:	2b10      	cmp	r3, #16
 8003a6a:	d119      	bne.n	8003aa0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f06f 0210 	mvn.w	r2, #16
 8003a74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e029      	b.n	8003af4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa0:	f7fe fdfa 	bl	8002698 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d302      	bcc.n	8003ab6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d116      	bne.n	8003ae4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad0:	f043 0220 	orr.w	r2, r3, #32
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e007      	b.n	8003af4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aee:	2b40      	cmp	r3, #64	; 0x40
 8003af0:	d1b5      	bne.n	8003a5e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b12:	d11b      	bne.n	8003b4c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b1c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2220      	movs	r2, #32
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b38:	f043 0204 	orr.w	r2, r3, #4
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e000      	b.n	8003b4e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
	...

08003b5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e267      	b.n	800403e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d075      	beq.n	8003c66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b7a:	4b88      	ldr	r3, [pc, #544]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f003 030c 	and.w	r3, r3, #12
 8003b82:	2b04      	cmp	r3, #4
 8003b84:	d00c      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b86:	4b85      	ldr	r3, [pc, #532]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b8e:	2b08      	cmp	r3, #8
 8003b90:	d112      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b92:	4b82      	ldr	r3, [pc, #520]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b9e:	d10b      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba0:	4b7e      	ldr	r3, [pc, #504]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d05b      	beq.n	8003c64 <HAL_RCC_OscConfig+0x108>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d157      	bne.n	8003c64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e242      	b.n	800403e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bc0:	d106      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x74>
 8003bc2:	4b76      	ldr	r3, [pc, #472]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a75      	ldr	r2, [pc, #468]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bcc:	6013      	str	r3, [r2, #0]
 8003bce:	e01d      	b.n	8003c0c <HAL_RCC_OscConfig+0xb0>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bd8:	d10c      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x98>
 8003bda:	4b70      	ldr	r3, [pc, #448]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a6f      	ldr	r2, [pc, #444]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003be0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	4b6d      	ldr	r3, [pc, #436]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a6c      	ldr	r2, [pc, #432]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf0:	6013      	str	r3, [r2, #0]
 8003bf2:	e00b      	b.n	8003c0c <HAL_RCC_OscConfig+0xb0>
 8003bf4:	4b69      	ldr	r3, [pc, #420]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a68      	ldr	r2, [pc, #416]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bfe:	6013      	str	r3, [r2, #0]
 8003c00:	4b66      	ldr	r3, [pc, #408]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a65      	ldr	r2, [pc, #404]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003c06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d013      	beq.n	8003c3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c14:	f7fe fd40 	bl	8002698 <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c1a:	e008      	b.n	8003c2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c1c:	f7fe fd3c 	bl	8002698 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b64      	cmp	r3, #100	; 0x64
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e207      	b.n	800403e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c2e:	4b5b      	ldr	r3, [pc, #364]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d0f0      	beq.n	8003c1c <HAL_RCC_OscConfig+0xc0>
 8003c3a:	e014      	b.n	8003c66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c3c:	f7fe fd2c 	bl	8002698 <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c44:	f7fe fd28 	bl	8002698 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b64      	cmp	r3, #100	; 0x64
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e1f3      	b.n	800403e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c56:	4b51      	ldr	r3, [pc, #324]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1f0      	bne.n	8003c44 <HAL_RCC_OscConfig+0xe8>
 8003c62:	e000      	b.n	8003c66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d063      	beq.n	8003d3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c72:	4b4a      	ldr	r3, [pc, #296]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f003 030c 	and.w	r3, r3, #12
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00b      	beq.n	8003c96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c7e:	4b47      	ldr	r3, [pc, #284]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c86:	2b08      	cmp	r3, #8
 8003c88:	d11c      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c8a:	4b44      	ldr	r3, [pc, #272]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d116      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c96:	4b41      	ldr	r3, [pc, #260]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d005      	beq.n	8003cae <HAL_RCC_OscConfig+0x152>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d001      	beq.n	8003cae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e1c7      	b.n	800403e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cae:	4b3b      	ldr	r3, [pc, #236]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	4937      	ldr	r1, [pc, #220]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cc2:	e03a      	b.n	8003d3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d020      	beq.n	8003d0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ccc:	4b34      	ldr	r3, [pc, #208]	; (8003da0 <HAL_RCC_OscConfig+0x244>)
 8003cce:	2201      	movs	r2, #1
 8003cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd2:	f7fe fce1 	bl	8002698 <HAL_GetTick>
 8003cd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd8:	e008      	b.n	8003cec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cda:	f7fe fcdd 	bl	8002698 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e1a8      	b.n	800403e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cec:	4b2b      	ldr	r3, [pc, #172]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d0f0      	beq.n	8003cda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cf8:	4b28      	ldr	r3, [pc, #160]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	4925      	ldr	r1, [pc, #148]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	600b      	str	r3, [r1, #0]
 8003d0c:	e015      	b.n	8003d3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d0e:	4b24      	ldr	r3, [pc, #144]	; (8003da0 <HAL_RCC_OscConfig+0x244>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d14:	f7fe fcc0 	bl	8002698 <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d1c:	f7fe fcbc 	bl	8002698 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e187      	b.n	800403e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d2e:	4b1b      	ldr	r3, [pc, #108]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1f0      	bne.n	8003d1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0308 	and.w	r3, r3, #8
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d036      	beq.n	8003db4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d016      	beq.n	8003d7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d4e:	4b15      	ldr	r3, [pc, #84]	; (8003da4 <HAL_RCC_OscConfig+0x248>)
 8003d50:	2201      	movs	r2, #1
 8003d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d54:	f7fe fca0 	bl	8002698 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d5c:	f7fe fc9c 	bl	8002698 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e167      	b.n	800403e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d6e:	4b0b      	ldr	r3, [pc, #44]	; (8003d9c <HAL_RCC_OscConfig+0x240>)
 8003d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d0f0      	beq.n	8003d5c <HAL_RCC_OscConfig+0x200>
 8003d7a:	e01b      	b.n	8003db4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d7c:	4b09      	ldr	r3, [pc, #36]	; (8003da4 <HAL_RCC_OscConfig+0x248>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d82:	f7fe fc89 	bl	8002698 <HAL_GetTick>
 8003d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d88:	e00e      	b.n	8003da8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d8a:	f7fe fc85 	bl	8002698 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d907      	bls.n	8003da8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e150      	b.n	800403e <HAL_RCC_OscConfig+0x4e2>
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	42470000 	.word	0x42470000
 8003da4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003da8:	4b88      	ldr	r3, [pc, #544]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003daa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1ea      	bne.n	8003d8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0304 	and.w	r3, r3, #4
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 8097 	beq.w	8003ef0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dc6:	4b81      	ldr	r3, [pc, #516]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10f      	bne.n	8003df2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	60bb      	str	r3, [r7, #8]
 8003dd6:	4b7d      	ldr	r3, [pc, #500]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	4a7c      	ldr	r2, [pc, #496]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003de0:	6413      	str	r3, [r2, #64]	; 0x40
 8003de2:	4b7a      	ldr	r3, [pc, #488]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dea:	60bb      	str	r3, [r7, #8]
 8003dec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dee:	2301      	movs	r3, #1
 8003df0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df2:	4b77      	ldr	r3, [pc, #476]	; (8003fd0 <HAL_RCC_OscConfig+0x474>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d118      	bne.n	8003e30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dfe:	4b74      	ldr	r3, [pc, #464]	; (8003fd0 <HAL_RCC_OscConfig+0x474>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a73      	ldr	r2, [pc, #460]	; (8003fd0 <HAL_RCC_OscConfig+0x474>)
 8003e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e0a:	f7fe fc45 	bl	8002698 <HAL_GetTick>
 8003e0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e10:	e008      	b.n	8003e24 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e12:	f7fe fc41 	bl	8002698 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d901      	bls.n	8003e24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e10c      	b.n	800403e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e24:	4b6a      	ldr	r3, [pc, #424]	; (8003fd0 <HAL_RCC_OscConfig+0x474>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0f0      	beq.n	8003e12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d106      	bne.n	8003e46 <HAL_RCC_OscConfig+0x2ea>
 8003e38:	4b64      	ldr	r3, [pc, #400]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3c:	4a63      	ldr	r2, [pc, #396]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003e3e:	f043 0301 	orr.w	r3, r3, #1
 8003e42:	6713      	str	r3, [r2, #112]	; 0x70
 8003e44:	e01c      	b.n	8003e80 <HAL_RCC_OscConfig+0x324>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	2b05      	cmp	r3, #5
 8003e4c:	d10c      	bne.n	8003e68 <HAL_RCC_OscConfig+0x30c>
 8003e4e:	4b5f      	ldr	r3, [pc, #380]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e52:	4a5e      	ldr	r2, [pc, #376]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003e54:	f043 0304 	orr.w	r3, r3, #4
 8003e58:	6713      	str	r3, [r2, #112]	; 0x70
 8003e5a:	4b5c      	ldr	r3, [pc, #368]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5e:	4a5b      	ldr	r2, [pc, #364]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003e60:	f043 0301 	orr.w	r3, r3, #1
 8003e64:	6713      	str	r3, [r2, #112]	; 0x70
 8003e66:	e00b      	b.n	8003e80 <HAL_RCC_OscConfig+0x324>
 8003e68:	4b58      	ldr	r3, [pc, #352]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6c:	4a57      	ldr	r2, [pc, #348]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003e6e:	f023 0301 	bic.w	r3, r3, #1
 8003e72:	6713      	str	r3, [r2, #112]	; 0x70
 8003e74:	4b55      	ldr	r3, [pc, #340]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e78:	4a54      	ldr	r2, [pc, #336]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003e7a:	f023 0304 	bic.w	r3, r3, #4
 8003e7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d015      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e88:	f7fe fc06 	bl	8002698 <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e8e:	e00a      	b.n	8003ea6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e90:	f7fe fc02 	bl	8002698 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e0cb      	b.n	800403e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ea6:	4b49      	ldr	r3, [pc, #292]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d0ee      	beq.n	8003e90 <HAL_RCC_OscConfig+0x334>
 8003eb2:	e014      	b.n	8003ede <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eb4:	f7fe fbf0 	bl	8002698 <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eba:	e00a      	b.n	8003ed2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ebc:	f7fe fbec 	bl	8002698 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e0b5      	b.n	800403e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ed2:	4b3e      	ldr	r3, [pc, #248]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1ee      	bne.n	8003ebc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ede:	7dfb      	ldrb	r3, [r7, #23]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d105      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ee4:	4b39      	ldr	r3, [pc, #228]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee8:	4a38      	ldr	r2, [pc, #224]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003eea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f000 80a1 	beq.w	800403c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003efa:	4b34      	ldr	r3, [pc, #208]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f003 030c 	and.w	r3, r3, #12
 8003f02:	2b08      	cmp	r3, #8
 8003f04:	d05c      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d141      	bne.n	8003f92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f0e:	4b31      	ldr	r3, [pc, #196]	; (8003fd4 <HAL_RCC_OscConfig+0x478>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f14:	f7fe fbc0 	bl	8002698 <HAL_GetTick>
 8003f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f1a:	e008      	b.n	8003f2e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f1c:	f7fe fbbc 	bl	8002698 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e087      	b.n	800403e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f2e:	4b27      	ldr	r3, [pc, #156]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1f0      	bne.n	8003f1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	69da      	ldr	r2, [r3, #28]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	431a      	orrs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f48:	019b      	lsls	r3, r3, #6
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f50:	085b      	lsrs	r3, r3, #1
 8003f52:	3b01      	subs	r3, #1
 8003f54:	041b      	lsls	r3, r3, #16
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5c:	061b      	lsls	r3, r3, #24
 8003f5e:	491b      	ldr	r1, [pc, #108]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f64:	4b1b      	ldr	r3, [pc, #108]	; (8003fd4 <HAL_RCC_OscConfig+0x478>)
 8003f66:	2201      	movs	r2, #1
 8003f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f6a:	f7fe fb95 	bl	8002698 <HAL_GetTick>
 8003f6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f70:	e008      	b.n	8003f84 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f72:	f7fe fb91 	bl	8002698 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d901      	bls.n	8003f84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e05c      	b.n	800403e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f84:	4b11      	ldr	r3, [pc, #68]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d0f0      	beq.n	8003f72 <HAL_RCC_OscConfig+0x416>
 8003f90:	e054      	b.n	800403c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f92:	4b10      	ldr	r3, [pc, #64]	; (8003fd4 <HAL_RCC_OscConfig+0x478>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f98:	f7fe fb7e 	bl	8002698 <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fa0:	f7fe fb7a 	bl	8002698 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e045      	b.n	800403e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fb2:	4b06      	ldr	r3, [pc, #24]	; (8003fcc <HAL_RCC_OscConfig+0x470>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1f0      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x444>
 8003fbe:	e03d      	b.n	800403c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d107      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e038      	b.n	800403e <HAL_RCC_OscConfig+0x4e2>
 8003fcc:	40023800 	.word	0x40023800
 8003fd0:	40007000 	.word	0x40007000
 8003fd4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fd8:	4b1b      	ldr	r3, [pc, #108]	; (8004048 <HAL_RCC_OscConfig+0x4ec>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d028      	beq.n	8004038 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d121      	bne.n	8004038 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d11a      	bne.n	8004038 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004008:	4013      	ands	r3, r2
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800400e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004010:	4293      	cmp	r3, r2
 8004012:	d111      	bne.n	8004038 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401e:	085b      	lsrs	r3, r3, #1
 8004020:	3b01      	subs	r3, #1
 8004022:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004024:	429a      	cmp	r2, r3
 8004026:	d107      	bne.n	8004038 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004032:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004034:	429a      	cmp	r2, r3
 8004036:	d001      	beq.n	800403c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e000      	b.n	800403e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3718      	adds	r7, #24
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	40023800 	.word	0x40023800

0800404c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d101      	bne.n	8004060 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e0cc      	b.n	80041fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004060:	4b68      	ldr	r3, [pc, #416]	; (8004204 <HAL_RCC_ClockConfig+0x1b8>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0307 	and.w	r3, r3, #7
 8004068:	683a      	ldr	r2, [r7, #0]
 800406a:	429a      	cmp	r2, r3
 800406c:	d90c      	bls.n	8004088 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800406e:	4b65      	ldr	r3, [pc, #404]	; (8004204 <HAL_RCC_ClockConfig+0x1b8>)
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	b2d2      	uxtb	r2, r2
 8004074:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004076:	4b63      	ldr	r3, [pc, #396]	; (8004204 <HAL_RCC_ClockConfig+0x1b8>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0307 	and.w	r3, r3, #7
 800407e:	683a      	ldr	r2, [r7, #0]
 8004080:	429a      	cmp	r2, r3
 8004082:	d001      	beq.n	8004088 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e0b8      	b.n	80041fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d020      	beq.n	80040d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0304 	and.w	r3, r3, #4
 800409c:	2b00      	cmp	r3, #0
 800409e:	d005      	beq.n	80040ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040a0:	4b59      	ldr	r3, [pc, #356]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	4a58      	ldr	r2, [pc, #352]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80040a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0308 	and.w	r3, r3, #8
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d005      	beq.n	80040c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040b8:	4b53      	ldr	r3, [pc, #332]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	4a52      	ldr	r2, [pc, #328]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80040be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040c4:	4b50      	ldr	r3, [pc, #320]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	494d      	ldr	r1, [pc, #308]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d044      	beq.n	800416c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d107      	bne.n	80040fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ea:	4b47      	ldr	r3, [pc, #284]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d119      	bne.n	800412a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e07f      	b.n	80041fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d003      	beq.n	800410a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004106:	2b03      	cmp	r3, #3
 8004108:	d107      	bne.n	800411a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800410a:	4b3f      	ldr	r3, [pc, #252]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d109      	bne.n	800412a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e06f      	b.n	80041fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800411a:	4b3b      	ldr	r3, [pc, #236]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e067      	b.n	80041fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800412a:	4b37      	ldr	r3, [pc, #220]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f023 0203 	bic.w	r2, r3, #3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	4934      	ldr	r1, [pc, #208]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 8004138:	4313      	orrs	r3, r2
 800413a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800413c:	f7fe faac 	bl	8002698 <HAL_GetTick>
 8004140:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004142:	e00a      	b.n	800415a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004144:	f7fe faa8 	bl	8002698 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004152:	4293      	cmp	r3, r2
 8004154:	d901      	bls.n	800415a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e04f      	b.n	80041fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800415a:	4b2b      	ldr	r3, [pc, #172]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f003 020c 	and.w	r2, r3, #12
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	429a      	cmp	r2, r3
 800416a:	d1eb      	bne.n	8004144 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800416c:	4b25      	ldr	r3, [pc, #148]	; (8004204 <HAL_RCC_ClockConfig+0x1b8>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0307 	and.w	r3, r3, #7
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	429a      	cmp	r2, r3
 8004178:	d20c      	bcs.n	8004194 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800417a:	4b22      	ldr	r3, [pc, #136]	; (8004204 <HAL_RCC_ClockConfig+0x1b8>)
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	b2d2      	uxtb	r2, r2
 8004180:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004182:	4b20      	ldr	r3, [pc, #128]	; (8004204 <HAL_RCC_ClockConfig+0x1b8>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0307 	and.w	r3, r3, #7
 800418a:	683a      	ldr	r2, [r7, #0]
 800418c:	429a      	cmp	r2, r3
 800418e:	d001      	beq.n	8004194 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e032      	b.n	80041fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	2b00      	cmp	r3, #0
 800419e:	d008      	beq.n	80041b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041a0:	4b19      	ldr	r3, [pc, #100]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	4916      	ldr	r1, [pc, #88]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0308 	and.w	r3, r3, #8
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d009      	beq.n	80041d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041be:	4b12      	ldr	r3, [pc, #72]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	00db      	lsls	r3, r3, #3
 80041cc:	490e      	ldr	r1, [pc, #56]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041d2:	f000 f821 	bl	8004218 <HAL_RCC_GetSysClockFreq>
 80041d6:	4602      	mov	r2, r0
 80041d8:	4b0b      	ldr	r3, [pc, #44]	; (8004208 <HAL_RCC_ClockConfig+0x1bc>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	091b      	lsrs	r3, r3, #4
 80041de:	f003 030f 	and.w	r3, r3, #15
 80041e2:	490a      	ldr	r1, [pc, #40]	; (800420c <HAL_RCC_ClockConfig+0x1c0>)
 80041e4:	5ccb      	ldrb	r3, [r1, r3]
 80041e6:	fa22 f303 	lsr.w	r3, r2, r3
 80041ea:	4a09      	ldr	r2, [pc, #36]	; (8004210 <HAL_RCC_ClockConfig+0x1c4>)
 80041ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041ee:	4b09      	ldr	r3, [pc, #36]	; (8004214 <HAL_RCC_ClockConfig+0x1c8>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7fe fa0c 	bl	8002610 <HAL_InitTick>

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	40023c00 	.word	0x40023c00
 8004208:	40023800 	.word	0x40023800
 800420c:	08005d2c 	.word	0x08005d2c
 8004210:	20000008 	.word	0x20000008
 8004214:	2000000c 	.word	0x2000000c

08004218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800421c:	b094      	sub	sp, #80	; 0x50
 800421e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004220:	2300      	movs	r3, #0
 8004222:	647b      	str	r3, [r7, #68]	; 0x44
 8004224:	2300      	movs	r3, #0
 8004226:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004228:	2300      	movs	r3, #0
 800422a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800422c:	2300      	movs	r3, #0
 800422e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004230:	4b79      	ldr	r3, [pc, #484]	; (8004418 <HAL_RCC_GetSysClockFreq+0x200>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f003 030c 	and.w	r3, r3, #12
 8004238:	2b08      	cmp	r3, #8
 800423a:	d00d      	beq.n	8004258 <HAL_RCC_GetSysClockFreq+0x40>
 800423c:	2b08      	cmp	r3, #8
 800423e:	f200 80e1 	bhi.w	8004404 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004242:	2b00      	cmp	r3, #0
 8004244:	d002      	beq.n	800424c <HAL_RCC_GetSysClockFreq+0x34>
 8004246:	2b04      	cmp	r3, #4
 8004248:	d003      	beq.n	8004252 <HAL_RCC_GetSysClockFreq+0x3a>
 800424a:	e0db      	b.n	8004404 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800424c:	4b73      	ldr	r3, [pc, #460]	; (800441c <HAL_RCC_GetSysClockFreq+0x204>)
 800424e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004250:	e0db      	b.n	800440a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004252:	4b73      	ldr	r3, [pc, #460]	; (8004420 <HAL_RCC_GetSysClockFreq+0x208>)
 8004254:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004256:	e0d8      	b.n	800440a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004258:	4b6f      	ldr	r3, [pc, #444]	; (8004418 <HAL_RCC_GetSysClockFreq+0x200>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004260:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004262:	4b6d      	ldr	r3, [pc, #436]	; (8004418 <HAL_RCC_GetSysClockFreq+0x200>)
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d063      	beq.n	8004336 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800426e:	4b6a      	ldr	r3, [pc, #424]	; (8004418 <HAL_RCC_GetSysClockFreq+0x200>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	099b      	lsrs	r3, r3, #6
 8004274:	2200      	movs	r2, #0
 8004276:	63bb      	str	r3, [r7, #56]	; 0x38
 8004278:	63fa      	str	r2, [r7, #60]	; 0x3c
 800427a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800427c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004280:	633b      	str	r3, [r7, #48]	; 0x30
 8004282:	2300      	movs	r3, #0
 8004284:	637b      	str	r3, [r7, #52]	; 0x34
 8004286:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800428a:	4622      	mov	r2, r4
 800428c:	462b      	mov	r3, r5
 800428e:	f04f 0000 	mov.w	r0, #0
 8004292:	f04f 0100 	mov.w	r1, #0
 8004296:	0159      	lsls	r1, r3, #5
 8004298:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800429c:	0150      	lsls	r0, r2, #5
 800429e:	4602      	mov	r2, r0
 80042a0:	460b      	mov	r3, r1
 80042a2:	4621      	mov	r1, r4
 80042a4:	1a51      	subs	r1, r2, r1
 80042a6:	6139      	str	r1, [r7, #16]
 80042a8:	4629      	mov	r1, r5
 80042aa:	eb63 0301 	sbc.w	r3, r3, r1
 80042ae:	617b      	str	r3, [r7, #20]
 80042b0:	f04f 0200 	mov.w	r2, #0
 80042b4:	f04f 0300 	mov.w	r3, #0
 80042b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042bc:	4659      	mov	r1, fp
 80042be:	018b      	lsls	r3, r1, #6
 80042c0:	4651      	mov	r1, sl
 80042c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042c6:	4651      	mov	r1, sl
 80042c8:	018a      	lsls	r2, r1, #6
 80042ca:	4651      	mov	r1, sl
 80042cc:	ebb2 0801 	subs.w	r8, r2, r1
 80042d0:	4659      	mov	r1, fp
 80042d2:	eb63 0901 	sbc.w	r9, r3, r1
 80042d6:	f04f 0200 	mov.w	r2, #0
 80042da:	f04f 0300 	mov.w	r3, #0
 80042de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042ea:	4690      	mov	r8, r2
 80042ec:	4699      	mov	r9, r3
 80042ee:	4623      	mov	r3, r4
 80042f0:	eb18 0303 	adds.w	r3, r8, r3
 80042f4:	60bb      	str	r3, [r7, #8]
 80042f6:	462b      	mov	r3, r5
 80042f8:	eb49 0303 	adc.w	r3, r9, r3
 80042fc:	60fb      	str	r3, [r7, #12]
 80042fe:	f04f 0200 	mov.w	r2, #0
 8004302:	f04f 0300 	mov.w	r3, #0
 8004306:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800430a:	4629      	mov	r1, r5
 800430c:	024b      	lsls	r3, r1, #9
 800430e:	4621      	mov	r1, r4
 8004310:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004314:	4621      	mov	r1, r4
 8004316:	024a      	lsls	r2, r1, #9
 8004318:	4610      	mov	r0, r2
 800431a:	4619      	mov	r1, r3
 800431c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800431e:	2200      	movs	r2, #0
 8004320:	62bb      	str	r3, [r7, #40]	; 0x28
 8004322:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004324:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004328:	f7fc fc1c 	bl	8000b64 <__aeabi_uldivmod>
 800432c:	4602      	mov	r2, r0
 800432e:	460b      	mov	r3, r1
 8004330:	4613      	mov	r3, r2
 8004332:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004334:	e058      	b.n	80043e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004336:	4b38      	ldr	r3, [pc, #224]	; (8004418 <HAL_RCC_GetSysClockFreq+0x200>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	099b      	lsrs	r3, r3, #6
 800433c:	2200      	movs	r2, #0
 800433e:	4618      	mov	r0, r3
 8004340:	4611      	mov	r1, r2
 8004342:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004346:	623b      	str	r3, [r7, #32]
 8004348:	2300      	movs	r3, #0
 800434a:	627b      	str	r3, [r7, #36]	; 0x24
 800434c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004350:	4642      	mov	r2, r8
 8004352:	464b      	mov	r3, r9
 8004354:	f04f 0000 	mov.w	r0, #0
 8004358:	f04f 0100 	mov.w	r1, #0
 800435c:	0159      	lsls	r1, r3, #5
 800435e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004362:	0150      	lsls	r0, r2, #5
 8004364:	4602      	mov	r2, r0
 8004366:	460b      	mov	r3, r1
 8004368:	4641      	mov	r1, r8
 800436a:	ebb2 0a01 	subs.w	sl, r2, r1
 800436e:	4649      	mov	r1, r9
 8004370:	eb63 0b01 	sbc.w	fp, r3, r1
 8004374:	f04f 0200 	mov.w	r2, #0
 8004378:	f04f 0300 	mov.w	r3, #0
 800437c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004380:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004384:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004388:	ebb2 040a 	subs.w	r4, r2, sl
 800438c:	eb63 050b 	sbc.w	r5, r3, fp
 8004390:	f04f 0200 	mov.w	r2, #0
 8004394:	f04f 0300 	mov.w	r3, #0
 8004398:	00eb      	lsls	r3, r5, #3
 800439a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800439e:	00e2      	lsls	r2, r4, #3
 80043a0:	4614      	mov	r4, r2
 80043a2:	461d      	mov	r5, r3
 80043a4:	4643      	mov	r3, r8
 80043a6:	18e3      	adds	r3, r4, r3
 80043a8:	603b      	str	r3, [r7, #0]
 80043aa:	464b      	mov	r3, r9
 80043ac:	eb45 0303 	adc.w	r3, r5, r3
 80043b0:	607b      	str	r3, [r7, #4]
 80043b2:	f04f 0200 	mov.w	r2, #0
 80043b6:	f04f 0300 	mov.w	r3, #0
 80043ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043be:	4629      	mov	r1, r5
 80043c0:	028b      	lsls	r3, r1, #10
 80043c2:	4621      	mov	r1, r4
 80043c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043c8:	4621      	mov	r1, r4
 80043ca:	028a      	lsls	r2, r1, #10
 80043cc:	4610      	mov	r0, r2
 80043ce:	4619      	mov	r1, r3
 80043d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043d2:	2200      	movs	r2, #0
 80043d4:	61bb      	str	r3, [r7, #24]
 80043d6:	61fa      	str	r2, [r7, #28]
 80043d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043dc:	f7fc fbc2 	bl	8000b64 <__aeabi_uldivmod>
 80043e0:	4602      	mov	r2, r0
 80043e2:	460b      	mov	r3, r1
 80043e4:	4613      	mov	r3, r2
 80043e6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043e8:	4b0b      	ldr	r3, [pc, #44]	; (8004418 <HAL_RCC_GetSysClockFreq+0x200>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	0c1b      	lsrs	r3, r3, #16
 80043ee:	f003 0303 	and.w	r3, r3, #3
 80043f2:	3301      	adds	r3, #1
 80043f4:	005b      	lsls	r3, r3, #1
 80043f6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80043f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004400:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004402:	e002      	b.n	800440a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004404:	4b05      	ldr	r3, [pc, #20]	; (800441c <HAL_RCC_GetSysClockFreq+0x204>)
 8004406:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004408:	bf00      	nop
    }
  }
  return sysclockfreq;
 800440a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800440c:	4618      	mov	r0, r3
 800440e:	3750      	adds	r7, #80	; 0x50
 8004410:	46bd      	mov	sp, r7
 8004412:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004416:	bf00      	nop
 8004418:	40023800 	.word	0x40023800
 800441c:	00f42400 	.word	0x00f42400
 8004420:	007a1200 	.word	0x007a1200

08004424 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004424:	b480      	push	{r7}
 8004426:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004428:	4b03      	ldr	r3, [pc, #12]	; (8004438 <HAL_RCC_GetHCLKFreq+0x14>)
 800442a:	681b      	ldr	r3, [r3, #0]
}
 800442c:	4618      	mov	r0, r3
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	20000008 	.word	0x20000008

0800443c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004440:	f7ff fff0 	bl	8004424 <HAL_RCC_GetHCLKFreq>
 8004444:	4602      	mov	r2, r0
 8004446:	4b05      	ldr	r3, [pc, #20]	; (800445c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	0a9b      	lsrs	r3, r3, #10
 800444c:	f003 0307 	and.w	r3, r3, #7
 8004450:	4903      	ldr	r1, [pc, #12]	; (8004460 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004452:	5ccb      	ldrb	r3, [r1, r3]
 8004454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004458:	4618      	mov	r0, r3
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40023800 	.word	0x40023800
 8004460:	08005d3c 	.word	0x08005d3c

08004464 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004468:	f7ff ffdc 	bl	8004424 <HAL_RCC_GetHCLKFreq>
 800446c:	4602      	mov	r2, r0
 800446e:	4b05      	ldr	r3, [pc, #20]	; (8004484 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	0b5b      	lsrs	r3, r3, #13
 8004474:	f003 0307 	and.w	r3, r3, #7
 8004478:	4903      	ldr	r1, [pc, #12]	; (8004488 <HAL_RCC_GetPCLK2Freq+0x24>)
 800447a:	5ccb      	ldrb	r3, [r1, r3]
 800447c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004480:	4618      	mov	r0, r3
 8004482:	bd80      	pop	{r7, pc}
 8004484:	40023800 	.word	0x40023800
 8004488:	08005d3c 	.word	0x08005d3c

0800448c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e041      	b.n	8004522 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d106      	bne.n	80044b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f7fd fec8 	bl	8002248 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2202      	movs	r2, #2
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	3304      	adds	r3, #4
 80044c8:	4619      	mov	r1, r3
 80044ca:	4610      	mov	r0, r2
 80044cc:	f000 fc4a 	bl	8004d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
	...

0800452c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b01      	cmp	r3, #1
 800453e:	d001      	beq.n	8004544 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e03c      	b.n	80045be <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2202      	movs	r2, #2
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a1e      	ldr	r2, [pc, #120]	; (80045cc <HAL_TIM_Base_Start+0xa0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d018      	beq.n	8004588 <HAL_TIM_Base_Start+0x5c>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800455e:	d013      	beq.n	8004588 <HAL_TIM_Base_Start+0x5c>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a1a      	ldr	r2, [pc, #104]	; (80045d0 <HAL_TIM_Base_Start+0xa4>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d00e      	beq.n	8004588 <HAL_TIM_Base_Start+0x5c>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a19      	ldr	r2, [pc, #100]	; (80045d4 <HAL_TIM_Base_Start+0xa8>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d009      	beq.n	8004588 <HAL_TIM_Base_Start+0x5c>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a17      	ldr	r2, [pc, #92]	; (80045d8 <HAL_TIM_Base_Start+0xac>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d004      	beq.n	8004588 <HAL_TIM_Base_Start+0x5c>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a16      	ldr	r2, [pc, #88]	; (80045dc <HAL_TIM_Base_Start+0xb0>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d111      	bne.n	80045ac <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f003 0307 	and.w	r3, r3, #7
 8004592:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2b06      	cmp	r3, #6
 8004598:	d010      	beq.n	80045bc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f042 0201 	orr.w	r2, r2, #1
 80045a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045aa:	e007      	b.n	80045bc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f042 0201 	orr.w	r2, r2, #1
 80045ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3714      	adds	r7, #20
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	40010000 	.word	0x40010000
 80045d0:	40000400 	.word	0x40000400
 80045d4:	40000800 	.word	0x40000800
 80045d8:	40000c00 	.word	0x40000c00
 80045dc:	40014000 	.word	0x40014000

080045e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d101      	bne.n	80045f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e041      	b.n	8004676 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d106      	bne.n	800460c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7fd fe7c 	bl	8002304 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2202      	movs	r2, #2
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	3304      	adds	r3, #4
 800461c:	4619      	mov	r1, r3
 800461e:	4610      	mov	r0, r2
 8004620:	f000 fba0 	bl	8004d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3708      	adds	r7, #8
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
	...

08004680 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d109      	bne.n	80046a4 <HAL_TIM_PWM_Start+0x24>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2b01      	cmp	r3, #1
 800469a:	bf14      	ite	ne
 800469c:	2301      	movne	r3, #1
 800469e:	2300      	moveq	r3, #0
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	e022      	b.n	80046ea <HAL_TIM_PWM_Start+0x6a>
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	2b04      	cmp	r3, #4
 80046a8:	d109      	bne.n	80046be <HAL_TIM_PWM_Start+0x3e>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	bf14      	ite	ne
 80046b6:	2301      	movne	r3, #1
 80046b8:	2300      	moveq	r3, #0
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	e015      	b.n	80046ea <HAL_TIM_PWM_Start+0x6a>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b08      	cmp	r3, #8
 80046c2:	d109      	bne.n	80046d8 <HAL_TIM_PWM_Start+0x58>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	bf14      	ite	ne
 80046d0:	2301      	movne	r3, #1
 80046d2:	2300      	moveq	r3, #0
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	e008      	b.n	80046ea <HAL_TIM_PWM_Start+0x6a>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	bf14      	ite	ne
 80046e4:	2301      	movne	r3, #1
 80046e6:	2300      	moveq	r3, #0
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e068      	b.n	80047c4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d104      	bne.n	8004702 <HAL_TIM_PWM_Start+0x82>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2202      	movs	r2, #2
 80046fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004700:	e013      	b.n	800472a <HAL_TIM_PWM_Start+0xaa>
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2b04      	cmp	r3, #4
 8004706:	d104      	bne.n	8004712 <HAL_TIM_PWM_Start+0x92>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004710:	e00b      	b.n	800472a <HAL_TIM_PWM_Start+0xaa>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	2b08      	cmp	r3, #8
 8004716:	d104      	bne.n	8004722 <HAL_TIM_PWM_Start+0xa2>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2202      	movs	r2, #2
 800471c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004720:	e003      	b.n	800472a <HAL_TIM_PWM_Start+0xaa>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2202      	movs	r2, #2
 8004726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2201      	movs	r2, #1
 8004730:	6839      	ldr	r1, [r7, #0]
 8004732:	4618      	mov	r0, r3
 8004734:	f000 ff6c 	bl	8005610 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a23      	ldr	r2, [pc, #140]	; (80047cc <HAL_TIM_PWM_Start+0x14c>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d107      	bne.n	8004752 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004750:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a1d      	ldr	r2, [pc, #116]	; (80047cc <HAL_TIM_PWM_Start+0x14c>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d018      	beq.n	800478e <HAL_TIM_PWM_Start+0x10e>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004764:	d013      	beq.n	800478e <HAL_TIM_PWM_Start+0x10e>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a19      	ldr	r2, [pc, #100]	; (80047d0 <HAL_TIM_PWM_Start+0x150>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d00e      	beq.n	800478e <HAL_TIM_PWM_Start+0x10e>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a17      	ldr	r2, [pc, #92]	; (80047d4 <HAL_TIM_PWM_Start+0x154>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d009      	beq.n	800478e <HAL_TIM_PWM_Start+0x10e>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a16      	ldr	r2, [pc, #88]	; (80047d8 <HAL_TIM_PWM_Start+0x158>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d004      	beq.n	800478e <HAL_TIM_PWM_Start+0x10e>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a14      	ldr	r2, [pc, #80]	; (80047dc <HAL_TIM_PWM_Start+0x15c>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d111      	bne.n	80047b2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f003 0307 	and.w	r3, r3, #7
 8004798:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2b06      	cmp	r3, #6
 800479e:	d010      	beq.n	80047c2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f042 0201 	orr.w	r2, r2, #1
 80047ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b0:	e007      	b.n	80047c2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f042 0201 	orr.w	r2, r2, #1
 80047c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	40010000 	.word	0x40010000
 80047d0:	40000400 	.word	0x40000400
 80047d4:	40000800 	.word	0x40000800
 80047d8:	40000c00 	.word	0x40000c00
 80047dc:	40014000 	.word	0x40014000

080047e0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d101      	bne.n	80047f2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e041      	b.n	8004876 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d106      	bne.n	800480c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f839 	bl	800487e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2202      	movs	r2, #2
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	3304      	adds	r3, #4
 800481c:	4619      	mov	r1, r3
 800481e:	4610      	mov	r0, r2
 8004820:	f000 faa0 	bl	8004d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800487e:	b480      	push	{r7}
 8004880:	b083      	sub	sp, #12
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004886:	bf00      	nop
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b086      	sub	sp, #24
 8004896:	af00      	add	r7, sp, #0
 8004898:	60f8      	str	r0, [r7, #12]
 800489a:	60b9      	str	r1, [r7, #8]
 800489c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800489e:	2300      	movs	r3, #0
 80048a0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d101      	bne.n	80048b0 <HAL_TIM_IC_ConfigChannel+0x1e>
 80048ac:	2302      	movs	r3, #2
 80048ae:	e088      	b.n	80049c2 <HAL_TIM_IC_ConfigChannel+0x130>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d11b      	bne.n	80048f6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6818      	ldr	r0, [r3, #0]
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	6819      	ldr	r1, [r3, #0]
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	f000 fce7 	bl	80052a0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	699a      	ldr	r2, [r3, #24]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f022 020c 	bic.w	r2, r2, #12
 80048e0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	6999      	ldr	r1, [r3, #24]
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	689a      	ldr	r2, [r3, #8]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	430a      	orrs	r2, r1
 80048f2:	619a      	str	r2, [r3, #24]
 80048f4:	e060      	b.n	80049b8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b04      	cmp	r3, #4
 80048fa:	d11c      	bne.n	8004936 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6818      	ldr	r0, [r3, #0]
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	6819      	ldr	r1, [r3, #0]
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	685a      	ldr	r2, [r3, #4]
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	f000 fd5f 	bl	80053ce <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	699a      	ldr	r2, [r3, #24]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800491e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6999      	ldr	r1, [r3, #24]
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	021a      	lsls	r2, r3, #8
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	430a      	orrs	r2, r1
 8004932:	619a      	str	r2, [r3, #24]
 8004934:	e040      	b.n	80049b8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2b08      	cmp	r3, #8
 800493a:	d11b      	bne.n	8004974 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6818      	ldr	r0, [r3, #0]
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	6819      	ldr	r1, [r3, #0]
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f000 fdac 	bl	80054a8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	69da      	ldr	r2, [r3, #28]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 020c 	bic.w	r2, r2, #12
 800495e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	69d9      	ldr	r1, [r3, #28]
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	689a      	ldr	r2, [r3, #8]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	430a      	orrs	r2, r1
 8004970:	61da      	str	r2, [r3, #28]
 8004972:	e021      	b.n	80049b8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b0c      	cmp	r3, #12
 8004978:	d11c      	bne.n	80049b4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6818      	ldr	r0, [r3, #0]
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	6819      	ldr	r1, [r3, #0]
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	685a      	ldr	r2, [r3, #4]
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	f000 fdc9 	bl	8005520 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	69da      	ldr	r2, [r3, #28]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800499c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	69d9      	ldr	r1, [r3, #28]
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	021a      	lsls	r2, r3, #8
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	61da      	str	r2, [r3, #28]
 80049b2:	e001      	b.n	80049b8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3718      	adds	r7, #24
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
	...

080049cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b086      	sub	sp, #24
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049d8:	2300      	movs	r3, #0
 80049da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d101      	bne.n	80049ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049e6:	2302      	movs	r3, #2
 80049e8:	e0ae      	b.n	8004b48 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b0c      	cmp	r3, #12
 80049f6:	f200 809f 	bhi.w	8004b38 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80049fa:	a201      	add	r2, pc, #4	; (adr r2, 8004a00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80049fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a00:	08004a35 	.word	0x08004a35
 8004a04:	08004b39 	.word	0x08004b39
 8004a08:	08004b39 	.word	0x08004b39
 8004a0c:	08004b39 	.word	0x08004b39
 8004a10:	08004a75 	.word	0x08004a75
 8004a14:	08004b39 	.word	0x08004b39
 8004a18:	08004b39 	.word	0x08004b39
 8004a1c:	08004b39 	.word	0x08004b39
 8004a20:	08004ab7 	.word	0x08004ab7
 8004a24:	08004b39 	.word	0x08004b39
 8004a28:	08004b39 	.word	0x08004b39
 8004a2c:	08004b39 	.word	0x08004b39
 8004a30:	08004af7 	.word	0x08004af7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68b9      	ldr	r1, [r7, #8]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 fa12 	bl	8004e64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	699a      	ldr	r2, [r3, #24]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f042 0208 	orr.w	r2, r2, #8
 8004a4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	699a      	ldr	r2, [r3, #24]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f022 0204 	bic.w	r2, r2, #4
 8004a5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	6999      	ldr	r1, [r3, #24]
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	691a      	ldr	r2, [r3, #16]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	619a      	str	r2, [r3, #24]
      break;
 8004a72:	e064      	b.n	8004b3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68b9      	ldr	r1, [r7, #8]
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f000 fa58 	bl	8004f30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	699a      	ldr	r2, [r3, #24]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	699a      	ldr	r2, [r3, #24]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	6999      	ldr	r1, [r3, #24]
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	021a      	lsls	r2, r3, #8
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	430a      	orrs	r2, r1
 8004ab2:	619a      	str	r2, [r3, #24]
      break;
 8004ab4:	e043      	b.n	8004b3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68b9      	ldr	r1, [r7, #8]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 faa3 	bl	8005008 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	69da      	ldr	r2, [r3, #28]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f042 0208 	orr.w	r2, r2, #8
 8004ad0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	69da      	ldr	r2, [r3, #28]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 0204 	bic.w	r2, r2, #4
 8004ae0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	69d9      	ldr	r1, [r3, #28]
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	691a      	ldr	r2, [r3, #16]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	430a      	orrs	r2, r1
 8004af2:	61da      	str	r2, [r3, #28]
      break;
 8004af4:	e023      	b.n	8004b3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68b9      	ldr	r1, [r7, #8]
 8004afc:	4618      	mov	r0, r3
 8004afe:	f000 faed 	bl	80050dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	69da      	ldr	r2, [r3, #28]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	69da      	ldr	r2, [r3, #28]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	69d9      	ldr	r1, [r3, #28]
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	021a      	lsls	r2, r3, #8
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	61da      	str	r2, [r3, #28]
      break;
 8004b36:	e002      	b.n	8004b3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	75fb      	strb	r3, [r7, #23]
      break;
 8004b3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b46:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3718      	adds	r7, #24
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d101      	bne.n	8004b6c <HAL_TIM_ConfigClockSource+0x1c>
 8004b68:	2302      	movs	r3, #2
 8004b6a:	e0b4      	b.n	8004cd6 <HAL_TIM_ConfigClockSource+0x186>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2202      	movs	r2, #2
 8004b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68ba      	ldr	r2, [r7, #8]
 8004b9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ba4:	d03e      	beq.n	8004c24 <HAL_TIM_ConfigClockSource+0xd4>
 8004ba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004baa:	f200 8087 	bhi.w	8004cbc <HAL_TIM_ConfigClockSource+0x16c>
 8004bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bb2:	f000 8086 	beq.w	8004cc2 <HAL_TIM_ConfigClockSource+0x172>
 8004bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bba:	d87f      	bhi.n	8004cbc <HAL_TIM_ConfigClockSource+0x16c>
 8004bbc:	2b70      	cmp	r3, #112	; 0x70
 8004bbe:	d01a      	beq.n	8004bf6 <HAL_TIM_ConfigClockSource+0xa6>
 8004bc0:	2b70      	cmp	r3, #112	; 0x70
 8004bc2:	d87b      	bhi.n	8004cbc <HAL_TIM_ConfigClockSource+0x16c>
 8004bc4:	2b60      	cmp	r3, #96	; 0x60
 8004bc6:	d050      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0x11a>
 8004bc8:	2b60      	cmp	r3, #96	; 0x60
 8004bca:	d877      	bhi.n	8004cbc <HAL_TIM_ConfigClockSource+0x16c>
 8004bcc:	2b50      	cmp	r3, #80	; 0x50
 8004bce:	d03c      	beq.n	8004c4a <HAL_TIM_ConfigClockSource+0xfa>
 8004bd0:	2b50      	cmp	r3, #80	; 0x50
 8004bd2:	d873      	bhi.n	8004cbc <HAL_TIM_ConfigClockSource+0x16c>
 8004bd4:	2b40      	cmp	r3, #64	; 0x40
 8004bd6:	d058      	beq.n	8004c8a <HAL_TIM_ConfigClockSource+0x13a>
 8004bd8:	2b40      	cmp	r3, #64	; 0x40
 8004bda:	d86f      	bhi.n	8004cbc <HAL_TIM_ConfigClockSource+0x16c>
 8004bdc:	2b30      	cmp	r3, #48	; 0x30
 8004bde:	d064      	beq.n	8004caa <HAL_TIM_ConfigClockSource+0x15a>
 8004be0:	2b30      	cmp	r3, #48	; 0x30
 8004be2:	d86b      	bhi.n	8004cbc <HAL_TIM_ConfigClockSource+0x16c>
 8004be4:	2b20      	cmp	r3, #32
 8004be6:	d060      	beq.n	8004caa <HAL_TIM_ConfigClockSource+0x15a>
 8004be8:	2b20      	cmp	r3, #32
 8004bea:	d867      	bhi.n	8004cbc <HAL_TIM_ConfigClockSource+0x16c>
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d05c      	beq.n	8004caa <HAL_TIM_ConfigClockSource+0x15a>
 8004bf0:	2b10      	cmp	r3, #16
 8004bf2:	d05a      	beq.n	8004caa <HAL_TIM_ConfigClockSource+0x15a>
 8004bf4:	e062      	b.n	8004cbc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6818      	ldr	r0, [r3, #0]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	6899      	ldr	r1, [r3, #8]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	f000 fce3 	bl	80055d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	609a      	str	r2, [r3, #8]
      break;
 8004c22:	e04f      	b.n	8004cc4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6818      	ldr	r0, [r3, #0]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	6899      	ldr	r1, [r3, #8]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	685a      	ldr	r2, [r3, #4]
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	f000 fccc 	bl	80055d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	689a      	ldr	r2, [r3, #8]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c46:	609a      	str	r2, [r3, #8]
      break;
 8004c48:	e03c      	b.n	8004cc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6818      	ldr	r0, [r3, #0]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	6859      	ldr	r1, [r3, #4]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	461a      	mov	r2, r3
 8004c58:	f000 fb8a 	bl	8005370 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2150      	movs	r1, #80	; 0x50
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 fc99 	bl	800559a <TIM_ITRx_SetConfig>
      break;
 8004c68:	e02c      	b.n	8004cc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6818      	ldr	r0, [r3, #0]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	6859      	ldr	r1, [r3, #4]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	461a      	mov	r2, r3
 8004c78:	f000 fbe6 	bl	8005448 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2160      	movs	r1, #96	; 0x60
 8004c82:	4618      	mov	r0, r3
 8004c84:	f000 fc89 	bl	800559a <TIM_ITRx_SetConfig>
      break;
 8004c88:	e01c      	b.n	8004cc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6818      	ldr	r0, [r3, #0]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	6859      	ldr	r1, [r3, #4]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	461a      	mov	r2, r3
 8004c98:	f000 fb6a 	bl	8005370 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2140      	movs	r1, #64	; 0x40
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 fc79 	bl	800559a <TIM_ITRx_SetConfig>
      break;
 8004ca8:	e00c      	b.n	8004cc4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	4610      	mov	r0, r2
 8004cb6:	f000 fc70 	bl	800559a <TIM_ITRx_SetConfig>
      break;
 8004cba:	e003      	b.n	8004cc4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8004cc0:	e000      	b.n	8004cc4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004cc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3710      	adds	r7, #16
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b082      	sub	sp, #8
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
 8004ce6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d101      	bne.n	8004cf6 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004cf2:	2302      	movs	r3, #2
 8004cf4:	e031      	b.n	8004d5a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2202      	movs	r2, #2
 8004d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004d06:	6839      	ldr	r1, [r7, #0]
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 fa37 	bl	800517c <TIM_SlaveTimer_SetConfig>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d009      	beq.n	8004d28 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e018      	b.n	8004d5a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68da      	ldr	r2, [r3, #12]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d36:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68da      	ldr	r2, [r3, #12]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d46:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3708      	adds	r7, #8
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
	...

08004d64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a34      	ldr	r2, [pc, #208]	; (8004e48 <TIM_Base_SetConfig+0xe4>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d00f      	beq.n	8004d9c <TIM_Base_SetConfig+0x38>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d82:	d00b      	beq.n	8004d9c <TIM_Base_SetConfig+0x38>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a31      	ldr	r2, [pc, #196]	; (8004e4c <TIM_Base_SetConfig+0xe8>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d007      	beq.n	8004d9c <TIM_Base_SetConfig+0x38>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a30      	ldr	r2, [pc, #192]	; (8004e50 <TIM_Base_SetConfig+0xec>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d003      	beq.n	8004d9c <TIM_Base_SetConfig+0x38>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a2f      	ldr	r2, [pc, #188]	; (8004e54 <TIM_Base_SetConfig+0xf0>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d108      	bne.n	8004dae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a25      	ldr	r2, [pc, #148]	; (8004e48 <TIM_Base_SetConfig+0xe4>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d01b      	beq.n	8004dee <TIM_Base_SetConfig+0x8a>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dbc:	d017      	beq.n	8004dee <TIM_Base_SetConfig+0x8a>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a22      	ldr	r2, [pc, #136]	; (8004e4c <TIM_Base_SetConfig+0xe8>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d013      	beq.n	8004dee <TIM_Base_SetConfig+0x8a>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a21      	ldr	r2, [pc, #132]	; (8004e50 <TIM_Base_SetConfig+0xec>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d00f      	beq.n	8004dee <TIM_Base_SetConfig+0x8a>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a20      	ldr	r2, [pc, #128]	; (8004e54 <TIM_Base_SetConfig+0xf0>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d00b      	beq.n	8004dee <TIM_Base_SetConfig+0x8a>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a1f      	ldr	r2, [pc, #124]	; (8004e58 <TIM_Base_SetConfig+0xf4>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d007      	beq.n	8004dee <TIM_Base_SetConfig+0x8a>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a1e      	ldr	r2, [pc, #120]	; (8004e5c <TIM_Base_SetConfig+0xf8>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d003      	beq.n	8004dee <TIM_Base_SetConfig+0x8a>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a1d      	ldr	r2, [pc, #116]	; (8004e60 <TIM_Base_SetConfig+0xfc>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d108      	bne.n	8004e00 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004df4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	689a      	ldr	r2, [r3, #8]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a08      	ldr	r2, [pc, #32]	; (8004e48 <TIM_Base_SetConfig+0xe4>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d103      	bne.n	8004e34 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	691a      	ldr	r2, [r3, #16]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	615a      	str	r2, [r3, #20]
}
 8004e3a:	bf00      	nop
 8004e3c:	3714      	adds	r7, #20
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	40010000 	.word	0x40010000
 8004e4c:	40000400 	.word	0x40000400
 8004e50:	40000800 	.word	0x40000800
 8004e54:	40000c00 	.word	0x40000c00
 8004e58:	40014000 	.word	0x40014000
 8004e5c:	40014400 	.word	0x40014400
 8004e60:	40014800 	.word	0x40014800

08004e64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b087      	sub	sp, #28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	f023 0201 	bic.w	r2, r3, #1
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f023 0303 	bic.w	r3, r3, #3
 8004e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f023 0302 	bic.w	r3, r3, #2
 8004eac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a1c      	ldr	r2, [pc, #112]	; (8004f2c <TIM_OC1_SetConfig+0xc8>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d10c      	bne.n	8004eda <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	f023 0308 	bic.w	r3, r3, #8
 8004ec6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f023 0304 	bic.w	r3, r3, #4
 8004ed8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a13      	ldr	r2, [pc, #76]	; (8004f2c <TIM_OC1_SetConfig+0xc8>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d111      	bne.n	8004f06 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ee8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ef0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	685a      	ldr	r2, [r3, #4]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	697a      	ldr	r2, [r7, #20]
 8004f1e:	621a      	str	r2, [r3, #32]
}
 8004f20:	bf00      	nop
 8004f22:	371c      	adds	r7, #28
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr
 8004f2c:	40010000 	.word	0x40010000

08004f30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b087      	sub	sp, #28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	f023 0210 	bic.w	r2, r3, #16
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	021b      	lsls	r3, r3, #8
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	f023 0320 	bic.w	r3, r3, #32
 8004f7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	011b      	lsls	r3, r3, #4
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a1e      	ldr	r2, [pc, #120]	; (8005004 <TIM_OC2_SetConfig+0xd4>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d10d      	bne.n	8004fac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	011b      	lsls	r3, r3, #4
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004faa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a15      	ldr	r2, [pc, #84]	; (8005004 <TIM_OC2_SetConfig+0xd4>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d113      	bne.n	8004fdc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	621a      	str	r2, [r3, #32]
}
 8004ff6:	bf00      	nop
 8004ff8:	371c      	adds	r7, #28
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	40010000 	.word	0x40010000

08005008 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005008:	b480      	push	{r7}
 800500a:	b087      	sub	sp, #28
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	69db      	ldr	r3, [r3, #28]
 800502e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f023 0303 	bic.w	r3, r3, #3
 800503e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	4313      	orrs	r3, r2
 8005048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	021b      	lsls	r3, r3, #8
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	4313      	orrs	r3, r2
 800505c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a1d      	ldr	r2, [pc, #116]	; (80050d8 <TIM_OC3_SetConfig+0xd0>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d10d      	bne.n	8005082 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800506c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	021b      	lsls	r3, r3, #8
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	4313      	orrs	r3, r2
 8005078:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005080:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a14      	ldr	r2, [pc, #80]	; (80050d8 <TIM_OC3_SetConfig+0xd0>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d113      	bne.n	80050b2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005090:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005098:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	011b      	lsls	r3, r3, #4
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	011b      	lsls	r3, r3, #4
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	685a      	ldr	r2, [r3, #4]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	621a      	str	r2, [r3, #32]
}
 80050cc:	bf00      	nop
 80050ce:	371c      	adds	r7, #28
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr
 80050d8:	40010000 	.word	0x40010000

080050dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050dc:	b480      	push	{r7}
 80050de:	b087      	sub	sp, #28
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	69db      	ldr	r3, [r3, #28]
 8005102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800510a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005112:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	021b      	lsls	r3, r3, #8
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	4313      	orrs	r3, r2
 800511e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005126:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	031b      	lsls	r3, r3, #12
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	4313      	orrs	r3, r2
 8005132:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a10      	ldr	r2, [pc, #64]	; (8005178 <TIM_OC4_SetConfig+0x9c>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d109      	bne.n	8005150 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005142:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	019b      	lsls	r3, r3, #6
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	4313      	orrs	r3, r2
 800514e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	685a      	ldr	r2, [r3, #4]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	621a      	str	r2, [r3, #32]
}
 800516a:	bf00      	nop
 800516c:	371c      	adds	r7, #28
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	40010000 	.word	0x40010000

0800517c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005186:	2300      	movs	r3, #0
 8005188:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005198:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	f023 0307 	bic.w	r3, r3, #7
 80051aa:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	2b70      	cmp	r3, #112	; 0x70
 80051c4:	d01a      	beq.n	80051fc <TIM_SlaveTimer_SetConfig+0x80>
 80051c6:	2b70      	cmp	r3, #112	; 0x70
 80051c8:	d860      	bhi.n	800528c <TIM_SlaveTimer_SetConfig+0x110>
 80051ca:	2b60      	cmp	r3, #96	; 0x60
 80051cc:	d054      	beq.n	8005278 <TIM_SlaveTimer_SetConfig+0xfc>
 80051ce:	2b60      	cmp	r3, #96	; 0x60
 80051d0:	d85c      	bhi.n	800528c <TIM_SlaveTimer_SetConfig+0x110>
 80051d2:	2b50      	cmp	r3, #80	; 0x50
 80051d4:	d046      	beq.n	8005264 <TIM_SlaveTimer_SetConfig+0xe8>
 80051d6:	2b50      	cmp	r3, #80	; 0x50
 80051d8:	d858      	bhi.n	800528c <TIM_SlaveTimer_SetConfig+0x110>
 80051da:	2b40      	cmp	r3, #64	; 0x40
 80051dc:	d019      	beq.n	8005212 <TIM_SlaveTimer_SetConfig+0x96>
 80051de:	2b40      	cmp	r3, #64	; 0x40
 80051e0:	d854      	bhi.n	800528c <TIM_SlaveTimer_SetConfig+0x110>
 80051e2:	2b30      	cmp	r3, #48	; 0x30
 80051e4:	d055      	beq.n	8005292 <TIM_SlaveTimer_SetConfig+0x116>
 80051e6:	2b30      	cmp	r3, #48	; 0x30
 80051e8:	d850      	bhi.n	800528c <TIM_SlaveTimer_SetConfig+0x110>
 80051ea:	2b20      	cmp	r3, #32
 80051ec:	d051      	beq.n	8005292 <TIM_SlaveTimer_SetConfig+0x116>
 80051ee:	2b20      	cmp	r3, #32
 80051f0:	d84c      	bhi.n	800528c <TIM_SlaveTimer_SetConfig+0x110>
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d04d      	beq.n	8005292 <TIM_SlaveTimer_SetConfig+0x116>
 80051f6:	2b10      	cmp	r3, #16
 80051f8:	d04b      	beq.n	8005292 <TIM_SlaveTimer_SetConfig+0x116>
 80051fa:	e047      	b.n	800528c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6818      	ldr	r0, [r3, #0]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	68d9      	ldr	r1, [r3, #12]
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	689a      	ldr	r2, [r3, #8]
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	f000 f9e0 	bl	80055d0 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8005210:	e040      	b.n	8005294 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2b05      	cmp	r3, #5
 8005218:	d101      	bne.n	800521e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e03b      	b.n	8005296 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	6a1b      	ldr	r3, [r3, #32]
 8005224:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	6a1a      	ldr	r2, [r3, #32]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 0201 	bic.w	r2, r2, #1
 8005234:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005244:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	011b      	lsls	r3, r3, #4
 800524c:	68ba      	ldr	r2, [r7, #8]
 800524e:	4313      	orrs	r3, r2
 8005250:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	621a      	str	r2, [r3, #32]
      break;
 8005262:	e017      	b.n	8005294 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6818      	ldr	r0, [r3, #0]
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	6899      	ldr	r1, [r3, #8]
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	461a      	mov	r2, r3
 8005272:	f000 f87d 	bl	8005370 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005276:	e00d      	b.n	8005294 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6818      	ldr	r0, [r3, #0]
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	6899      	ldr	r1, [r3, #8]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	461a      	mov	r2, r3
 8005286:	f000 f8df 	bl	8005448 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800528a:	e003      	b.n	8005294 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	75fb      	strb	r3, [r7, #23]
      break;
 8005290:	e000      	b.n	8005294 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8005292:	bf00      	nop
  }

  return status;
 8005294:	7dfb      	ldrb	r3, [r7, #23]
}
 8005296:	4618      	mov	r0, r3
 8005298:	3718      	adds	r7, #24
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
	...

080052a0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b087      	sub	sp, #28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
 80052ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	f023 0201 	bic.w	r2, r3, #1
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6a1b      	ldr	r3, [r3, #32]
 80052c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	4a24      	ldr	r2, [pc, #144]	; (800535c <TIM_TI1_SetConfig+0xbc>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d013      	beq.n	80052f6 <TIM_TI1_SetConfig+0x56>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d4:	d00f      	beq.n	80052f6 <TIM_TI1_SetConfig+0x56>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	4a21      	ldr	r2, [pc, #132]	; (8005360 <TIM_TI1_SetConfig+0xc0>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d00b      	beq.n	80052f6 <TIM_TI1_SetConfig+0x56>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	4a20      	ldr	r2, [pc, #128]	; (8005364 <TIM_TI1_SetConfig+0xc4>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d007      	beq.n	80052f6 <TIM_TI1_SetConfig+0x56>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	4a1f      	ldr	r2, [pc, #124]	; (8005368 <TIM_TI1_SetConfig+0xc8>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d003      	beq.n	80052f6 <TIM_TI1_SetConfig+0x56>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	4a1e      	ldr	r2, [pc, #120]	; (800536c <TIM_TI1_SetConfig+0xcc>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d101      	bne.n	80052fa <TIM_TI1_SetConfig+0x5a>
 80052f6:	2301      	movs	r3, #1
 80052f8:	e000      	b.n	80052fc <TIM_TI1_SetConfig+0x5c>
 80052fa:	2300      	movs	r3, #0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d008      	beq.n	8005312 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	f023 0303 	bic.w	r3, r3, #3
 8005306:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4313      	orrs	r3, r2
 800530e:	617b      	str	r3, [r7, #20]
 8005310:	e003      	b.n	800531a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f043 0301 	orr.w	r3, r3, #1
 8005318:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005320:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	011b      	lsls	r3, r3, #4
 8005326:	b2db      	uxtb	r3, r3
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	4313      	orrs	r3, r2
 800532c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	f023 030a 	bic.w	r3, r3, #10
 8005334:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	f003 030a 	and.w	r3, r3, #10
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	4313      	orrs	r3, r2
 8005340:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	621a      	str	r2, [r3, #32]
}
 800534e:	bf00      	nop
 8005350:	371c      	adds	r7, #28
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	40010000 	.word	0x40010000
 8005360:	40000400 	.word	0x40000400
 8005364:	40000800 	.word	0x40000800
 8005368:	40000c00 	.word	0x40000c00
 800536c:	40014000 	.word	0x40014000

08005370 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005370:	b480      	push	{r7}
 8005372:	b087      	sub	sp, #28
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	f023 0201 	bic.w	r2, r3, #1
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800539a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	011b      	lsls	r3, r3, #4
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	f023 030a 	bic.w	r3, r3, #10
 80053ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053ae:	697a      	ldr	r2, [r7, #20]
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	621a      	str	r2, [r3, #32]
}
 80053c2:	bf00      	nop
 80053c4:	371c      	adds	r7, #28
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80053ce:	b480      	push	{r7}
 80053d0:	b087      	sub	sp, #28
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	60f8      	str	r0, [r7, #12]
 80053d6:	60b9      	str	r1, [r7, #8]
 80053d8:	607a      	str	r2, [r7, #4]
 80053da:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	f023 0210 	bic.w	r2, r3, #16
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	021b      	lsls	r3, r3, #8
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	4313      	orrs	r3, r2
 8005404:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800540c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	031b      	lsls	r3, r3, #12
 8005412:	b29b      	uxth	r3, r3
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	4313      	orrs	r3, r2
 8005418:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005420:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	011b      	lsls	r3, r3, #4
 8005426:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800542a:	693a      	ldr	r2, [r7, #16]
 800542c:	4313      	orrs	r3, r2
 800542e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	621a      	str	r2, [r3, #32]
}
 800543c:	bf00      	nop
 800543e:	371c      	adds	r7, #28
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005448:	b480      	push	{r7}
 800544a:	b087      	sub	sp, #28
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6a1b      	ldr	r3, [r3, #32]
 8005458:	f023 0210 	bic.w	r2, r3, #16
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	699b      	ldr	r3, [r3, #24]
 8005464:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005472:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	031b      	lsls	r3, r3, #12
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	4313      	orrs	r3, r2
 800547c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005484:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	011b      	lsls	r3, r3, #4
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	4313      	orrs	r3, r2
 800548e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	621a      	str	r2, [r3, #32]
}
 800549c:	bf00      	nop
 800549e:	371c      	adds	r7, #28
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b087      	sub	sp, #28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
 80054b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	69db      	ldr	r3, [r3, #28]
 80054c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6a1b      	ldr	r3, [r3, #32]
 80054cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f023 0303 	bic.w	r3, r3, #3
 80054d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4313      	orrs	r3, r2
 80054dc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	011b      	lsls	r3, r3, #4
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80054f8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	021b      	lsls	r3, r3, #8
 80054fe:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	4313      	orrs	r3, r2
 8005506:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	621a      	str	r2, [r3, #32]
}
 8005514:	bf00      	nop
 8005516:	371c      	adds	r7, #28
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005520:	b480      	push	{r7}
 8005522:	b087      	sub	sp, #28
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
 800552c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6a1b      	ldr	r3, [r3, #32]
 8005544:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800554c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	021b      	lsls	r3, r3, #8
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	4313      	orrs	r3, r2
 8005556:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800555e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	031b      	lsls	r3, r3, #12
 8005564:	b29b      	uxth	r3, r3
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	4313      	orrs	r3, r2
 800556a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005572:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	031b      	lsls	r3, r3, #12
 8005578:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	4313      	orrs	r3, r2
 8005580:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	621a      	str	r2, [r3, #32]
}
 800558e:	bf00      	nop
 8005590:	371c      	adds	r7, #28
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800559a:	b480      	push	{r7}
 800559c:	b085      	sub	sp, #20
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
 80055a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055b2:	683a      	ldr	r2, [r7, #0]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	f043 0307 	orr.w	r3, r3, #7
 80055bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	609a      	str	r2, [r3, #8]
}
 80055c4:	bf00      	nop
 80055c6:	3714      	adds	r7, #20
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b087      	sub	sp, #28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
 80055dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	021a      	lsls	r2, r3, #8
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	431a      	orrs	r2, r3
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	609a      	str	r2, [r3, #8]
}
 8005604:	bf00      	nop
 8005606:	371c      	adds	r7, #28
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005610:	b480      	push	{r7}
 8005612:	b087      	sub	sp, #28
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	f003 031f 	and.w	r3, r3, #31
 8005622:	2201      	movs	r2, #1
 8005624:	fa02 f303 	lsl.w	r3, r2, r3
 8005628:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6a1a      	ldr	r2, [r3, #32]
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	43db      	mvns	r3, r3
 8005632:	401a      	ands	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6a1a      	ldr	r2, [r3, #32]
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	f003 031f 	and.w	r3, r3, #31
 8005642:	6879      	ldr	r1, [r7, #4]
 8005644:	fa01 f303 	lsl.w	r3, r1, r3
 8005648:	431a      	orrs	r2, r3
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	621a      	str	r2, [r3, #32]
}
 800564e:	bf00      	nop
 8005650:	371c      	adds	r7, #28
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
	...

0800565c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800566c:	2b01      	cmp	r3, #1
 800566e:	d101      	bne.n	8005674 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005670:	2302      	movs	r3, #2
 8005672:	e050      	b.n	8005716 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2202      	movs	r2, #2
 8005680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800569a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a1c      	ldr	r2, [pc, #112]	; (8005724 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d018      	beq.n	80056ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c0:	d013      	beq.n	80056ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a18      	ldr	r2, [pc, #96]	; (8005728 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d00e      	beq.n	80056ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a16      	ldr	r2, [pc, #88]	; (800572c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d009      	beq.n	80056ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a15      	ldr	r2, [pc, #84]	; (8005730 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d004      	beq.n	80056ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a13      	ldr	r2, [pc, #76]	; (8005734 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d10c      	bne.n	8005704 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	68ba      	ldr	r2, [r7, #8]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68ba      	ldr	r2, [r7, #8]
 8005702:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	40010000 	.word	0x40010000
 8005728:	40000400 	.word	0x40000400
 800572c:	40000800 	.word	0x40000800
 8005730:	40000c00 	.word	0x40000c00
 8005734:	40014000 	.word	0x40014000

08005738 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d101      	bne.n	800574a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e03f      	b.n	80057ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b00      	cmp	r3, #0
 8005754:	d106      	bne.n	8005764 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f7fc fe86 	bl	8002470 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2224      	movs	r2, #36	; 0x24
 8005768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68da      	ldr	r2, [r3, #12]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800577a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 f829 	bl	80057d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	691a      	ldr	r2, [r3, #16]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005790:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	695a      	ldr	r2, [r3, #20]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68da      	ldr	r2, [r3, #12]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2220      	movs	r2, #32
 80057bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2220      	movs	r2, #32
 80057c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3708      	adds	r7, #8
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
	...

080057d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057d8:	b0c0      	sub	sp, #256	; 0x100
 80057da:	af00      	add	r7, sp, #0
 80057dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80057ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f0:	68d9      	ldr	r1, [r3, #12]
 80057f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	ea40 0301 	orr.w	r3, r0, r1
 80057fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005802:	689a      	ldr	r2, [r3, #8]
 8005804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	431a      	orrs	r2, r3
 800580c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	431a      	orrs	r2, r3
 8005814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	4313      	orrs	r3, r2
 800581c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800582c:	f021 010c 	bic.w	r1, r1, #12
 8005830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800583a:	430b      	orrs	r3, r1
 800583c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800583e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800584a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800584e:	6999      	ldr	r1, [r3, #24]
 8005850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	ea40 0301 	orr.w	r3, r0, r1
 800585a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800585c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	4b8f      	ldr	r3, [pc, #572]	; (8005aa0 <UART_SetConfig+0x2cc>)
 8005864:	429a      	cmp	r2, r3
 8005866:	d005      	beq.n	8005874 <UART_SetConfig+0xa0>
 8005868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	4b8d      	ldr	r3, [pc, #564]	; (8005aa4 <UART_SetConfig+0x2d0>)
 8005870:	429a      	cmp	r2, r3
 8005872:	d104      	bne.n	800587e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005874:	f7fe fdf6 	bl	8004464 <HAL_RCC_GetPCLK2Freq>
 8005878:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800587c:	e003      	b.n	8005886 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800587e:	f7fe fddd 	bl	800443c <HAL_RCC_GetPCLK1Freq>
 8005882:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800588a:	69db      	ldr	r3, [r3, #28]
 800588c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005890:	f040 810c 	bne.w	8005aac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005894:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005898:	2200      	movs	r2, #0
 800589a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800589e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80058a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80058a6:	4622      	mov	r2, r4
 80058a8:	462b      	mov	r3, r5
 80058aa:	1891      	adds	r1, r2, r2
 80058ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80058ae:	415b      	adcs	r3, r3
 80058b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80058b6:	4621      	mov	r1, r4
 80058b8:	eb12 0801 	adds.w	r8, r2, r1
 80058bc:	4629      	mov	r1, r5
 80058be:	eb43 0901 	adc.w	r9, r3, r1
 80058c2:	f04f 0200 	mov.w	r2, #0
 80058c6:	f04f 0300 	mov.w	r3, #0
 80058ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058d6:	4690      	mov	r8, r2
 80058d8:	4699      	mov	r9, r3
 80058da:	4623      	mov	r3, r4
 80058dc:	eb18 0303 	adds.w	r3, r8, r3
 80058e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80058e4:	462b      	mov	r3, r5
 80058e6:	eb49 0303 	adc.w	r3, r9, r3
 80058ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80058ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80058fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80058fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005902:	460b      	mov	r3, r1
 8005904:	18db      	adds	r3, r3, r3
 8005906:	653b      	str	r3, [r7, #80]	; 0x50
 8005908:	4613      	mov	r3, r2
 800590a:	eb42 0303 	adc.w	r3, r2, r3
 800590e:	657b      	str	r3, [r7, #84]	; 0x54
 8005910:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005914:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005918:	f7fb f924 	bl	8000b64 <__aeabi_uldivmod>
 800591c:	4602      	mov	r2, r0
 800591e:	460b      	mov	r3, r1
 8005920:	4b61      	ldr	r3, [pc, #388]	; (8005aa8 <UART_SetConfig+0x2d4>)
 8005922:	fba3 2302 	umull	r2, r3, r3, r2
 8005926:	095b      	lsrs	r3, r3, #5
 8005928:	011c      	lsls	r4, r3, #4
 800592a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800592e:	2200      	movs	r2, #0
 8005930:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005934:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005938:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800593c:	4642      	mov	r2, r8
 800593e:	464b      	mov	r3, r9
 8005940:	1891      	adds	r1, r2, r2
 8005942:	64b9      	str	r1, [r7, #72]	; 0x48
 8005944:	415b      	adcs	r3, r3
 8005946:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005948:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800594c:	4641      	mov	r1, r8
 800594e:	eb12 0a01 	adds.w	sl, r2, r1
 8005952:	4649      	mov	r1, r9
 8005954:	eb43 0b01 	adc.w	fp, r3, r1
 8005958:	f04f 0200 	mov.w	r2, #0
 800595c:	f04f 0300 	mov.w	r3, #0
 8005960:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005964:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005968:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800596c:	4692      	mov	sl, r2
 800596e:	469b      	mov	fp, r3
 8005970:	4643      	mov	r3, r8
 8005972:	eb1a 0303 	adds.w	r3, sl, r3
 8005976:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800597a:	464b      	mov	r3, r9
 800597c:	eb4b 0303 	adc.w	r3, fp, r3
 8005980:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005990:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005994:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005998:	460b      	mov	r3, r1
 800599a:	18db      	adds	r3, r3, r3
 800599c:	643b      	str	r3, [r7, #64]	; 0x40
 800599e:	4613      	mov	r3, r2
 80059a0:	eb42 0303 	adc.w	r3, r2, r3
 80059a4:	647b      	str	r3, [r7, #68]	; 0x44
 80059a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80059aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80059ae:	f7fb f8d9 	bl	8000b64 <__aeabi_uldivmod>
 80059b2:	4602      	mov	r2, r0
 80059b4:	460b      	mov	r3, r1
 80059b6:	4611      	mov	r1, r2
 80059b8:	4b3b      	ldr	r3, [pc, #236]	; (8005aa8 <UART_SetConfig+0x2d4>)
 80059ba:	fba3 2301 	umull	r2, r3, r3, r1
 80059be:	095b      	lsrs	r3, r3, #5
 80059c0:	2264      	movs	r2, #100	; 0x64
 80059c2:	fb02 f303 	mul.w	r3, r2, r3
 80059c6:	1acb      	subs	r3, r1, r3
 80059c8:	00db      	lsls	r3, r3, #3
 80059ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80059ce:	4b36      	ldr	r3, [pc, #216]	; (8005aa8 <UART_SetConfig+0x2d4>)
 80059d0:	fba3 2302 	umull	r2, r3, r3, r2
 80059d4:	095b      	lsrs	r3, r3, #5
 80059d6:	005b      	lsls	r3, r3, #1
 80059d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80059dc:	441c      	add	r4, r3
 80059de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059e2:	2200      	movs	r2, #0
 80059e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80059ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80059f0:	4642      	mov	r2, r8
 80059f2:	464b      	mov	r3, r9
 80059f4:	1891      	adds	r1, r2, r2
 80059f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80059f8:	415b      	adcs	r3, r3
 80059fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a00:	4641      	mov	r1, r8
 8005a02:	1851      	adds	r1, r2, r1
 8005a04:	6339      	str	r1, [r7, #48]	; 0x30
 8005a06:	4649      	mov	r1, r9
 8005a08:	414b      	adcs	r3, r1
 8005a0a:	637b      	str	r3, [r7, #52]	; 0x34
 8005a0c:	f04f 0200 	mov.w	r2, #0
 8005a10:	f04f 0300 	mov.w	r3, #0
 8005a14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005a18:	4659      	mov	r1, fp
 8005a1a:	00cb      	lsls	r3, r1, #3
 8005a1c:	4651      	mov	r1, sl
 8005a1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a22:	4651      	mov	r1, sl
 8005a24:	00ca      	lsls	r2, r1, #3
 8005a26:	4610      	mov	r0, r2
 8005a28:	4619      	mov	r1, r3
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	4642      	mov	r2, r8
 8005a2e:	189b      	adds	r3, r3, r2
 8005a30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a34:	464b      	mov	r3, r9
 8005a36:	460a      	mov	r2, r1
 8005a38:	eb42 0303 	adc.w	r3, r2, r3
 8005a3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005a50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005a54:	460b      	mov	r3, r1
 8005a56:	18db      	adds	r3, r3, r3
 8005a58:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	eb42 0303 	adc.w	r3, r2, r3
 8005a60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005a6a:	f7fb f87b 	bl	8000b64 <__aeabi_uldivmod>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	460b      	mov	r3, r1
 8005a72:	4b0d      	ldr	r3, [pc, #52]	; (8005aa8 <UART_SetConfig+0x2d4>)
 8005a74:	fba3 1302 	umull	r1, r3, r3, r2
 8005a78:	095b      	lsrs	r3, r3, #5
 8005a7a:	2164      	movs	r1, #100	; 0x64
 8005a7c:	fb01 f303 	mul.w	r3, r1, r3
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	00db      	lsls	r3, r3, #3
 8005a84:	3332      	adds	r3, #50	; 0x32
 8005a86:	4a08      	ldr	r2, [pc, #32]	; (8005aa8 <UART_SetConfig+0x2d4>)
 8005a88:	fba2 2303 	umull	r2, r3, r2, r3
 8005a8c:	095b      	lsrs	r3, r3, #5
 8005a8e:	f003 0207 	and.w	r2, r3, #7
 8005a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4422      	add	r2, r4
 8005a9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a9c:	e105      	b.n	8005caa <UART_SetConfig+0x4d6>
 8005a9e:	bf00      	nop
 8005aa0:	40011000 	.word	0x40011000
 8005aa4:	40011400 	.word	0x40011400
 8005aa8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005aac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005ab6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005aba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005abe:	4642      	mov	r2, r8
 8005ac0:	464b      	mov	r3, r9
 8005ac2:	1891      	adds	r1, r2, r2
 8005ac4:	6239      	str	r1, [r7, #32]
 8005ac6:	415b      	adcs	r3, r3
 8005ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8005aca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ace:	4641      	mov	r1, r8
 8005ad0:	1854      	adds	r4, r2, r1
 8005ad2:	4649      	mov	r1, r9
 8005ad4:	eb43 0501 	adc.w	r5, r3, r1
 8005ad8:	f04f 0200 	mov.w	r2, #0
 8005adc:	f04f 0300 	mov.w	r3, #0
 8005ae0:	00eb      	lsls	r3, r5, #3
 8005ae2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ae6:	00e2      	lsls	r2, r4, #3
 8005ae8:	4614      	mov	r4, r2
 8005aea:	461d      	mov	r5, r3
 8005aec:	4643      	mov	r3, r8
 8005aee:	18e3      	adds	r3, r4, r3
 8005af0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005af4:	464b      	mov	r3, r9
 8005af6:	eb45 0303 	adc.w	r3, r5, r3
 8005afa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b0e:	f04f 0200 	mov.w	r2, #0
 8005b12:	f04f 0300 	mov.w	r3, #0
 8005b16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005b1a:	4629      	mov	r1, r5
 8005b1c:	008b      	lsls	r3, r1, #2
 8005b1e:	4621      	mov	r1, r4
 8005b20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b24:	4621      	mov	r1, r4
 8005b26:	008a      	lsls	r2, r1, #2
 8005b28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005b2c:	f7fb f81a 	bl	8000b64 <__aeabi_uldivmod>
 8005b30:	4602      	mov	r2, r0
 8005b32:	460b      	mov	r3, r1
 8005b34:	4b60      	ldr	r3, [pc, #384]	; (8005cb8 <UART_SetConfig+0x4e4>)
 8005b36:	fba3 2302 	umull	r2, r3, r3, r2
 8005b3a:	095b      	lsrs	r3, r3, #5
 8005b3c:	011c      	lsls	r4, r3, #4
 8005b3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b42:	2200      	movs	r2, #0
 8005b44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005b4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005b50:	4642      	mov	r2, r8
 8005b52:	464b      	mov	r3, r9
 8005b54:	1891      	adds	r1, r2, r2
 8005b56:	61b9      	str	r1, [r7, #24]
 8005b58:	415b      	adcs	r3, r3
 8005b5a:	61fb      	str	r3, [r7, #28]
 8005b5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b60:	4641      	mov	r1, r8
 8005b62:	1851      	adds	r1, r2, r1
 8005b64:	6139      	str	r1, [r7, #16]
 8005b66:	4649      	mov	r1, r9
 8005b68:	414b      	adcs	r3, r1
 8005b6a:	617b      	str	r3, [r7, #20]
 8005b6c:	f04f 0200 	mov.w	r2, #0
 8005b70:	f04f 0300 	mov.w	r3, #0
 8005b74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b78:	4659      	mov	r1, fp
 8005b7a:	00cb      	lsls	r3, r1, #3
 8005b7c:	4651      	mov	r1, sl
 8005b7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b82:	4651      	mov	r1, sl
 8005b84:	00ca      	lsls	r2, r1, #3
 8005b86:	4610      	mov	r0, r2
 8005b88:	4619      	mov	r1, r3
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	4642      	mov	r2, r8
 8005b8e:	189b      	adds	r3, r3, r2
 8005b90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b94:	464b      	mov	r3, r9
 8005b96:	460a      	mov	r2, r1
 8005b98:	eb42 0303 	adc.w	r3, r2, r3
 8005b9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	67bb      	str	r3, [r7, #120]	; 0x78
 8005baa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005bac:	f04f 0200 	mov.w	r2, #0
 8005bb0:	f04f 0300 	mov.w	r3, #0
 8005bb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005bb8:	4649      	mov	r1, r9
 8005bba:	008b      	lsls	r3, r1, #2
 8005bbc:	4641      	mov	r1, r8
 8005bbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bc2:	4641      	mov	r1, r8
 8005bc4:	008a      	lsls	r2, r1, #2
 8005bc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005bca:	f7fa ffcb 	bl	8000b64 <__aeabi_uldivmod>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	4b39      	ldr	r3, [pc, #228]	; (8005cb8 <UART_SetConfig+0x4e4>)
 8005bd4:	fba3 1302 	umull	r1, r3, r3, r2
 8005bd8:	095b      	lsrs	r3, r3, #5
 8005bda:	2164      	movs	r1, #100	; 0x64
 8005bdc:	fb01 f303 	mul.w	r3, r1, r3
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	011b      	lsls	r3, r3, #4
 8005be4:	3332      	adds	r3, #50	; 0x32
 8005be6:	4a34      	ldr	r2, [pc, #208]	; (8005cb8 <UART_SetConfig+0x4e4>)
 8005be8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bec:	095b      	lsrs	r3, r3, #5
 8005bee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bf2:	441c      	add	r4, r3
 8005bf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	673b      	str	r3, [r7, #112]	; 0x70
 8005bfc:	677a      	str	r2, [r7, #116]	; 0x74
 8005bfe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005c02:	4642      	mov	r2, r8
 8005c04:	464b      	mov	r3, r9
 8005c06:	1891      	adds	r1, r2, r2
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	415b      	adcs	r3, r3
 8005c0c:	60fb      	str	r3, [r7, #12]
 8005c0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c12:	4641      	mov	r1, r8
 8005c14:	1851      	adds	r1, r2, r1
 8005c16:	6039      	str	r1, [r7, #0]
 8005c18:	4649      	mov	r1, r9
 8005c1a:	414b      	adcs	r3, r1
 8005c1c:	607b      	str	r3, [r7, #4]
 8005c1e:	f04f 0200 	mov.w	r2, #0
 8005c22:	f04f 0300 	mov.w	r3, #0
 8005c26:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c2a:	4659      	mov	r1, fp
 8005c2c:	00cb      	lsls	r3, r1, #3
 8005c2e:	4651      	mov	r1, sl
 8005c30:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c34:	4651      	mov	r1, sl
 8005c36:	00ca      	lsls	r2, r1, #3
 8005c38:	4610      	mov	r0, r2
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	4642      	mov	r2, r8
 8005c40:	189b      	adds	r3, r3, r2
 8005c42:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c44:	464b      	mov	r3, r9
 8005c46:	460a      	mov	r2, r1
 8005c48:	eb42 0303 	adc.w	r3, r2, r3
 8005c4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	663b      	str	r3, [r7, #96]	; 0x60
 8005c58:	667a      	str	r2, [r7, #100]	; 0x64
 8005c5a:	f04f 0200 	mov.w	r2, #0
 8005c5e:	f04f 0300 	mov.w	r3, #0
 8005c62:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005c66:	4649      	mov	r1, r9
 8005c68:	008b      	lsls	r3, r1, #2
 8005c6a:	4641      	mov	r1, r8
 8005c6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c70:	4641      	mov	r1, r8
 8005c72:	008a      	lsls	r2, r1, #2
 8005c74:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005c78:	f7fa ff74 	bl	8000b64 <__aeabi_uldivmod>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	460b      	mov	r3, r1
 8005c80:	4b0d      	ldr	r3, [pc, #52]	; (8005cb8 <UART_SetConfig+0x4e4>)
 8005c82:	fba3 1302 	umull	r1, r3, r3, r2
 8005c86:	095b      	lsrs	r3, r3, #5
 8005c88:	2164      	movs	r1, #100	; 0x64
 8005c8a:	fb01 f303 	mul.w	r3, r1, r3
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	011b      	lsls	r3, r3, #4
 8005c92:	3332      	adds	r3, #50	; 0x32
 8005c94:	4a08      	ldr	r2, [pc, #32]	; (8005cb8 <UART_SetConfig+0x4e4>)
 8005c96:	fba2 2303 	umull	r2, r3, r2, r3
 8005c9a:	095b      	lsrs	r3, r3, #5
 8005c9c:	f003 020f 	and.w	r2, r3, #15
 8005ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4422      	add	r2, r4
 8005ca8:	609a      	str	r2, [r3, #8]
}
 8005caa:	bf00      	nop
 8005cac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cb6:	bf00      	nop
 8005cb8:	51eb851f 	.word	0x51eb851f

08005cbc <__libc_init_array>:
 8005cbc:	b570      	push	{r4, r5, r6, lr}
 8005cbe:	4d0d      	ldr	r5, [pc, #52]	; (8005cf4 <__libc_init_array+0x38>)
 8005cc0:	4c0d      	ldr	r4, [pc, #52]	; (8005cf8 <__libc_init_array+0x3c>)
 8005cc2:	1b64      	subs	r4, r4, r5
 8005cc4:	10a4      	asrs	r4, r4, #2
 8005cc6:	2600      	movs	r6, #0
 8005cc8:	42a6      	cmp	r6, r4
 8005cca:	d109      	bne.n	8005ce0 <__libc_init_array+0x24>
 8005ccc:	4d0b      	ldr	r5, [pc, #44]	; (8005cfc <__libc_init_array+0x40>)
 8005cce:	4c0c      	ldr	r4, [pc, #48]	; (8005d00 <__libc_init_array+0x44>)
 8005cd0:	f000 f820 	bl	8005d14 <_init>
 8005cd4:	1b64      	subs	r4, r4, r5
 8005cd6:	10a4      	asrs	r4, r4, #2
 8005cd8:	2600      	movs	r6, #0
 8005cda:	42a6      	cmp	r6, r4
 8005cdc:	d105      	bne.n	8005cea <__libc_init_array+0x2e>
 8005cde:	bd70      	pop	{r4, r5, r6, pc}
 8005ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ce4:	4798      	blx	r3
 8005ce6:	3601      	adds	r6, #1
 8005ce8:	e7ee      	b.n	8005cc8 <__libc_init_array+0xc>
 8005cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cee:	4798      	blx	r3
 8005cf0:	3601      	adds	r6, #1
 8005cf2:	e7f2      	b.n	8005cda <__libc_init_array+0x1e>
 8005cf4:	08005d4c 	.word	0x08005d4c
 8005cf8:	08005d4c 	.word	0x08005d4c
 8005cfc:	08005d4c 	.word	0x08005d4c
 8005d00:	08005d50 	.word	0x08005d50

08005d04 <memset>:
 8005d04:	4402      	add	r2, r0
 8005d06:	4603      	mov	r3, r0
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d100      	bne.n	8005d0e <memset+0xa>
 8005d0c:	4770      	bx	lr
 8005d0e:	f803 1b01 	strb.w	r1, [r3], #1
 8005d12:	e7f9      	b.n	8005d08 <memset+0x4>

08005d14 <_init>:
 8005d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d16:	bf00      	nop
 8005d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d1a:	bc08      	pop	{r3}
 8005d1c:	469e      	mov	lr, r3
 8005d1e:	4770      	bx	lr

08005d20 <_fini>:
 8005d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d22:	bf00      	nop
 8005d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d26:	bc08      	pop	{r3}
 8005d28:	469e      	mov	lr, r3
 8005d2a:	4770      	bx	lr
